// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPaymentMethodID holds the string denoting the payment_method_id field in the database.
	FieldPaymentMethodID = "payment_method_id"
	// FieldTransactionType holds the string denoting the transaction_type field in the database.
	FieldTransactionType = "transaction_type"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldExternalTransactionID holds the string denoting the external_transaction_id field in the database.
	FieldExternalTransactionID = "external_transaction_id"
	// FieldReferenceNumber holds the string denoting the reference_number field in the database.
	FieldReferenceNumber = "reference_number"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePaymentMethod holds the string denoting the payment_method edge name in mutations.
	EdgePaymentMethod = "payment_method"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "transactions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PaymentMethodTable is the table that holds the payment_method relation/edge.
	PaymentMethodTable = "transactions"
	// PaymentMethodInverseTable is the table name for the PaymentMethod entity.
	// It exists in this package in order to avoid circular dependency with the "paymentmethod" package.
	PaymentMethodInverseTable = "payment_methods"
	// PaymentMethodColumn is the table column denoting the payment_method relation/edge.
	PaymentMethodColumn = "payment_method_id"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPaymentMethodID,
	FieldTransactionType,
	FieldAmount,
	FieldCurrency,
	FieldStatus,
	FieldDescription,
	FieldExternalTransactionID,
	FieldReferenceNumber,
	FieldMetadata,
	FieldProcessedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "app/pkg/database/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// TransactionType defines the type for the "transaction_type" enum field.
type TransactionType string

// TransactionType values.
const (
	TransactionTypePayment      TransactionType = "payment"
	TransactionTypeRefund       TransactionType = "refund"
	TransactionTypeSubscription TransactionType = "subscription"
	TransactionTypePurchase     TransactionType = "purchase"
	TransactionTypeWithdrawal   TransactionType = "withdrawal"
)

func (tt TransactionType) String() string {
	return string(tt)
}

// TransactionTypeValidator is a validator for the "transaction_type" field enum values. It is called by the builders before save.
func TransactionTypeValidator(tt TransactionType) error {
	switch tt {
	case TransactionTypePayment, TransactionTypeRefund, TransactionTypeSubscription, TransactionTypePurchase, TransactionTypeWithdrawal:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for transaction_type field: %q", tt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending   Status = "pending"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
	StatusCancelled Status = "cancelled"
	StatusRefunded  Status = "refunded"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusCompleted, StatusFailed, StatusCancelled, StatusRefunded:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPaymentMethodID orders the results by the payment_method_id field.
func ByPaymentMethodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethodID, opts...).ToFunc()
}

// ByTransactionType orders the results by the transaction_type field.
func ByTransactionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionType, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByExternalTransactionID orders the results by the external_transaction_id field.
func ByExternalTransactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalTransactionID, opts...).ToFunc()
}

// ByReferenceNumber orders the results by the reference_number field.
func ByReferenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceNumber, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPaymentMethodField orders the results by payment_method field.
func ByPaymentMethodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentMethodStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newPaymentMethodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentMethodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PaymentMethodTable, PaymentMethodColumn),
	)
}
