// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"app/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUserID, v))
}

// PaymentMethodID applies equality check predicate on the "payment_method_id" field. It's identical to PaymentMethodIDEQ.
func PaymentMethodID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentMethodID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCurrency, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDescription, v))
}

// ExternalTransactionID applies equality check predicate on the "external_transaction_id" field. It's identical to ExternalTransactionIDEQ.
func ExternalTransactionID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldExternalTransactionID, v))
}

// ReferenceNumber applies equality check predicate on the "reference_number" field. It's identical to ReferenceNumberEQ.
func ReferenceNumber(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldReferenceNumber, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldProcessedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldUserID, v))
}

// PaymentMethodIDEQ applies the EQ predicate on the "payment_method_id" field.
func PaymentMethodIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentMethodID, v))
}

// PaymentMethodIDNEQ applies the NEQ predicate on the "payment_method_id" field.
func PaymentMethodIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentMethodID, v))
}

// PaymentMethodIDIn applies the In predicate on the "payment_method_id" field.
func PaymentMethodIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentMethodID, vs...))
}

// PaymentMethodIDNotIn applies the NotIn predicate on the "payment_method_id" field.
func PaymentMethodIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentMethodID, vs...))
}

// PaymentMethodIDGT applies the GT predicate on the "payment_method_id" field.
func PaymentMethodIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentMethodID, v))
}

// PaymentMethodIDGTE applies the GTE predicate on the "payment_method_id" field.
func PaymentMethodIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentMethodID, v))
}

// PaymentMethodIDLT applies the LT predicate on the "payment_method_id" field.
func PaymentMethodIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentMethodID, v))
}

// PaymentMethodIDLTE applies the LTE predicate on the "payment_method_id" field.
func PaymentMethodIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentMethodID, v))
}

// PaymentMethodIDContains applies the Contains predicate on the "payment_method_id" field.
func PaymentMethodIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentMethodID, v))
}

// PaymentMethodIDHasPrefix applies the HasPrefix predicate on the "payment_method_id" field.
func PaymentMethodIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentMethodID, v))
}

// PaymentMethodIDHasSuffix applies the HasSuffix predicate on the "payment_method_id" field.
func PaymentMethodIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentMethodID, v))
}

// PaymentMethodIDIsNil applies the IsNil predicate on the "payment_method_id" field.
func PaymentMethodIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldPaymentMethodID))
}

// PaymentMethodIDNotNil applies the NotNil predicate on the "payment_method_id" field.
func PaymentMethodIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldPaymentMethodID))
}

// PaymentMethodIDEqualFold applies the EqualFold predicate on the "payment_method_id" field.
func PaymentMethodIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentMethodID, v))
}

// PaymentMethodIDContainsFold applies the ContainsFold predicate on the "payment_method_id" field.
func PaymentMethodIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentMethodID, v))
}

// TransactionTypeEQ applies the EQ predicate on the "transaction_type" field.
func TransactionTypeEQ(v TransactionType) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionType, v))
}

// TransactionTypeNEQ applies the NEQ predicate on the "transaction_type" field.
func TransactionTypeNEQ(v TransactionType) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionType, v))
}

// TransactionTypeIn applies the In predicate on the "transaction_type" field.
func TransactionTypeIn(vs ...TransactionType) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionType, vs...))
}

// TransactionTypeNotIn applies the NotIn predicate on the "transaction_type" field.
func TransactionTypeNotIn(vs ...TransactionType) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionType, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCurrency, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldStatus))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldDescription, v))
}

// ExternalTransactionIDEQ applies the EQ predicate on the "external_transaction_id" field.
func ExternalTransactionIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldExternalTransactionID, v))
}

// ExternalTransactionIDNEQ applies the NEQ predicate on the "external_transaction_id" field.
func ExternalTransactionIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldExternalTransactionID, v))
}

// ExternalTransactionIDIn applies the In predicate on the "external_transaction_id" field.
func ExternalTransactionIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldExternalTransactionID, vs...))
}

// ExternalTransactionIDNotIn applies the NotIn predicate on the "external_transaction_id" field.
func ExternalTransactionIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldExternalTransactionID, vs...))
}

// ExternalTransactionIDGT applies the GT predicate on the "external_transaction_id" field.
func ExternalTransactionIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldExternalTransactionID, v))
}

// ExternalTransactionIDGTE applies the GTE predicate on the "external_transaction_id" field.
func ExternalTransactionIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldExternalTransactionID, v))
}

// ExternalTransactionIDLT applies the LT predicate on the "external_transaction_id" field.
func ExternalTransactionIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldExternalTransactionID, v))
}

// ExternalTransactionIDLTE applies the LTE predicate on the "external_transaction_id" field.
func ExternalTransactionIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldExternalTransactionID, v))
}

// ExternalTransactionIDContains applies the Contains predicate on the "external_transaction_id" field.
func ExternalTransactionIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldExternalTransactionID, v))
}

// ExternalTransactionIDHasPrefix applies the HasPrefix predicate on the "external_transaction_id" field.
func ExternalTransactionIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldExternalTransactionID, v))
}

// ExternalTransactionIDHasSuffix applies the HasSuffix predicate on the "external_transaction_id" field.
func ExternalTransactionIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldExternalTransactionID, v))
}

// ExternalTransactionIDIsNil applies the IsNil predicate on the "external_transaction_id" field.
func ExternalTransactionIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldExternalTransactionID))
}

// ExternalTransactionIDNotNil applies the NotNil predicate on the "external_transaction_id" field.
func ExternalTransactionIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldExternalTransactionID))
}

// ExternalTransactionIDEqualFold applies the EqualFold predicate on the "external_transaction_id" field.
func ExternalTransactionIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldExternalTransactionID, v))
}

// ExternalTransactionIDContainsFold applies the ContainsFold predicate on the "external_transaction_id" field.
func ExternalTransactionIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldExternalTransactionID, v))
}

// ReferenceNumberEQ applies the EQ predicate on the "reference_number" field.
func ReferenceNumberEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldReferenceNumber, v))
}

// ReferenceNumberNEQ applies the NEQ predicate on the "reference_number" field.
func ReferenceNumberNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldReferenceNumber, v))
}

// ReferenceNumberIn applies the In predicate on the "reference_number" field.
func ReferenceNumberIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberNotIn applies the NotIn predicate on the "reference_number" field.
func ReferenceNumberNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberGT applies the GT predicate on the "reference_number" field.
func ReferenceNumberGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldReferenceNumber, v))
}

// ReferenceNumberGTE applies the GTE predicate on the "reference_number" field.
func ReferenceNumberGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldReferenceNumber, v))
}

// ReferenceNumberLT applies the LT predicate on the "reference_number" field.
func ReferenceNumberLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldReferenceNumber, v))
}

// ReferenceNumberLTE applies the LTE predicate on the "reference_number" field.
func ReferenceNumberLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldReferenceNumber, v))
}

// ReferenceNumberContains applies the Contains predicate on the "reference_number" field.
func ReferenceNumberContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldReferenceNumber, v))
}

// ReferenceNumberHasPrefix applies the HasPrefix predicate on the "reference_number" field.
func ReferenceNumberHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldReferenceNumber, v))
}

// ReferenceNumberHasSuffix applies the HasSuffix predicate on the "reference_number" field.
func ReferenceNumberHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldReferenceNumber, v))
}

// ReferenceNumberIsNil applies the IsNil predicate on the "reference_number" field.
func ReferenceNumberIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldReferenceNumber))
}

// ReferenceNumberNotNil applies the NotNil predicate on the "reference_number" field.
func ReferenceNumberNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldReferenceNumber))
}

// ReferenceNumberEqualFold applies the EqualFold predicate on the "reference_number" field.
func ReferenceNumberEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldReferenceNumber, v))
}

// ReferenceNumberContainsFold applies the ContainsFold predicate on the "reference_number" field.
func ReferenceNumberContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldReferenceNumber, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMetadata))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldProcessedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentMethod applies the HasEdge predicate on the "payment_method" edge.
func HasPaymentMethod() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentMethodTable, PaymentMethodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentMethodWith applies the HasEdge predicate on the "payment_method" edge with a given conditions (other predicates).
func HasPaymentMethodWith(preds ...predicate.PaymentMethod) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newPaymentMethodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
