// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
)

// PaymentMethodUpdate is the builder for updating PaymentMethod entities.
type PaymentMethodUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMethodMutation
}

// Where appends a list predicates to the PaymentMethodUpdate builder.
func (pmu *PaymentMethodUpdate) Where(ps ...predicate.PaymentMethod) *PaymentMethodUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUserID sets the "user_id" field.
func (pmu *PaymentMethodUpdate) SetUserID(s string) *PaymentMethodUpdate {
	pmu.mutation.SetUserID(s)
	return pmu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableUserID(s *string) *PaymentMethodUpdate {
	if s != nil {
		pmu.SetUserID(*s)
	}
	return pmu
}

// ClearUserID clears the value of the "user_id" field.
func (pmu *PaymentMethodUpdate) ClearUserID() *PaymentMethodUpdate {
	pmu.mutation.ClearUserID()
	return pmu
}

// SetMethodType sets the "method_type" field.
func (pmu *PaymentMethodUpdate) SetMethodType(pt paymentmethod.MethodType) *PaymentMethodUpdate {
	pmu.mutation.SetMethodType(pt)
	return pmu
}

// SetNillableMethodType sets the "method_type" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableMethodType(pt *paymentmethod.MethodType) *PaymentMethodUpdate {
	if pt != nil {
		pmu.SetMethodType(*pt)
	}
	return pmu
}

// SetProvider sets the "provider" field.
func (pmu *PaymentMethodUpdate) SetProvider(s string) *PaymentMethodUpdate {
	pmu.mutation.SetProvider(s)
	return pmu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableProvider(s *string) *PaymentMethodUpdate {
	if s != nil {
		pmu.SetProvider(*s)
	}
	return pmu
}

// SetMaskedNumber sets the "masked_number" field.
func (pmu *PaymentMethodUpdate) SetMaskedNumber(s string) *PaymentMethodUpdate {
	pmu.mutation.SetMaskedNumber(s)
	return pmu
}

// SetNillableMaskedNumber sets the "masked_number" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableMaskedNumber(s *string) *PaymentMethodUpdate {
	if s != nil {
		pmu.SetMaskedNumber(*s)
	}
	return pmu
}

// ClearMaskedNumber clears the value of the "masked_number" field.
func (pmu *PaymentMethodUpdate) ClearMaskedNumber() *PaymentMethodUpdate {
	pmu.mutation.ClearMaskedNumber()
	return pmu
}

// SetHolderName sets the "holder_name" field.
func (pmu *PaymentMethodUpdate) SetHolderName(s string) *PaymentMethodUpdate {
	pmu.mutation.SetHolderName(s)
	return pmu
}

// SetNillableHolderName sets the "holder_name" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableHolderName(s *string) *PaymentMethodUpdate {
	if s != nil {
		pmu.SetHolderName(*s)
	}
	return pmu
}

// ClearHolderName clears the value of the "holder_name" field.
func (pmu *PaymentMethodUpdate) ClearHolderName() *PaymentMethodUpdate {
	pmu.mutation.ClearHolderName()
	return pmu
}

// SetExpiryMonth sets the "expiry_month" field.
func (pmu *PaymentMethodUpdate) SetExpiryMonth(i int8) *PaymentMethodUpdate {
	pmu.mutation.ResetExpiryMonth()
	pmu.mutation.SetExpiryMonth(i)
	return pmu
}

// SetNillableExpiryMonth sets the "expiry_month" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableExpiryMonth(i *int8) *PaymentMethodUpdate {
	if i != nil {
		pmu.SetExpiryMonth(*i)
	}
	return pmu
}

// AddExpiryMonth adds i to the "expiry_month" field.
func (pmu *PaymentMethodUpdate) AddExpiryMonth(i int8) *PaymentMethodUpdate {
	pmu.mutation.AddExpiryMonth(i)
	return pmu
}

// ClearExpiryMonth clears the value of the "expiry_month" field.
func (pmu *PaymentMethodUpdate) ClearExpiryMonth() *PaymentMethodUpdate {
	pmu.mutation.ClearExpiryMonth()
	return pmu
}

// SetExpiryYear sets the "expiry_year" field.
func (pmu *PaymentMethodUpdate) SetExpiryYear(i int16) *PaymentMethodUpdate {
	pmu.mutation.ResetExpiryYear()
	pmu.mutation.SetExpiryYear(i)
	return pmu
}

// SetNillableExpiryYear sets the "expiry_year" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableExpiryYear(i *int16) *PaymentMethodUpdate {
	if i != nil {
		pmu.SetExpiryYear(*i)
	}
	return pmu
}

// AddExpiryYear adds i to the "expiry_year" field.
func (pmu *PaymentMethodUpdate) AddExpiryYear(i int16) *PaymentMethodUpdate {
	pmu.mutation.AddExpiryYear(i)
	return pmu
}

// ClearExpiryYear clears the value of the "expiry_year" field.
func (pmu *PaymentMethodUpdate) ClearExpiryYear() *PaymentMethodUpdate {
	pmu.mutation.ClearExpiryYear()
	return pmu
}

// SetIsDefault sets the "is_default" field.
func (pmu *PaymentMethodUpdate) SetIsDefault(b bool) *PaymentMethodUpdate {
	pmu.mutation.SetIsDefault(b)
	return pmu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableIsDefault(b *bool) *PaymentMethodUpdate {
	if b != nil {
		pmu.SetIsDefault(*b)
	}
	return pmu
}

// ClearIsDefault clears the value of the "is_default" field.
func (pmu *PaymentMethodUpdate) ClearIsDefault() *PaymentMethodUpdate {
	pmu.mutation.ClearIsDefault()
	return pmu
}

// SetIsActive sets the "is_active" field.
func (pmu *PaymentMethodUpdate) SetIsActive(b bool) *PaymentMethodUpdate {
	pmu.mutation.SetIsActive(b)
	return pmu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableIsActive(b *bool) *PaymentMethodUpdate {
	if b != nil {
		pmu.SetIsActive(*b)
	}
	return pmu
}

// ClearIsActive clears the value of the "is_active" field.
func (pmu *PaymentMethodUpdate) ClearIsActive() *PaymentMethodUpdate {
	pmu.mutation.ClearIsActive()
	return pmu
}

// SetExternalID sets the "external_id" field.
func (pmu *PaymentMethodUpdate) SetExternalID(s string) *PaymentMethodUpdate {
	pmu.mutation.SetExternalID(s)
	return pmu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableExternalID(s *string) *PaymentMethodUpdate {
	if s != nil {
		pmu.SetExternalID(*s)
	}
	return pmu
}

// ClearExternalID clears the value of the "external_id" field.
func (pmu *PaymentMethodUpdate) ClearExternalID() *PaymentMethodUpdate {
	pmu.mutation.ClearExternalID()
	return pmu
}

// SetMetadata sets the "metadata" field.
func (pmu *PaymentMethodUpdate) SetMetadata(jm json.RawMessage) *PaymentMethodUpdate {
	pmu.mutation.SetMetadata(jm)
	return pmu
}

// AppendMetadata appends jm to the "metadata" field.
func (pmu *PaymentMethodUpdate) AppendMetadata(jm json.RawMessage) *PaymentMethodUpdate {
	pmu.mutation.AppendMetadata(jm)
	return pmu
}

// ClearMetadata clears the value of the "metadata" field.
func (pmu *PaymentMethodUpdate) ClearMetadata() *PaymentMethodUpdate {
	pmu.mutation.ClearMetadata()
	return pmu
}

// SetCreatedAt sets the "created_at" field.
func (pmu *PaymentMethodUpdate) SetCreatedAt(t time.Time) *PaymentMethodUpdate {
	pmu.mutation.SetCreatedAt(t)
	return pmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableCreatedAt(t *time.Time) *PaymentMethodUpdate {
	if t != nil {
		pmu.SetCreatedAt(*t)
	}
	return pmu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pmu *PaymentMethodUpdate) ClearCreatedAt() *PaymentMethodUpdate {
	pmu.mutation.ClearCreatedAt()
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *PaymentMethodUpdate) SetUpdatedAt(t time.Time) *PaymentMethodUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableUpdatedAt(t *time.Time) *PaymentMethodUpdate {
	if t != nil {
		pmu.SetUpdatedAt(*t)
	}
	return pmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pmu *PaymentMethodUpdate) ClearUpdatedAt() *PaymentMethodUpdate {
	pmu.mutation.ClearUpdatedAt()
	return pmu
}

// SetDeletedAt sets the "deleted_at" field.
func (pmu *PaymentMethodUpdate) SetDeletedAt(t time.Time) *PaymentMethodUpdate {
	pmu.mutation.SetDeletedAt(t)
	return pmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmu *PaymentMethodUpdate) SetNillableDeletedAt(t *time.Time) *PaymentMethodUpdate {
	if t != nil {
		pmu.SetDeletedAt(*t)
	}
	return pmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmu *PaymentMethodUpdate) ClearDeletedAt() *PaymentMethodUpdate {
	pmu.mutation.ClearDeletedAt()
	return pmu
}

// SetUser sets the "user" edge to the User entity.
func (pmu *PaymentMethodUpdate) SetUser(u *User) *PaymentMethodUpdate {
	return pmu.SetUserID(u.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pmu *PaymentMethodUpdate) AddTransactionIDs(ids ...string) *PaymentMethodUpdate {
	pmu.mutation.AddTransactionIDs(ids...)
	return pmu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pmu *PaymentMethodUpdate) AddTransactions(t ...*Transaction) *PaymentMethodUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pmu.AddTransactionIDs(ids...)
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmu *PaymentMethodUpdate) Mutation() *PaymentMethodMutation {
	return pmu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pmu *PaymentMethodUpdate) ClearUser() *PaymentMethodUpdate {
	pmu.mutation.ClearUser()
	return pmu
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (pmu *PaymentMethodUpdate) ClearTransactions() *PaymentMethodUpdate {
	pmu.mutation.ClearTransactions()
	return pmu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (pmu *PaymentMethodUpdate) RemoveTransactionIDs(ids ...string) *PaymentMethodUpdate {
	pmu.mutation.RemoveTransactionIDs(ids...)
	return pmu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (pmu *PaymentMethodUpdate) RemoveTransactions(t ...*Transaction) *PaymentMethodUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pmu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PaymentMethodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PaymentMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PaymentMethodUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PaymentMethodUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *PaymentMethodUpdate) check() error {
	if v, ok := pmu.mutation.MethodType(); ok {
		if err := paymentmethod.MethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "method_type", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.method_type": %w`, err)}
		}
	}
	return nil
}

func (pmu *PaymentMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentmethod.Table, paymentmethod.Columns, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.MethodType(); ok {
		_spec.SetField(paymentmethod.FieldMethodType, field.TypeEnum, value)
	}
	if value, ok := pmu.mutation.Provider(); ok {
		_spec.SetField(paymentmethod.FieldProvider, field.TypeString, value)
	}
	if value, ok := pmu.mutation.MaskedNumber(); ok {
		_spec.SetField(paymentmethod.FieldMaskedNumber, field.TypeString, value)
	}
	if pmu.mutation.MaskedNumberCleared() {
		_spec.ClearField(paymentmethod.FieldMaskedNumber, field.TypeString)
	}
	if value, ok := pmu.mutation.HolderName(); ok {
		_spec.SetField(paymentmethod.FieldHolderName, field.TypeString, value)
	}
	if pmu.mutation.HolderNameCleared() {
		_spec.ClearField(paymentmethod.FieldHolderName, field.TypeString)
	}
	if value, ok := pmu.mutation.ExpiryMonth(); ok {
		_spec.SetField(paymentmethod.FieldExpiryMonth, field.TypeInt8, value)
	}
	if value, ok := pmu.mutation.AddedExpiryMonth(); ok {
		_spec.AddField(paymentmethod.FieldExpiryMonth, field.TypeInt8, value)
	}
	if pmu.mutation.ExpiryMonthCleared() {
		_spec.ClearField(paymentmethod.FieldExpiryMonth, field.TypeInt8)
	}
	if value, ok := pmu.mutation.ExpiryYear(); ok {
		_spec.SetField(paymentmethod.FieldExpiryYear, field.TypeInt16, value)
	}
	if value, ok := pmu.mutation.AddedExpiryYear(); ok {
		_spec.AddField(paymentmethod.FieldExpiryYear, field.TypeInt16, value)
	}
	if pmu.mutation.ExpiryYearCleared() {
		_spec.ClearField(paymentmethod.FieldExpiryYear, field.TypeInt16)
	}
	if value, ok := pmu.mutation.IsDefault(); ok {
		_spec.SetField(paymentmethod.FieldIsDefault, field.TypeBool, value)
	}
	if pmu.mutation.IsDefaultCleared() {
		_spec.ClearField(paymentmethod.FieldIsDefault, field.TypeBool)
	}
	if value, ok := pmu.mutation.IsActive(); ok {
		_spec.SetField(paymentmethod.FieldIsActive, field.TypeBool, value)
	}
	if pmu.mutation.IsActiveCleared() {
		_spec.ClearField(paymentmethod.FieldIsActive, field.TypeBool)
	}
	if value, ok := pmu.mutation.ExternalID(); ok {
		_spec.SetField(paymentmethod.FieldExternalID, field.TypeString, value)
	}
	if pmu.mutation.ExternalIDCleared() {
		_spec.ClearField(paymentmethod.FieldExternalID, field.TypeString)
	}
	if value, ok := pmu.mutation.Metadata(); ok {
		_spec.SetField(paymentmethod.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := pmu.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentmethod.FieldMetadata, value)
		})
	}
	if pmu.mutation.MetadataCleared() {
		_spec.ClearField(paymentmethod.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.SetField(paymentmethod.FieldCreatedAt, field.TypeTime, value)
	}
	if pmu.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentmethod.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentmethod.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentmethod.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pmu.mutation.DeletedAt(); ok {
		_spec.SetField(paymentmethod.FieldDeletedAt, field.TypeTime, value)
	}
	if pmu.mutation.DeletedAtCleared() {
		_spec.ClearField(paymentmethod.FieldDeletedAt, field.TypeTime)
	}
	if pmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.UserTable,
			Columns: []string{paymentmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.UserTable,
			Columns: []string{paymentmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pmu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PaymentMethodUpdateOne is the builder for updating a single PaymentMethod entity.
type PaymentMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMethodMutation
}

// SetUserID sets the "user_id" field.
func (pmuo *PaymentMethodUpdateOne) SetUserID(s string) *PaymentMethodUpdateOne {
	pmuo.mutation.SetUserID(s)
	return pmuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableUserID(s *string) *PaymentMethodUpdateOne {
	if s != nil {
		pmuo.SetUserID(*s)
	}
	return pmuo
}

// ClearUserID clears the value of the "user_id" field.
func (pmuo *PaymentMethodUpdateOne) ClearUserID() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearUserID()
	return pmuo
}

// SetMethodType sets the "method_type" field.
func (pmuo *PaymentMethodUpdateOne) SetMethodType(pt paymentmethod.MethodType) *PaymentMethodUpdateOne {
	pmuo.mutation.SetMethodType(pt)
	return pmuo
}

// SetNillableMethodType sets the "method_type" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableMethodType(pt *paymentmethod.MethodType) *PaymentMethodUpdateOne {
	if pt != nil {
		pmuo.SetMethodType(*pt)
	}
	return pmuo
}

// SetProvider sets the "provider" field.
func (pmuo *PaymentMethodUpdateOne) SetProvider(s string) *PaymentMethodUpdateOne {
	pmuo.mutation.SetProvider(s)
	return pmuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableProvider(s *string) *PaymentMethodUpdateOne {
	if s != nil {
		pmuo.SetProvider(*s)
	}
	return pmuo
}

// SetMaskedNumber sets the "masked_number" field.
func (pmuo *PaymentMethodUpdateOne) SetMaskedNumber(s string) *PaymentMethodUpdateOne {
	pmuo.mutation.SetMaskedNumber(s)
	return pmuo
}

// SetNillableMaskedNumber sets the "masked_number" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableMaskedNumber(s *string) *PaymentMethodUpdateOne {
	if s != nil {
		pmuo.SetMaskedNumber(*s)
	}
	return pmuo
}

// ClearMaskedNumber clears the value of the "masked_number" field.
func (pmuo *PaymentMethodUpdateOne) ClearMaskedNumber() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearMaskedNumber()
	return pmuo
}

// SetHolderName sets the "holder_name" field.
func (pmuo *PaymentMethodUpdateOne) SetHolderName(s string) *PaymentMethodUpdateOne {
	pmuo.mutation.SetHolderName(s)
	return pmuo
}

// SetNillableHolderName sets the "holder_name" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableHolderName(s *string) *PaymentMethodUpdateOne {
	if s != nil {
		pmuo.SetHolderName(*s)
	}
	return pmuo
}

// ClearHolderName clears the value of the "holder_name" field.
func (pmuo *PaymentMethodUpdateOne) ClearHolderName() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearHolderName()
	return pmuo
}

// SetExpiryMonth sets the "expiry_month" field.
func (pmuo *PaymentMethodUpdateOne) SetExpiryMonth(i int8) *PaymentMethodUpdateOne {
	pmuo.mutation.ResetExpiryMonth()
	pmuo.mutation.SetExpiryMonth(i)
	return pmuo
}

// SetNillableExpiryMonth sets the "expiry_month" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableExpiryMonth(i *int8) *PaymentMethodUpdateOne {
	if i != nil {
		pmuo.SetExpiryMonth(*i)
	}
	return pmuo
}

// AddExpiryMonth adds i to the "expiry_month" field.
func (pmuo *PaymentMethodUpdateOne) AddExpiryMonth(i int8) *PaymentMethodUpdateOne {
	pmuo.mutation.AddExpiryMonth(i)
	return pmuo
}

// ClearExpiryMonth clears the value of the "expiry_month" field.
func (pmuo *PaymentMethodUpdateOne) ClearExpiryMonth() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearExpiryMonth()
	return pmuo
}

// SetExpiryYear sets the "expiry_year" field.
func (pmuo *PaymentMethodUpdateOne) SetExpiryYear(i int16) *PaymentMethodUpdateOne {
	pmuo.mutation.ResetExpiryYear()
	pmuo.mutation.SetExpiryYear(i)
	return pmuo
}

// SetNillableExpiryYear sets the "expiry_year" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableExpiryYear(i *int16) *PaymentMethodUpdateOne {
	if i != nil {
		pmuo.SetExpiryYear(*i)
	}
	return pmuo
}

// AddExpiryYear adds i to the "expiry_year" field.
func (pmuo *PaymentMethodUpdateOne) AddExpiryYear(i int16) *PaymentMethodUpdateOne {
	pmuo.mutation.AddExpiryYear(i)
	return pmuo
}

// ClearExpiryYear clears the value of the "expiry_year" field.
func (pmuo *PaymentMethodUpdateOne) ClearExpiryYear() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearExpiryYear()
	return pmuo
}

// SetIsDefault sets the "is_default" field.
func (pmuo *PaymentMethodUpdateOne) SetIsDefault(b bool) *PaymentMethodUpdateOne {
	pmuo.mutation.SetIsDefault(b)
	return pmuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableIsDefault(b *bool) *PaymentMethodUpdateOne {
	if b != nil {
		pmuo.SetIsDefault(*b)
	}
	return pmuo
}

// ClearIsDefault clears the value of the "is_default" field.
func (pmuo *PaymentMethodUpdateOne) ClearIsDefault() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearIsDefault()
	return pmuo
}

// SetIsActive sets the "is_active" field.
func (pmuo *PaymentMethodUpdateOne) SetIsActive(b bool) *PaymentMethodUpdateOne {
	pmuo.mutation.SetIsActive(b)
	return pmuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableIsActive(b *bool) *PaymentMethodUpdateOne {
	if b != nil {
		pmuo.SetIsActive(*b)
	}
	return pmuo
}

// ClearIsActive clears the value of the "is_active" field.
func (pmuo *PaymentMethodUpdateOne) ClearIsActive() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearIsActive()
	return pmuo
}

// SetExternalID sets the "external_id" field.
func (pmuo *PaymentMethodUpdateOne) SetExternalID(s string) *PaymentMethodUpdateOne {
	pmuo.mutation.SetExternalID(s)
	return pmuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableExternalID(s *string) *PaymentMethodUpdateOne {
	if s != nil {
		pmuo.SetExternalID(*s)
	}
	return pmuo
}

// ClearExternalID clears the value of the "external_id" field.
func (pmuo *PaymentMethodUpdateOne) ClearExternalID() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearExternalID()
	return pmuo
}

// SetMetadata sets the "metadata" field.
func (pmuo *PaymentMethodUpdateOne) SetMetadata(jm json.RawMessage) *PaymentMethodUpdateOne {
	pmuo.mutation.SetMetadata(jm)
	return pmuo
}

// AppendMetadata appends jm to the "metadata" field.
func (pmuo *PaymentMethodUpdateOne) AppendMetadata(jm json.RawMessage) *PaymentMethodUpdateOne {
	pmuo.mutation.AppendMetadata(jm)
	return pmuo
}

// ClearMetadata clears the value of the "metadata" field.
func (pmuo *PaymentMethodUpdateOne) ClearMetadata() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearMetadata()
	return pmuo
}

// SetCreatedAt sets the "created_at" field.
func (pmuo *PaymentMethodUpdateOne) SetCreatedAt(t time.Time) *PaymentMethodUpdateOne {
	pmuo.mutation.SetCreatedAt(t)
	return pmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentMethodUpdateOne {
	if t != nil {
		pmuo.SetCreatedAt(*t)
	}
	return pmuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pmuo *PaymentMethodUpdateOne) ClearCreatedAt() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearCreatedAt()
	return pmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *PaymentMethodUpdateOne) SetUpdatedAt(t time.Time) *PaymentMethodUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableUpdatedAt(t *time.Time) *PaymentMethodUpdateOne {
	if t != nil {
		pmuo.SetUpdatedAt(*t)
	}
	return pmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pmuo *PaymentMethodUpdateOne) ClearUpdatedAt() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearUpdatedAt()
	return pmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pmuo *PaymentMethodUpdateOne) SetDeletedAt(t time.Time) *PaymentMethodUpdateOne {
	pmuo.mutation.SetDeletedAt(t)
	return pmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmuo *PaymentMethodUpdateOne) SetNillableDeletedAt(t *time.Time) *PaymentMethodUpdateOne {
	if t != nil {
		pmuo.SetDeletedAt(*t)
	}
	return pmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmuo *PaymentMethodUpdateOne) ClearDeletedAt() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearDeletedAt()
	return pmuo
}

// SetUser sets the "user" edge to the User entity.
func (pmuo *PaymentMethodUpdateOne) SetUser(u *User) *PaymentMethodUpdateOne {
	return pmuo.SetUserID(u.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pmuo *PaymentMethodUpdateOne) AddTransactionIDs(ids ...string) *PaymentMethodUpdateOne {
	pmuo.mutation.AddTransactionIDs(ids...)
	return pmuo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pmuo *PaymentMethodUpdateOne) AddTransactions(t ...*Transaction) *PaymentMethodUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pmuo.AddTransactionIDs(ids...)
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmuo *PaymentMethodUpdateOne) Mutation() *PaymentMethodMutation {
	return pmuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pmuo *PaymentMethodUpdateOne) ClearUser() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearUser()
	return pmuo
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (pmuo *PaymentMethodUpdateOne) ClearTransactions() *PaymentMethodUpdateOne {
	pmuo.mutation.ClearTransactions()
	return pmuo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (pmuo *PaymentMethodUpdateOne) RemoveTransactionIDs(ids ...string) *PaymentMethodUpdateOne {
	pmuo.mutation.RemoveTransactionIDs(ids...)
	return pmuo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (pmuo *PaymentMethodUpdateOne) RemoveTransactions(t ...*Transaction) *PaymentMethodUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pmuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the PaymentMethodUpdate builder.
func (pmuo *PaymentMethodUpdateOne) Where(ps ...predicate.PaymentMethod) *PaymentMethodUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PaymentMethodUpdateOne) Select(field string, fields ...string) *PaymentMethodUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PaymentMethod entity.
func (pmuo *PaymentMethodUpdateOne) Save(ctx context.Context) (*PaymentMethod, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PaymentMethodUpdateOne) SaveX(ctx context.Context) *PaymentMethod {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PaymentMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PaymentMethodUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *PaymentMethodUpdateOne) check() error {
	if v, ok := pmuo.mutation.MethodType(); ok {
		if err := paymentmethod.MethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "method_type", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.method_type": %w`, err)}
		}
	}
	return nil
}

func (pmuo *PaymentMethodUpdateOne) sqlSave(ctx context.Context) (_node *PaymentMethod, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentmethod.Table, paymentmethod.Columns, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentmethod.FieldID)
		for _, f := range fields {
			if !paymentmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.MethodType(); ok {
		_spec.SetField(paymentmethod.FieldMethodType, field.TypeEnum, value)
	}
	if value, ok := pmuo.mutation.Provider(); ok {
		_spec.SetField(paymentmethod.FieldProvider, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.MaskedNumber(); ok {
		_spec.SetField(paymentmethod.FieldMaskedNumber, field.TypeString, value)
	}
	if pmuo.mutation.MaskedNumberCleared() {
		_spec.ClearField(paymentmethod.FieldMaskedNumber, field.TypeString)
	}
	if value, ok := pmuo.mutation.HolderName(); ok {
		_spec.SetField(paymentmethod.FieldHolderName, field.TypeString, value)
	}
	if pmuo.mutation.HolderNameCleared() {
		_spec.ClearField(paymentmethod.FieldHolderName, field.TypeString)
	}
	if value, ok := pmuo.mutation.ExpiryMonth(); ok {
		_spec.SetField(paymentmethod.FieldExpiryMonth, field.TypeInt8, value)
	}
	if value, ok := pmuo.mutation.AddedExpiryMonth(); ok {
		_spec.AddField(paymentmethod.FieldExpiryMonth, field.TypeInt8, value)
	}
	if pmuo.mutation.ExpiryMonthCleared() {
		_spec.ClearField(paymentmethod.FieldExpiryMonth, field.TypeInt8)
	}
	if value, ok := pmuo.mutation.ExpiryYear(); ok {
		_spec.SetField(paymentmethod.FieldExpiryYear, field.TypeInt16, value)
	}
	if value, ok := pmuo.mutation.AddedExpiryYear(); ok {
		_spec.AddField(paymentmethod.FieldExpiryYear, field.TypeInt16, value)
	}
	if pmuo.mutation.ExpiryYearCleared() {
		_spec.ClearField(paymentmethod.FieldExpiryYear, field.TypeInt16)
	}
	if value, ok := pmuo.mutation.IsDefault(); ok {
		_spec.SetField(paymentmethod.FieldIsDefault, field.TypeBool, value)
	}
	if pmuo.mutation.IsDefaultCleared() {
		_spec.ClearField(paymentmethod.FieldIsDefault, field.TypeBool)
	}
	if value, ok := pmuo.mutation.IsActive(); ok {
		_spec.SetField(paymentmethod.FieldIsActive, field.TypeBool, value)
	}
	if pmuo.mutation.IsActiveCleared() {
		_spec.ClearField(paymentmethod.FieldIsActive, field.TypeBool)
	}
	if value, ok := pmuo.mutation.ExternalID(); ok {
		_spec.SetField(paymentmethod.FieldExternalID, field.TypeString, value)
	}
	if pmuo.mutation.ExternalIDCleared() {
		_spec.ClearField(paymentmethod.FieldExternalID, field.TypeString)
	}
	if value, ok := pmuo.mutation.Metadata(); ok {
		_spec.SetField(paymentmethod.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := pmuo.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentmethod.FieldMetadata, value)
		})
	}
	if pmuo.mutation.MetadataCleared() {
		_spec.ClearField(paymentmethod.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.SetField(paymentmethod.FieldCreatedAt, field.TypeTime, value)
	}
	if pmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentmethod.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentmethod.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentmethod.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pmuo.mutation.DeletedAt(); ok {
		_spec.SetField(paymentmethod.FieldDeletedAt, field.TypeTime, value)
	}
	if pmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(paymentmethod.FieldDeletedAt, field.TypeTime)
	}
	if pmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.UserTable,
			Columns: []string{paymentmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.UserTable,
			Columns: []string{paymentmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pmuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentMethod{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
