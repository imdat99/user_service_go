// Code generated by ent, DO NOT EDIT.

package apikey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"app/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldUserID, v))
}

// KeyName applies equality check predicate on the "key_name" field. It's identical to KeyNameEQ.
func KeyName(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldKeyName, v))
}

// APIKeyHash applies equality check predicate on the "api_key_hash" field. It's identical to APIKeyHashEQ.
func APIKeyHash(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldAPIKeyHash, v))
}

// APIKeyPrefix applies equality check predicate on the "api_key_prefix" field. It's identical to APIKeyPrefixEQ.
func APIKeyPrefix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldAPIKeyPrefix, v))
}

// RateLimitPerMinute applies equality check predicate on the "rate_limit_per_minute" field. It's identical to RateLimitPerMinuteEQ.
func RateLimitPerMinute(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldRateLimitPerMinute, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldIsActive, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldLastUsedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContainsFold(FieldUserID, v))
}

// KeyNameEQ applies the EQ predicate on the "key_name" field.
func KeyNameEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldKeyName, v))
}

// KeyNameNEQ applies the NEQ predicate on the "key_name" field.
func KeyNameNEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldKeyName, v))
}

// KeyNameIn applies the In predicate on the "key_name" field.
func KeyNameIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldKeyName, vs...))
}

// KeyNameNotIn applies the NotIn predicate on the "key_name" field.
func KeyNameNotIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldKeyName, vs...))
}

// KeyNameGT applies the GT predicate on the "key_name" field.
func KeyNameGT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldKeyName, v))
}

// KeyNameGTE applies the GTE predicate on the "key_name" field.
func KeyNameGTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldKeyName, v))
}

// KeyNameLT applies the LT predicate on the "key_name" field.
func KeyNameLT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldKeyName, v))
}

// KeyNameLTE applies the LTE predicate on the "key_name" field.
func KeyNameLTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldKeyName, v))
}

// KeyNameContains applies the Contains predicate on the "key_name" field.
func KeyNameContains(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContains(FieldKeyName, v))
}

// KeyNameHasPrefix applies the HasPrefix predicate on the "key_name" field.
func KeyNameHasPrefix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasPrefix(FieldKeyName, v))
}

// KeyNameHasSuffix applies the HasSuffix predicate on the "key_name" field.
func KeyNameHasSuffix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasSuffix(FieldKeyName, v))
}

// KeyNameEqualFold applies the EqualFold predicate on the "key_name" field.
func KeyNameEqualFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEqualFold(FieldKeyName, v))
}

// KeyNameContainsFold applies the ContainsFold predicate on the "key_name" field.
func KeyNameContainsFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContainsFold(FieldKeyName, v))
}

// APIKeyHashEQ applies the EQ predicate on the "api_key_hash" field.
func APIKeyHashEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldAPIKeyHash, v))
}

// APIKeyHashNEQ applies the NEQ predicate on the "api_key_hash" field.
func APIKeyHashNEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldAPIKeyHash, v))
}

// APIKeyHashIn applies the In predicate on the "api_key_hash" field.
func APIKeyHashIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldAPIKeyHash, vs...))
}

// APIKeyHashNotIn applies the NotIn predicate on the "api_key_hash" field.
func APIKeyHashNotIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldAPIKeyHash, vs...))
}

// APIKeyHashGT applies the GT predicate on the "api_key_hash" field.
func APIKeyHashGT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldAPIKeyHash, v))
}

// APIKeyHashGTE applies the GTE predicate on the "api_key_hash" field.
func APIKeyHashGTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldAPIKeyHash, v))
}

// APIKeyHashLT applies the LT predicate on the "api_key_hash" field.
func APIKeyHashLT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldAPIKeyHash, v))
}

// APIKeyHashLTE applies the LTE predicate on the "api_key_hash" field.
func APIKeyHashLTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldAPIKeyHash, v))
}

// APIKeyHashContains applies the Contains predicate on the "api_key_hash" field.
func APIKeyHashContains(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContains(FieldAPIKeyHash, v))
}

// APIKeyHashHasPrefix applies the HasPrefix predicate on the "api_key_hash" field.
func APIKeyHashHasPrefix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasPrefix(FieldAPIKeyHash, v))
}

// APIKeyHashHasSuffix applies the HasSuffix predicate on the "api_key_hash" field.
func APIKeyHashHasSuffix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasSuffix(FieldAPIKeyHash, v))
}

// APIKeyHashEqualFold applies the EqualFold predicate on the "api_key_hash" field.
func APIKeyHashEqualFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEqualFold(FieldAPIKeyHash, v))
}

// APIKeyHashContainsFold applies the ContainsFold predicate on the "api_key_hash" field.
func APIKeyHashContainsFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContainsFold(FieldAPIKeyHash, v))
}

// APIKeyPrefixEQ applies the EQ predicate on the "api_key_prefix" field.
func APIKeyPrefixEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixNEQ applies the NEQ predicate on the "api_key_prefix" field.
func APIKeyPrefixNEQ(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixIn applies the In predicate on the "api_key_prefix" field.
func APIKeyPrefixIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldAPIKeyPrefix, vs...))
}

// APIKeyPrefixNotIn applies the NotIn predicate on the "api_key_prefix" field.
func APIKeyPrefixNotIn(vs ...string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldAPIKeyPrefix, vs...))
}

// APIKeyPrefixGT applies the GT predicate on the "api_key_prefix" field.
func APIKeyPrefixGT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixGTE applies the GTE predicate on the "api_key_prefix" field.
func APIKeyPrefixGTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixLT applies the LT predicate on the "api_key_prefix" field.
func APIKeyPrefixLT(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixLTE applies the LTE predicate on the "api_key_prefix" field.
func APIKeyPrefixLTE(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixContains applies the Contains predicate on the "api_key_prefix" field.
func APIKeyPrefixContains(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContains(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixHasPrefix applies the HasPrefix predicate on the "api_key_prefix" field.
func APIKeyPrefixHasPrefix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasPrefix(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixHasSuffix applies the HasSuffix predicate on the "api_key_prefix" field.
func APIKeyPrefixHasSuffix(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldHasSuffix(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixEqualFold applies the EqualFold predicate on the "api_key_prefix" field.
func APIKeyPrefixEqualFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEqualFold(FieldAPIKeyPrefix, v))
}

// APIKeyPrefixContainsFold applies the ContainsFold predicate on the "api_key_prefix" field.
func APIKeyPrefixContainsFold(v string) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldContainsFold(FieldAPIKeyPrefix, v))
}

// PermissionsIsNil applies the IsNil predicate on the "permissions" field.
func PermissionsIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldPermissions))
}

// PermissionsNotNil applies the NotNil predicate on the "permissions" field.
func PermissionsNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldPermissions))
}

// RateLimitPerMinuteEQ applies the EQ predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteEQ(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteNEQ applies the NEQ predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteNEQ(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteIn applies the In predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteIn(vs ...int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldRateLimitPerMinute, vs...))
}

// RateLimitPerMinuteNotIn applies the NotIn predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteNotIn(vs ...int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldRateLimitPerMinute, vs...))
}

// RateLimitPerMinuteGT applies the GT predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteGT(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteGTE applies the GTE predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteGTE(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteLT applies the LT predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteLT(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteLTE applies the LTE predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteLTE(v int32) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldRateLimitPerMinute, v))
}

// RateLimitPerMinuteIsNil applies the IsNil predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldRateLimitPerMinute))
}

// RateLimitPerMinuteNotNil applies the NotNil predicate on the "rate_limit_per_minute" field.
func RateLimitPerMinuteNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldRateLimitPerMinute))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldIsActive, v))
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldIsActive))
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldIsActive))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldLastUsedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldExpiresAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ApiKey {
	return predicate.ApiKey(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ApiKey {
	return predicate.ApiKey(sql.FieldNotNull(FieldDeletedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ApiKey {
	return predicate.ApiKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ApiKey {
	return predicate.ApiKey(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiKey) predicate.ApiKey {
	return predicate.ApiKey(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiKey) predicate.ApiKey {
	return predicate.ApiKey(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiKey) predicate.ApiKey {
	return predicate.ApiKey(sql.NotPredicates(p))
}
