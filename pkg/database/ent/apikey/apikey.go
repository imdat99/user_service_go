// Code generated by ent, DO NOT EDIT.

package apikey

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apikey type in the database.
	Label = "api_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldKeyName holds the string denoting the key_name field in the database.
	FieldKeyName = "key_name"
	// FieldAPIKeyHash holds the string denoting the api_key_hash field in the database.
	FieldAPIKeyHash = "api_key_hash"
	// FieldAPIKeyPrefix holds the string denoting the api_key_prefix field in the database.
	FieldAPIKeyPrefix = "api_key_prefix"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldRateLimitPerMinute holds the string denoting the rate_limit_per_minute field in the database.
	FieldRateLimitPerMinute = "rate_limit_per_minute"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the apikey in the database.
	Table = "api_keys"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "api_keys"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for apikey fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldKeyName,
	FieldAPIKeyHash,
	FieldAPIKeyPrefix,
	FieldPermissions,
	FieldRateLimitPerMinute,
	FieldIsActive,
	FieldLastUsedAt,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "app/pkg/database/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// OrderOption defines the ordering options for the ApiKey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByKeyName orders the results by the key_name field.
func ByKeyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyName, opts...).ToFunc()
}

// ByAPIKeyHash orders the results by the api_key_hash field.
func ByAPIKeyHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKeyHash, opts...).ToFunc()
}

// ByAPIKeyPrefix orders the results by the api_key_prefix field.
func ByAPIKeyPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKeyPrefix, opts...).ToFunc()
}

// ByRateLimitPerMinute orders the results by the rate_limit_per_minute field.
func ByRateLimitPerMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateLimitPerMinute, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
