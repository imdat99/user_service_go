// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
	"github.com/imdat99/user_service_go/pkg/database/ent/usertoken"
)

// UserTokenCreate is the builder for creating a UserToken entity.
type UserTokenCreate struct {
	config
	mutation *UserTokenMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (utc *UserTokenCreate) SetUserID(s string) *UserTokenCreate {
	utc.mutation.SetUserID(s)
	return utc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableUserID(s *string) *UserTokenCreate {
	if s != nil {
		utc.SetUserID(*s)
	}
	return utc
}

// SetTokenType sets the "token_type" field.
func (utc *UserTokenCreate) SetTokenType(ut usertoken.TokenType) *UserTokenCreate {
	utc.mutation.SetTokenType(ut)
	return utc
}

// SetTokenHash sets the "token_hash" field.
func (utc *UserTokenCreate) SetTokenHash(s string) *UserTokenCreate {
	utc.mutation.SetTokenHash(s)
	return utc
}

// SetJti sets the "jti" field.
func (utc *UserTokenCreate) SetJti(s string) *UserTokenCreate {
	utc.mutation.SetJti(s)
	return utc
}

// SetExpiresAt sets the "expires_at" field.
func (utc *UserTokenCreate) SetExpiresAt(t time.Time) *UserTokenCreate {
	utc.mutation.SetExpiresAt(t)
	return utc
}

// SetIsRevoked sets the "is_revoked" field.
func (utc *UserTokenCreate) SetIsRevoked(b bool) *UserTokenCreate {
	utc.mutation.SetIsRevoked(b)
	return utc
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableIsRevoked(b *bool) *UserTokenCreate {
	if b != nil {
		utc.SetIsRevoked(*b)
	}
	return utc
}

// SetDeviceInfo sets the "device_info" field.
func (utc *UserTokenCreate) SetDeviceInfo(s string) *UserTokenCreate {
	utc.mutation.SetDeviceInfo(s)
	return utc
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableDeviceInfo(s *string) *UserTokenCreate {
	if s != nil {
		utc.SetDeviceInfo(*s)
	}
	return utc
}

// SetIPAddress sets the "ip_address" field.
func (utc *UserTokenCreate) SetIPAddress(s string) *UserTokenCreate {
	utc.mutation.SetIPAddress(s)
	return utc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableIPAddress(s *string) *UserTokenCreate {
	if s != nil {
		utc.SetIPAddress(*s)
	}
	return utc
}

// SetUserAgent sets the "user_agent" field.
func (utc *UserTokenCreate) SetUserAgent(s string) *UserTokenCreate {
	utc.mutation.SetUserAgent(s)
	return utc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableUserAgent(s *string) *UserTokenCreate {
	if s != nil {
		utc.SetUserAgent(*s)
	}
	return utc
}

// SetParentTokenID sets the "parent_token_id" field.
func (utc *UserTokenCreate) SetParentTokenID(s string) *UserTokenCreate {
	utc.mutation.SetParentTokenID(s)
	return utc
}

// SetNillableParentTokenID sets the "parent_token_id" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableParentTokenID(s *string) *UserTokenCreate {
	if s != nil {
		utc.SetParentTokenID(*s)
	}
	return utc
}

// SetCreatedAt sets the "created_at" field.
func (utc *UserTokenCreate) SetCreatedAt(t time.Time) *UserTokenCreate {
	utc.mutation.SetCreatedAt(t)
	return utc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableCreatedAt(t *time.Time) *UserTokenCreate {
	if t != nil {
		utc.SetCreatedAt(*t)
	}
	return utc
}

// SetRevokedAt sets the "revoked_at" field.
func (utc *UserTokenCreate) SetRevokedAt(t time.Time) *UserTokenCreate {
	utc.mutation.SetRevokedAt(t)
	return utc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableRevokedAt(t *time.Time) *UserTokenCreate {
	if t != nil {
		utc.SetRevokedAt(*t)
	}
	return utc
}

// SetLastUsedAt sets the "last_used_at" field.
func (utc *UserTokenCreate) SetLastUsedAt(t time.Time) *UserTokenCreate {
	utc.mutation.SetLastUsedAt(t)
	return utc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (utc *UserTokenCreate) SetNillableLastUsedAt(t *time.Time) *UserTokenCreate {
	if t != nil {
		utc.SetLastUsedAt(*t)
	}
	return utc
}

// SetID sets the "id" field.
func (utc *UserTokenCreate) SetID(s string) *UserTokenCreate {
	utc.mutation.SetID(s)
	return utc
}

// SetUser sets the "user" edge to the User entity.
func (utc *UserTokenCreate) SetUser(u *User) *UserTokenCreate {
	return utc.SetUserID(u.ID)
}

// AddChildUserTokenIDs adds the "child_user_tokens" edge to the UserToken entity by IDs.
func (utc *UserTokenCreate) AddChildUserTokenIDs(ids ...string) *UserTokenCreate {
	utc.mutation.AddChildUserTokenIDs(ids...)
	return utc
}

// AddChildUserTokens adds the "child_user_tokens" edges to the UserToken entity.
func (utc *UserTokenCreate) AddChildUserTokens(u ...*UserToken) *UserTokenCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utc.AddChildUserTokenIDs(ids...)
}

// SetParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID.
func (utc *UserTokenCreate) SetParentUserTokenID(id string) *UserTokenCreate {
	utc.mutation.SetParentUserTokenID(id)
	return utc
}

// SetNillableParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID if the given value is not nil.
func (utc *UserTokenCreate) SetNillableParentUserTokenID(id *string) *UserTokenCreate {
	if id != nil {
		utc = utc.SetParentUserTokenID(*id)
	}
	return utc
}

// SetParentUserToken sets the "parent_user_token" edge to the UserToken entity.
func (utc *UserTokenCreate) SetParentUserToken(u *UserToken) *UserTokenCreate {
	return utc.SetParentUserTokenID(u.ID)
}

// Mutation returns the UserTokenMutation object of the builder.
func (utc *UserTokenCreate) Mutation() *UserTokenMutation {
	return utc.mutation
}

// Save creates the UserToken in the database.
func (utc *UserTokenCreate) Save(ctx context.Context) (*UserToken, error) {
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTokenCreate) SaveX(ctx context.Context) *UserToken {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UserTokenCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UserTokenCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UserTokenCreate) check() error {
	if _, ok := utc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "UserToken.token_type"`)}
	}
	if v, ok := utc.mutation.TokenType(); ok {
		if err := usertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "UserToken.token_type": %w`, err)}
		}
	}
	if _, ok := utc.mutation.TokenHash(); !ok {
		return &ValidationError{Name: "token_hash", err: errors.New(`ent: missing required field "UserToken.token_hash"`)}
	}
	if _, ok := utc.mutation.Jti(); !ok {
		return &ValidationError{Name: "jti", err: errors.New(`ent: missing required field "UserToken.jti"`)}
	}
	if _, ok := utc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "UserToken.expires_at"`)}
	}
	return nil
}

func (utc *UserTokenCreate) sqlSave(ctx context.Context) (*UserToken, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserToken.ID type: %T", _spec.ID.Value)
		}
	}
	utc.mutation.id = &_node.ID
	utc.mutation.done = true
	return _node, nil
}

func (utc *UserTokenCreate) createSpec() (*UserToken, *sqlgraph.CreateSpec) {
	var (
		_node = &UserToken{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(usertoken.Table, sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString))
	)
	if id, ok := utc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utc.mutation.TokenType(); ok {
		_spec.SetField(usertoken.FieldTokenType, field.TypeEnum, value)
		_node.TokenType = value
	}
	if value, ok := utc.mutation.TokenHash(); ok {
		_spec.SetField(usertoken.FieldTokenHash, field.TypeString, value)
		_node.TokenHash = value
	}
	if value, ok := utc.mutation.Jti(); ok {
		_spec.SetField(usertoken.FieldJti, field.TypeString, value)
		_node.Jti = value
	}
	if value, ok := utc.mutation.ExpiresAt(); ok {
		_spec.SetField(usertoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := utc.mutation.IsRevoked(); ok {
		_spec.SetField(usertoken.FieldIsRevoked, field.TypeBool, value)
		_node.IsRevoked = value
	}
	if value, ok := utc.mutation.DeviceInfo(); ok {
		_spec.SetField(usertoken.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if value, ok := utc.mutation.IPAddress(); ok {
		_spec.SetField(usertoken.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := utc.mutation.UserAgent(); ok {
		_spec.SetField(usertoken.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := utc.mutation.CreatedAt(); ok {
		_spec.SetField(usertoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := utc.mutation.RevokedAt(); ok {
		_spec.SetField(usertoken.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = value
	}
	if value, ok := utc.mutation.LastUsedAt(); ok {
		_spec.SetField(usertoken.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if nodes := utc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utc.mutation.ChildUserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utc.mutation.ParentUserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.ParentUserTokenTable,
			Columns: []string{usertoken.ParentUserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentTokenID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserTokenCreateBulk is the builder for creating many UserToken entities in bulk.
type UserTokenCreateBulk struct {
	config
	err      error
	builders []*UserTokenCreate
}

// Save creates the UserToken entities in the database.
func (utcb *UserTokenCreateBulk) Save(ctx context.Context) ([]*UserToken, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UserToken, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UserTokenCreateBulk) SaveX(ctx context.Context) []*UserToken {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UserTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UserTokenCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}
