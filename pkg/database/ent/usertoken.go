// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
	"github.com/imdat99/user_service_go/pkg/database/ent/usertoken"
)

// UserToken is the model entity for the UserToken schema.
type UserToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType usertoken.TokenType `json:"token_type,omitempty"`
	// TokenHash holds the value of the "token_hash" field.
	TokenHash string `json:"token_hash,omitempty"`
	// Jti holds the value of the "jti" field.
	Jti string `json:"jti,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IsRevoked holds the value of the "is_revoked" field.
	IsRevoked bool `json:"is_revoked,omitempty"`
	// DeviceInfo holds the value of the "device_info" field.
	DeviceInfo string `json:"device_info,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// ParentTokenID holds the value of the "parent_token_id" field.
	ParentTokenID string `json:"parent_token_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// RevokedAt holds the value of the "revoked_at" field.
	RevokedAt time.Time `json:"revoked_at,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTokenQuery when eager-loading is set.
	Edges        UserTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserTokenEdges holds the relations/edges for other nodes in the graph.
type UserTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ChildUserTokens holds the value of the child_user_tokens edge.
	ChildUserTokens []*UserToken `json:"child_user_tokens,omitempty"`
	// ParentUserToken holds the value of the parent_user_token edge.
	ParentUserToken *UserToken `json:"parent_user_token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ChildUserTokensOrErr returns the ChildUserTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserTokenEdges) ChildUserTokensOrErr() ([]*UserToken, error) {
	if e.loadedTypes[1] {
		return e.ChildUserTokens, nil
	}
	return nil, &NotLoadedError{edge: "child_user_tokens"}
}

// ParentUserTokenOrErr returns the ParentUserToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTokenEdges) ParentUserTokenOrErr() (*UserToken, error) {
	if e.ParentUserToken != nil {
		return e.ParentUserToken, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: usertoken.Label}
	}
	return nil, &NotLoadedError{edge: "parent_user_token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertoken.FieldIsRevoked:
			values[i] = new(sql.NullBool)
		case usertoken.FieldID, usertoken.FieldUserID, usertoken.FieldTokenType, usertoken.FieldTokenHash, usertoken.FieldJti, usertoken.FieldDeviceInfo, usertoken.FieldIPAddress, usertoken.FieldUserAgent, usertoken.FieldParentTokenID:
			values[i] = new(sql.NullString)
		case usertoken.FieldExpiresAt, usertoken.FieldCreatedAt, usertoken.FieldRevokedAt, usertoken.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserToken fields.
func (ut *UserToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ut.ID = value.String
			}
		case usertoken.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ut.UserID = value.String
			}
		case usertoken.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				ut.TokenType = usertoken.TokenType(value.String)
			}
		case usertoken.FieldTokenHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_hash", values[i])
			} else if value.Valid {
				ut.TokenHash = value.String
			}
		case usertoken.FieldJti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jti", values[i])
			} else if value.Valid {
				ut.Jti = value.String
			}
		case usertoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ut.ExpiresAt = value.Time
			}
		case usertoken.FieldIsRevoked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_revoked", values[i])
			} else if value.Valid {
				ut.IsRevoked = value.Bool
			}
		case usertoken.FieldDeviceInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_info", values[i])
			} else if value.Valid {
				ut.DeviceInfo = value.String
			}
		case usertoken.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				ut.IPAddress = value.String
			}
		case usertoken.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				ut.UserAgent = value.String
			}
		case usertoken.FieldParentTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_token_id", values[i])
			} else if value.Valid {
				ut.ParentTokenID = value.String
			}
		case usertoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ut.CreatedAt = value.Time
			}
		case usertoken.FieldRevokedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_at", values[i])
			} else if value.Valid {
				ut.RevokedAt = value.Time
			}
		case usertoken.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				ut.LastUsedAt = value.Time
			}
		default:
			ut.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserToken.
// This includes values selected through modifiers, order, etc.
func (ut *UserToken) Value(name string) (ent.Value, error) {
	return ut.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserToken entity.
func (ut *UserToken) QueryUser() *UserQuery {
	return NewUserTokenClient(ut.config).QueryUser(ut)
}

// QueryChildUserTokens queries the "child_user_tokens" edge of the UserToken entity.
func (ut *UserToken) QueryChildUserTokens() *UserTokenQuery {
	return NewUserTokenClient(ut.config).QueryChildUserTokens(ut)
}

// QueryParentUserToken queries the "parent_user_token" edge of the UserToken entity.
func (ut *UserToken) QueryParentUserToken() *UserTokenQuery {
	return NewUserTokenClient(ut.config).QueryParentUserToken(ut)
}

// Update returns a builder for updating this UserToken.
// Note that you need to call UserToken.Unwrap() before calling this method if this UserToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserToken) Update() *UserTokenUpdateOne {
	return NewUserTokenClient(ut.config).UpdateOne(ut)
}

// Unwrap unwraps the UserToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ut *UserToken) Unwrap() *UserToken {
	_tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserToken is not a transactional entity")
	}
	ut.config.driver = _tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserToken) String() string {
	var builder strings.Builder
	builder.WriteString("UserToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ut.ID))
	builder.WriteString("user_id=")
	builder.WriteString(ut.UserID)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(fmt.Sprintf("%v", ut.TokenType))
	builder.WriteString(", ")
	builder.WriteString("token_hash=")
	builder.WriteString(ut.TokenHash)
	builder.WriteString(", ")
	builder.WriteString("jti=")
	builder.WriteString(ut.Jti)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(ut.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_revoked=")
	builder.WriteString(fmt.Sprintf("%v", ut.IsRevoked))
	builder.WriteString(", ")
	builder.WriteString("device_info=")
	builder.WriteString(ut.DeviceInfo)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(ut.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(ut.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("parent_token_id=")
	builder.WriteString(ut.ParentTokenID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ut.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("revoked_at=")
	builder.WriteString(ut.RevokedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(ut.LastUsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserTokens is a parsable slice of UserToken.
type UserTokens []*UserToken
