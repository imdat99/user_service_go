// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentMethodCreate is the builder for creating a PaymentMethod entity.
type PaymentMethodCreate struct {
	config
	mutation *PaymentMethodMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pmc *PaymentMethodCreate) SetUserID(s string) *PaymentMethodCreate {
	pmc.mutation.SetUserID(s)
	return pmc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableUserID(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetUserID(*s)
	}
	return pmc
}

// SetMethodType sets the "method_type" field.
func (pmc *PaymentMethodCreate) SetMethodType(pt paymentmethod.MethodType) *PaymentMethodCreate {
	pmc.mutation.SetMethodType(pt)
	return pmc
}

// SetProvider sets the "provider" field.
func (pmc *PaymentMethodCreate) SetProvider(s string) *PaymentMethodCreate {
	pmc.mutation.SetProvider(s)
	return pmc
}

// SetMaskedNumber sets the "masked_number" field.
func (pmc *PaymentMethodCreate) SetMaskedNumber(s string) *PaymentMethodCreate {
	pmc.mutation.SetMaskedNumber(s)
	return pmc
}

// SetNillableMaskedNumber sets the "masked_number" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableMaskedNumber(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetMaskedNumber(*s)
	}
	return pmc
}

// SetHolderName sets the "holder_name" field.
func (pmc *PaymentMethodCreate) SetHolderName(s string) *PaymentMethodCreate {
	pmc.mutation.SetHolderName(s)
	return pmc
}

// SetNillableHolderName sets the "holder_name" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableHolderName(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetHolderName(*s)
	}
	return pmc
}

// SetExpiryMonth sets the "expiry_month" field.
func (pmc *PaymentMethodCreate) SetExpiryMonth(i int8) *PaymentMethodCreate {
	pmc.mutation.SetExpiryMonth(i)
	return pmc
}

// SetNillableExpiryMonth sets the "expiry_month" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableExpiryMonth(i *int8) *PaymentMethodCreate {
	if i != nil {
		pmc.SetExpiryMonth(*i)
	}
	return pmc
}

// SetExpiryYear sets the "expiry_year" field.
func (pmc *PaymentMethodCreate) SetExpiryYear(i int16) *PaymentMethodCreate {
	pmc.mutation.SetExpiryYear(i)
	return pmc
}

// SetNillableExpiryYear sets the "expiry_year" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableExpiryYear(i *int16) *PaymentMethodCreate {
	if i != nil {
		pmc.SetExpiryYear(*i)
	}
	return pmc
}

// SetIsDefault sets the "is_default" field.
func (pmc *PaymentMethodCreate) SetIsDefault(b bool) *PaymentMethodCreate {
	pmc.mutation.SetIsDefault(b)
	return pmc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableIsDefault(b *bool) *PaymentMethodCreate {
	if b != nil {
		pmc.SetIsDefault(*b)
	}
	return pmc
}

// SetIsActive sets the "is_active" field.
func (pmc *PaymentMethodCreate) SetIsActive(b bool) *PaymentMethodCreate {
	pmc.mutation.SetIsActive(b)
	return pmc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableIsActive(b *bool) *PaymentMethodCreate {
	if b != nil {
		pmc.SetIsActive(*b)
	}
	return pmc
}

// SetExternalID sets the "external_id" field.
func (pmc *PaymentMethodCreate) SetExternalID(s string) *PaymentMethodCreate {
	pmc.mutation.SetExternalID(s)
	return pmc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableExternalID(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetExternalID(*s)
	}
	return pmc
}

// SetMetadata sets the "metadata" field.
func (pmc *PaymentMethodCreate) SetMetadata(jm json.RawMessage) *PaymentMethodCreate {
	pmc.mutation.SetMetadata(jm)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PaymentMethodCreate) SetCreatedAt(t time.Time) *PaymentMethodCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableCreatedAt(t *time.Time) *PaymentMethodCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PaymentMethodCreate) SetUpdatedAt(t time.Time) *PaymentMethodCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableUpdatedAt(t *time.Time) *PaymentMethodCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *PaymentMethodCreate) SetDeletedAt(t time.Time) *PaymentMethodCreate {
	pmc.mutation.SetDeletedAt(t)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableDeletedAt(t *time.Time) *PaymentMethodCreate {
	if t != nil {
		pmc.SetDeletedAt(*t)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PaymentMethodCreate) SetID(s string) *PaymentMethodCreate {
	pmc.mutation.SetID(s)
	return pmc
}

// SetUser sets the "user" edge to the User entity.
func (pmc *PaymentMethodCreate) SetUser(u *User) *PaymentMethodCreate {
	return pmc.SetUserID(u.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pmc *PaymentMethodCreate) AddTransactionIDs(ids ...string) *PaymentMethodCreate {
	pmc.mutation.AddTransactionIDs(ids...)
	return pmc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pmc *PaymentMethodCreate) AddTransactions(t ...*Transaction) *PaymentMethodCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pmc.AddTransactionIDs(ids...)
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmc *PaymentMethodCreate) Mutation() *PaymentMethodMutation {
	return pmc.mutation
}

// Save creates the PaymentMethod in the database.
func (pmc *PaymentMethodCreate) Save(ctx context.Context) (*PaymentMethod, error) {
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PaymentMethodCreate) SaveX(ctx context.Context) *PaymentMethod {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PaymentMethodCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PaymentMethodCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PaymentMethodCreate) check() error {
	if _, ok := pmc.mutation.MethodType(); !ok {
		return &ValidationError{Name: "method_type", err: errors.New(`ent: missing required field "PaymentMethod.method_type"`)}
	}
	if v, ok := pmc.mutation.MethodType(); ok {
		if err := paymentmethod.MethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "method_type", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.method_type": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "PaymentMethod.provider"`)}
	}
	return nil
}

func (pmc *PaymentMethodCreate) sqlSave(ctx context.Context) (*PaymentMethod, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentMethod.ID type: %T", _spec.ID.Value)
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PaymentMethodCreate) createSpec() (*PaymentMethod, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentMethod{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(paymentmethod.Table, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString))
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.MethodType(); ok {
		_spec.SetField(paymentmethod.FieldMethodType, field.TypeEnum, value)
		_node.MethodType = value
	}
	if value, ok := pmc.mutation.Provider(); ok {
		_spec.SetField(paymentmethod.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := pmc.mutation.MaskedNumber(); ok {
		_spec.SetField(paymentmethod.FieldMaskedNumber, field.TypeString, value)
		_node.MaskedNumber = value
	}
	if value, ok := pmc.mutation.HolderName(); ok {
		_spec.SetField(paymentmethod.FieldHolderName, field.TypeString, value)
		_node.HolderName = value
	}
	if value, ok := pmc.mutation.ExpiryMonth(); ok {
		_spec.SetField(paymentmethod.FieldExpiryMonth, field.TypeInt8, value)
		_node.ExpiryMonth = value
	}
	if value, ok := pmc.mutation.ExpiryYear(); ok {
		_spec.SetField(paymentmethod.FieldExpiryYear, field.TypeInt16, value)
		_node.ExpiryYear = value
	}
	if value, ok := pmc.mutation.IsDefault(); ok {
		_spec.SetField(paymentmethod.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := pmc.mutation.IsActive(); ok {
		_spec.SetField(paymentmethod.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pmc.mutation.ExternalID(); ok {
		_spec.SetField(paymentmethod.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := pmc.mutation.Metadata(); ok {
		_spec.SetField(paymentmethod.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentmethod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentmethod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(paymentmethod.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := pmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.UserTable,
			Columns: []string{paymentmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentmethod.TransactionsTable,
			Columns: []string{paymentmethod.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentMethodCreateBulk is the builder for creating many PaymentMethod entities in bulk.
type PaymentMethodCreateBulk struct {
	config
	err      error
	builders []*PaymentMethodCreate
}

// Save creates the PaymentMethod entities in the database.
func (pmcb *PaymentMethodCreateBulk) Save(ctx context.Context) ([]*PaymentMethod, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PaymentMethod, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMethodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PaymentMethodCreateBulk) SaveX(ctx context.Context) []*PaymentMethod {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PaymentMethodCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PaymentMethodCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
