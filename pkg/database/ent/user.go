// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/notificationsetting"
	"app/pkg/database/ent/privacysetting"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
	"app/pkg/database/ent/userprofile"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth time.Time `json:"date_of_birth,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified bool `json:"email_verified,omitempty"`
	// PhoneVerified holds the value of the "phone_verified" field.
	PhoneVerified bool `json:"phone_verified,omitempty"`
	// AccountStatus holds the value of the "account_status" field.
	AccountStatus user.AccountStatus `json:"account_status,omitempty"`
	// LastLoginAt holds the value of the "last_login_at" field.
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// ActivityLogs holds the value of the activity_logs edge.
	ActivityLogs []*ActivityLog `json:"activity_logs,omitempty"`
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*ApiKey `json:"api_keys,omitempty"`
	// NotificationSetting holds the value of the notification_setting edge.
	NotificationSetting *NotificationSetting `json:"notification_setting,omitempty"`
	// PaymentMethods holds the value of the payment_methods edge.
	PaymentMethods []*PaymentMethod `json:"payment_methods,omitempty"`
	// PrivacySetting holds the value of the privacy_setting edge.
	PrivacySetting *PrivacySetting `json:"privacy_setting,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// User2fa holds the value of the user_2fa edge.
	User2fa *User2fa `json:"user_2fa,omitempty"`
	// UserProfile holds the value of the user_profile edge.
	UserProfile *UserProfile `json:"user_profile,omitempty"`
	// UserSessions holds the value of the user_sessions edge.
	UserSessions []*UserSession `json:"user_sessions,omitempty"`
	// UserTokens holds the value of the user_tokens edge.
	UserTokens []*UserToken `json:"user_tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// ActivityLogsOrErr returns the ActivityLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivityLogsOrErr() ([]*ActivityLog, error) {
	if e.loadedTypes[0] {
		return e.ActivityLogs, nil
	}
	return nil, &NotLoadedError{edge: "activity_logs"}
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) APIKeysOrErr() ([]*ApiKey, error) {
	if e.loadedTypes[1] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// NotificationSettingOrErr returns the NotificationSetting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) NotificationSettingOrErr() (*NotificationSetting, error) {
	if e.NotificationSetting != nil {
		return e.NotificationSetting, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: notificationsetting.Label}
	}
	return nil, &NotLoadedError{edge: "notification_setting"}
}

// PaymentMethodsOrErr returns the PaymentMethods value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PaymentMethodsOrErr() ([]*PaymentMethod, error) {
	if e.loadedTypes[3] {
		return e.PaymentMethods, nil
	}
	return nil, &NotLoadedError{edge: "payment_methods"}
}

// PrivacySettingOrErr returns the PrivacySetting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) PrivacySettingOrErr() (*PrivacySetting, error) {
	if e.PrivacySetting != nil {
		return e.PrivacySetting, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: privacysetting.Label}
	}
	return nil, &NotLoadedError{edge: "privacy_setting"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[5] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// User2faOrErr returns the User2fa value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) User2faOrErr() (*User2fa, error) {
	if e.User2fa != nil {
		return e.User2fa, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: user2fa.Label}
	}
	return nil, &NotLoadedError{edge: "user_2fa"}
}

// UserProfileOrErr returns the UserProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserProfileOrErr() (*UserProfile, error) {
	if e.UserProfile != nil {
		return e.UserProfile, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: userprofile.Label}
	}
	return nil, &NotLoadedError{edge: "user_profile"}
}

// UserSessionsOrErr returns the UserSessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserSessionsOrErr() ([]*UserSession, error) {
	if e.loadedTypes[8] {
		return e.UserSessions, nil
	}
	return nil, &NotLoadedError{edge: "user_sessions"}
}

// UserTokensOrErr returns the UserTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTokensOrErr() ([]*UserToken, error) {
	if e.loadedTypes[9] {
		return e.UserTokens, nil
	}
	return nil, &NotLoadedError{edge: "user_tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEmailVerified, user.FieldPhoneVerified:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldEmail, user.FieldUsername, user.FieldPasswordHash, user.FieldFirstName, user.FieldLastName, user.FieldPhone, user.FieldAvatarURL, user.FieldAccountStatus:
			values[i] = new(sql.NullString)
		case user.FieldDateOfBirth, user.FieldLastLoginAt, user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				u.DateOfBirth = value.Time
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = value.String
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				u.EmailVerified = value.Bool
			}
		case user.FieldPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field phone_verified", values[i])
			} else if value.Valid {
				u.PhoneVerified = value.Bool
			}
		case user.FieldAccountStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_status", values[i])
			} else if value.Valid {
				u.AccountStatus = user.AccountStatus(value.String)
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				u.LastLoginAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryActivityLogs queries the "activity_logs" edge of the User entity.
func (u *User) QueryActivityLogs() *ActivityLogQuery {
	return NewUserClient(u.config).QueryActivityLogs(u)
}

// QueryAPIKeys queries the "api_keys" edge of the User entity.
func (u *User) QueryAPIKeys() *ApiKeyQuery {
	return NewUserClient(u.config).QueryAPIKeys(u)
}

// QueryNotificationSetting queries the "notification_setting" edge of the User entity.
func (u *User) QueryNotificationSetting() *NotificationSettingQuery {
	return NewUserClient(u.config).QueryNotificationSetting(u)
}

// QueryPaymentMethods queries the "payment_methods" edge of the User entity.
func (u *User) QueryPaymentMethods() *PaymentMethodQuery {
	return NewUserClient(u.config).QueryPaymentMethods(u)
}

// QueryPrivacySetting queries the "privacy_setting" edge of the User entity.
func (u *User) QueryPrivacySetting() *PrivacySettingQuery {
	return NewUserClient(u.config).QueryPrivacySetting(u)
}

// QueryTransactions queries the "transactions" edge of the User entity.
func (u *User) QueryTransactions() *TransactionQuery {
	return NewUserClient(u.config).QueryTransactions(u)
}

// QueryUser2fa queries the "user_2fa" edge of the User entity.
func (u *User) QueryUser2fa() *User2faQuery {
	return NewUserClient(u.config).QueryUser2fa(u)
}

// QueryUserProfile queries the "user_profile" edge of the User entity.
func (u *User) QueryUserProfile() *UserProfileQuery {
	return NewUserClient(u.config).QueryUserProfile(u)
}

// QueryUserSessions queries the "user_sessions" edge of the User entity.
func (u *User) QueryUserSessions() *UserSessionQuery {
	return NewUserClient(u.config).QueryUserSessions(u)
}

// QueryUserTokens queries the "user_tokens" edge of the User entity.
func (u *User) QueryUserTokens() *UserTokenQuery {
	return NewUserClient(u.config).QueryUserTokens(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(u.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("date_of_birth=")
	builder.WriteString(u.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.PhoneVerified))
	builder.WriteString(", ")
	builder.WriteString("account_status=")
	builder.WriteString(fmt.Sprintf("%v", u.AccountStatus))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(u.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
