// Code generated by ent, DO NOT EDIT.

package usertoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/imdat99/user_service_go/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUserID, v))
}

// TokenHash applies equality check predicate on the "token_hash" field. It's identical to TokenHashEQ.
func TokenHash(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldTokenHash, v))
}

// Jti applies equality check predicate on the "jti" field. It's identical to JtiEQ.
func Jti(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldJti, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldExpiresAt, v))
}

// IsRevoked applies equality check predicate on the "is_revoked" field. It's identical to IsRevokedEQ.
func IsRevoked(v bool) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldIsRevoked, v))
}

// DeviceInfo applies equality check predicate on the "device_info" field. It's identical to DeviceInfoEQ.
func DeviceInfo(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldDeviceInfo, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUserAgent, v))
}

// ParentTokenID applies equality check predicate on the "parent_token_id" field. It's identical to ParentTokenIDEQ.
func ParentTokenID(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldParentTokenID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldCreatedAt, v))
}

// RevokedAt applies equality check predicate on the "revoked_at" field. It's identical to RevokedAtEQ.
func RevokedAt(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldRevokedAt, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldUserID, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v TokenType) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v TokenType) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...TokenType) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...TokenType) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenHashEQ applies the EQ predicate on the "token_hash" field.
func TokenHashEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldTokenHash, v))
}

// TokenHashNEQ applies the NEQ predicate on the "token_hash" field.
func TokenHashNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldTokenHash, v))
}

// TokenHashIn applies the In predicate on the "token_hash" field.
func TokenHashIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldTokenHash, vs...))
}

// TokenHashNotIn applies the NotIn predicate on the "token_hash" field.
func TokenHashNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldTokenHash, vs...))
}

// TokenHashGT applies the GT predicate on the "token_hash" field.
func TokenHashGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldTokenHash, v))
}

// TokenHashGTE applies the GTE predicate on the "token_hash" field.
func TokenHashGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldTokenHash, v))
}

// TokenHashLT applies the LT predicate on the "token_hash" field.
func TokenHashLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldTokenHash, v))
}

// TokenHashLTE applies the LTE predicate on the "token_hash" field.
func TokenHashLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldTokenHash, v))
}

// TokenHashContains applies the Contains predicate on the "token_hash" field.
func TokenHashContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldTokenHash, v))
}

// TokenHashHasPrefix applies the HasPrefix predicate on the "token_hash" field.
func TokenHashHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldTokenHash, v))
}

// TokenHashHasSuffix applies the HasSuffix predicate on the "token_hash" field.
func TokenHashHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldTokenHash, v))
}

// TokenHashEqualFold applies the EqualFold predicate on the "token_hash" field.
func TokenHashEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldTokenHash, v))
}

// TokenHashContainsFold applies the ContainsFold predicate on the "token_hash" field.
func TokenHashContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldTokenHash, v))
}

// JtiEQ applies the EQ predicate on the "jti" field.
func JtiEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldJti, v))
}

// JtiNEQ applies the NEQ predicate on the "jti" field.
func JtiNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldJti, v))
}

// JtiIn applies the In predicate on the "jti" field.
func JtiIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldJti, vs...))
}

// JtiNotIn applies the NotIn predicate on the "jti" field.
func JtiNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldJti, vs...))
}

// JtiGT applies the GT predicate on the "jti" field.
func JtiGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldJti, v))
}

// JtiGTE applies the GTE predicate on the "jti" field.
func JtiGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldJti, v))
}

// JtiLT applies the LT predicate on the "jti" field.
func JtiLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldJti, v))
}

// JtiLTE applies the LTE predicate on the "jti" field.
func JtiLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldJti, v))
}

// JtiContains applies the Contains predicate on the "jti" field.
func JtiContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldJti, v))
}

// JtiHasPrefix applies the HasPrefix predicate on the "jti" field.
func JtiHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldJti, v))
}

// JtiHasSuffix applies the HasSuffix predicate on the "jti" field.
func JtiHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldJti, v))
}

// JtiEqualFold applies the EqualFold predicate on the "jti" field.
func JtiEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldJti, v))
}

// JtiContainsFold applies the ContainsFold predicate on the "jti" field.
func JtiContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldJti, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldExpiresAt, v))
}

// IsRevokedEQ applies the EQ predicate on the "is_revoked" field.
func IsRevokedEQ(v bool) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldIsRevoked, v))
}

// IsRevokedNEQ applies the NEQ predicate on the "is_revoked" field.
func IsRevokedNEQ(v bool) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldIsRevoked, v))
}

// IsRevokedIsNil applies the IsNil predicate on the "is_revoked" field.
func IsRevokedIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldIsRevoked))
}

// IsRevokedNotNil applies the NotNil predicate on the "is_revoked" field.
func IsRevokedNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldIsRevoked))
}

// DeviceInfoEQ applies the EQ predicate on the "device_info" field.
func DeviceInfoEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldDeviceInfo, v))
}

// DeviceInfoNEQ applies the NEQ predicate on the "device_info" field.
func DeviceInfoNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldDeviceInfo, v))
}

// DeviceInfoIn applies the In predicate on the "device_info" field.
func DeviceInfoIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldDeviceInfo, vs...))
}

// DeviceInfoNotIn applies the NotIn predicate on the "device_info" field.
func DeviceInfoNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldDeviceInfo, vs...))
}

// DeviceInfoGT applies the GT predicate on the "device_info" field.
func DeviceInfoGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldDeviceInfo, v))
}

// DeviceInfoGTE applies the GTE predicate on the "device_info" field.
func DeviceInfoGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldDeviceInfo, v))
}

// DeviceInfoLT applies the LT predicate on the "device_info" field.
func DeviceInfoLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldDeviceInfo, v))
}

// DeviceInfoLTE applies the LTE predicate on the "device_info" field.
func DeviceInfoLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldDeviceInfo, v))
}

// DeviceInfoContains applies the Contains predicate on the "device_info" field.
func DeviceInfoContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldDeviceInfo, v))
}

// DeviceInfoHasPrefix applies the HasPrefix predicate on the "device_info" field.
func DeviceInfoHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldDeviceInfo, v))
}

// DeviceInfoHasSuffix applies the HasSuffix predicate on the "device_info" field.
func DeviceInfoHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldDeviceInfo, v))
}

// DeviceInfoIsNil applies the IsNil predicate on the "device_info" field.
func DeviceInfoIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldDeviceInfo))
}

// DeviceInfoNotNil applies the NotNil predicate on the "device_info" field.
func DeviceInfoNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldDeviceInfo))
}

// DeviceInfoEqualFold applies the EqualFold predicate on the "device_info" field.
func DeviceInfoEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldDeviceInfo, v))
}

// DeviceInfoContainsFold applies the ContainsFold predicate on the "device_info" field.
func DeviceInfoContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldDeviceInfo, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldUserAgent, v))
}

// ParentTokenIDEQ applies the EQ predicate on the "parent_token_id" field.
func ParentTokenIDEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldParentTokenID, v))
}

// ParentTokenIDNEQ applies the NEQ predicate on the "parent_token_id" field.
func ParentTokenIDNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldParentTokenID, v))
}

// ParentTokenIDIn applies the In predicate on the "parent_token_id" field.
func ParentTokenIDIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldParentTokenID, vs...))
}

// ParentTokenIDNotIn applies the NotIn predicate on the "parent_token_id" field.
func ParentTokenIDNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldParentTokenID, vs...))
}

// ParentTokenIDGT applies the GT predicate on the "parent_token_id" field.
func ParentTokenIDGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldParentTokenID, v))
}

// ParentTokenIDGTE applies the GTE predicate on the "parent_token_id" field.
func ParentTokenIDGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldParentTokenID, v))
}

// ParentTokenIDLT applies the LT predicate on the "parent_token_id" field.
func ParentTokenIDLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldParentTokenID, v))
}

// ParentTokenIDLTE applies the LTE predicate on the "parent_token_id" field.
func ParentTokenIDLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldParentTokenID, v))
}

// ParentTokenIDContains applies the Contains predicate on the "parent_token_id" field.
func ParentTokenIDContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldParentTokenID, v))
}

// ParentTokenIDHasPrefix applies the HasPrefix predicate on the "parent_token_id" field.
func ParentTokenIDHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldParentTokenID, v))
}

// ParentTokenIDHasSuffix applies the HasSuffix predicate on the "parent_token_id" field.
func ParentTokenIDHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldParentTokenID, v))
}

// ParentTokenIDIsNil applies the IsNil predicate on the "parent_token_id" field.
func ParentTokenIDIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldParentTokenID))
}

// ParentTokenIDNotNil applies the NotNil predicate on the "parent_token_id" field.
func ParentTokenIDNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldParentTokenID))
}

// ParentTokenIDEqualFold applies the EqualFold predicate on the "parent_token_id" field.
func ParentTokenIDEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldParentTokenID, v))
}

// ParentTokenIDContainsFold applies the ContainsFold predicate on the "parent_token_id" field.
func ParentTokenIDContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldParentTokenID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldCreatedAt))
}

// RevokedAtEQ applies the EQ predicate on the "revoked_at" field.
func RevokedAtEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldRevokedAt, v))
}

// RevokedAtNEQ applies the NEQ predicate on the "revoked_at" field.
func RevokedAtNEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldRevokedAt, v))
}

// RevokedAtIn applies the In predicate on the "revoked_at" field.
func RevokedAtIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldRevokedAt, vs...))
}

// RevokedAtNotIn applies the NotIn predicate on the "revoked_at" field.
func RevokedAtNotIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldRevokedAt, vs...))
}

// RevokedAtGT applies the GT predicate on the "revoked_at" field.
func RevokedAtGT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldRevokedAt, v))
}

// RevokedAtGTE applies the GTE predicate on the "revoked_at" field.
func RevokedAtGTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldRevokedAt, v))
}

// RevokedAtLT applies the LT predicate on the "revoked_at" field.
func RevokedAtLT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldRevokedAt, v))
}

// RevokedAtLTE applies the LTE predicate on the "revoked_at" field.
func RevokedAtLTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldRevokedAt, v))
}

// RevokedAtIsNil applies the IsNil predicate on the "revoked_at" field.
func RevokedAtIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldRevokedAt))
}

// RevokedAtNotNil applies the NotNil predicate on the "revoked_at" field.
func RevokedAtNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldRevokedAt))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.UserToken {
	return predicate.UserToken(sql.FieldNotNull(FieldLastUsedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildUserTokens applies the HasEdge predicate on the "child_user_tokens" edge.
func HasChildUserTokens() predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildUserTokensTable, ChildUserTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildUserTokensWith applies the HasEdge predicate on the "child_user_tokens" edge with a given conditions (other predicates).
func HasChildUserTokensWith(preds ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := newChildUserTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentUserToken applies the HasEdge predicate on the "parent_user_token" edge.
func HasParentUserToken() predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentUserTokenTable, ParentUserTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentUserTokenWith applies the HasEdge predicate on the "parent_user_token" edge with a given conditions (other predicates).
func HasParentUserTokenWith(preds ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		step := newParentUserTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(sql.NotPredicates(p))
}
