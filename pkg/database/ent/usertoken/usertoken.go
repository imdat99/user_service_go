// Code generated by ent, DO NOT EDIT.

package usertoken

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usertoken type in the database.
	Label = "user_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTokenType holds the string denoting the token_type field in the database.
	FieldTokenType = "token_type"
	// FieldTokenHash holds the string denoting the token_hash field in the database.
	FieldTokenHash = "token_hash"
	// FieldJti holds the string denoting the jti field in the database.
	FieldJti = "jti"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldIsRevoked holds the string denoting the is_revoked field in the database.
	FieldIsRevoked = "is_revoked"
	// FieldDeviceInfo holds the string denoting the device_info field in the database.
	FieldDeviceInfo = "device_info"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldParentTokenID holds the string denoting the parent_token_id field in the database.
	FieldParentTokenID = "parent_token_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldRevokedAt holds the string denoting the revoked_at field in the database.
	FieldRevokedAt = "revoked_at"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeChildUserTokens holds the string denoting the child_user_tokens edge name in mutations.
	EdgeChildUserTokens = "child_user_tokens"
	// EdgeParentUserToken holds the string denoting the parent_user_token edge name in mutations.
	EdgeParentUserToken = "parent_user_token"
	// Table holds the table name of the usertoken in the database.
	Table = "user_tokens"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_tokens"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ChildUserTokensTable is the table that holds the child_user_tokens relation/edge.
	ChildUserTokensTable = "user_tokens"
	// ChildUserTokensColumn is the table column denoting the child_user_tokens relation/edge.
	ChildUserTokensColumn = "parent_token_id"
	// ParentUserTokenTable is the table that holds the parent_user_token relation/edge.
	ParentUserTokenTable = "user_tokens"
	// ParentUserTokenColumn is the table column denoting the parent_user_token relation/edge.
	ParentUserTokenColumn = "parent_token_id"
)

// Columns holds all SQL columns for usertoken fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTokenType,
	FieldTokenHash,
	FieldJti,
	FieldExpiresAt,
	FieldIsRevoked,
	FieldDeviceInfo,
	FieldIPAddress,
	FieldUserAgent,
	FieldParentTokenID,
	FieldCreatedAt,
	FieldRevokedAt,
	FieldLastUsedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// TokenType defines the type for the "token_type" enum field.
type TokenType string

// TokenType values.
const (
	TokenTypeAccessToken  TokenType = "access_token"
	TokenTypeRefreshToken TokenType = "refresh_token"
)

func (tt TokenType) String() string {
	return string(tt)
}

// TokenTypeValidator is a validator for the "token_type" field enum values. It is called by the builders before save.
func TokenTypeValidator(tt TokenType) error {
	switch tt {
	case TokenTypeAccessToken, TokenTypeRefreshToken:
		return nil
	default:
		return fmt.Errorf("usertoken: invalid enum value for token_type field: %q", tt)
	}
}

// OrderOption defines the ordering options for the UserToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTokenType orders the results by the token_type field.
func ByTokenType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenType, opts...).ToFunc()
}

// ByTokenHash orders the results by the token_hash field.
func ByTokenHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenHash, opts...).ToFunc()
}

// ByJti orders the results by the jti field.
func ByJti(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJti, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByIsRevoked orders the results by the is_revoked field.
func ByIsRevoked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRevoked, opts...).ToFunc()
}

// ByDeviceInfo orders the results by the device_info field.
func ByDeviceInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceInfo, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByParentTokenID orders the results by the parent_token_id field.
func ByParentTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentTokenID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRevokedAt orders the results by the revoked_at field.
func ByRevokedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevokedAt, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildUserTokensCount orders the results by child_user_tokens count.
func ByChildUserTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildUserTokensStep(), opts...)
	}
}

// ByChildUserTokens orders the results by child_user_tokens terms.
func ByChildUserTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildUserTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentUserTokenField orders the results by parent_user_token field.
func ByParentUserTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentUserTokenStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newChildUserTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildUserTokensTable, ChildUserTokensColumn),
	)
}
func newParentUserTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentUserTokenTable, ParentUserTokenColumn),
	)
}
