// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
)

// User2fa is the model entity for the User2fa schema.
type User2fa struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// IsEnabled holds the value of the "is_enabled" field.
	IsEnabled bool `json:"is_enabled,omitempty"`
	// SecretKey holds the value of the "secret_key" field.
	SecretKey string `json:"secret_key,omitempty"`
	// BackupCodes holds the value of the "backup_codes" field.
	BackupCodes json.RawMessage `json:"backup_codes,omitempty"`
	// Method holds the value of the "method" field.
	Method user2fa.Method `json:"method,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// EmailAddress holds the value of the "email_address" field.
	EmailAddress string `json:"email_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the User2faQuery when eager-loading is set.
	Edges        User2faEdges `json:"edges"`
	selectValues sql.SelectValues
}

// User2faEdges holds the relations/edges for other nodes in the graph.
type User2faEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e User2faEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User2fa) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user2fa.FieldBackupCodes:
			values[i] = new([]byte)
		case user2fa.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case user2fa.FieldID, user2fa.FieldUserID, user2fa.FieldSecretKey, user2fa.FieldMethod, user2fa.FieldPhoneNumber, user2fa.FieldEmailAddress:
			values[i] = new(sql.NullString)
		case user2fa.FieldCreatedAt, user2fa.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User2fa fields.
func (u *User2fa) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user2fa.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user2fa.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				u.UserID = value.String
			}
		case user2fa.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				u.IsEnabled = value.Bool
			}
		case user2fa.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				u.SecretKey = value.String
			}
		case user2fa.FieldBackupCodes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field backup_codes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.BackupCodes); err != nil {
					return fmt.Errorf("unmarshal field backup_codes: %w", err)
				}
			}
		case user2fa.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				u.Method = user2fa.Method(value.String)
			}
		case user2fa.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user2fa.FieldEmailAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_address", values[i])
			} else if value.Valid {
				u.EmailAddress = value.String
			}
		case user2fa.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user2fa.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User2fa.
// This includes values selected through modifiers, order, etc.
func (u *User2fa) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the User2fa entity.
func (u *User2fa) QueryUser() *UserQuery {
	return NewUser2faClient(u.config).QueryUser(u)
}

// Update returns a builder for updating this User2fa.
// Note that you need to call User2fa.Unwrap() before calling this method if this User2fa
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User2fa) Update() *User2faUpdateOne {
	return NewUser2faClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User2fa entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User2fa) Unwrap() *User2fa {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User2fa is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User2fa) String() string {
	var builder strings.Builder
	builder.WriteString("User2fa(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("user_id=")
	builder.WriteString(u.UserID)
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.IsEnabled))
	builder.WriteString(", ")
	builder.WriteString("secret_key=")
	builder.WriteString(u.SecretKey)
	builder.WriteString(", ")
	builder.WriteString("backup_codes=")
	builder.WriteString(fmt.Sprintf("%v", u.BackupCodes))
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(fmt.Sprintf("%v", u.Method))
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("email_address=")
	builder.WriteString(u.EmailAddress)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// User2fas is a parsable slice of User2fa.
type User2fas []*User2fa
