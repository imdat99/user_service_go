// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/apikey"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/user"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ApiKeyUpdate is the builder for updating ApiKey entities.
type ApiKeyUpdate struct {
	config
	hooks    []Hook
	mutation *ApiKeyMutation
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (aku *ApiKeyUpdate) Where(ps ...predicate.ApiKey) *ApiKeyUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetUserID sets the "user_id" field.
func (aku *ApiKeyUpdate) SetUserID(s string) *ApiKeyUpdate {
	aku.mutation.SetUserID(s)
	return aku
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableUserID(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetUserID(*s)
	}
	return aku
}

// ClearUserID clears the value of the "user_id" field.
func (aku *ApiKeyUpdate) ClearUserID() *ApiKeyUpdate {
	aku.mutation.ClearUserID()
	return aku
}

// SetKeyName sets the "key_name" field.
func (aku *ApiKeyUpdate) SetKeyName(s string) *ApiKeyUpdate {
	aku.mutation.SetKeyName(s)
	return aku
}

// SetNillableKeyName sets the "key_name" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableKeyName(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetKeyName(*s)
	}
	return aku
}

// SetAPIKeyHash sets the "api_key_hash" field.
func (aku *ApiKeyUpdate) SetAPIKeyHash(s string) *ApiKeyUpdate {
	aku.mutation.SetAPIKeyHash(s)
	return aku
}

// SetNillableAPIKeyHash sets the "api_key_hash" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableAPIKeyHash(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetAPIKeyHash(*s)
	}
	return aku
}

// SetAPIKeyPrefix sets the "api_key_prefix" field.
func (aku *ApiKeyUpdate) SetAPIKeyPrefix(s string) *ApiKeyUpdate {
	aku.mutation.SetAPIKeyPrefix(s)
	return aku
}

// SetNillableAPIKeyPrefix sets the "api_key_prefix" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableAPIKeyPrefix(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetAPIKeyPrefix(*s)
	}
	return aku
}

// SetPermissions sets the "permissions" field.
func (aku *ApiKeyUpdate) SetPermissions(jm json.RawMessage) *ApiKeyUpdate {
	aku.mutation.SetPermissions(jm)
	return aku
}

// AppendPermissions appends jm to the "permissions" field.
func (aku *ApiKeyUpdate) AppendPermissions(jm json.RawMessage) *ApiKeyUpdate {
	aku.mutation.AppendPermissions(jm)
	return aku
}

// ClearPermissions clears the value of the "permissions" field.
func (aku *ApiKeyUpdate) ClearPermissions() *ApiKeyUpdate {
	aku.mutation.ClearPermissions()
	return aku
}

// SetRateLimitPerMinute sets the "rate_limit_per_minute" field.
func (aku *ApiKeyUpdate) SetRateLimitPerMinute(i int32) *ApiKeyUpdate {
	aku.mutation.ResetRateLimitPerMinute()
	aku.mutation.SetRateLimitPerMinute(i)
	return aku
}

// SetNillableRateLimitPerMinute sets the "rate_limit_per_minute" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableRateLimitPerMinute(i *int32) *ApiKeyUpdate {
	if i != nil {
		aku.SetRateLimitPerMinute(*i)
	}
	return aku
}

// AddRateLimitPerMinute adds i to the "rate_limit_per_minute" field.
func (aku *ApiKeyUpdate) AddRateLimitPerMinute(i int32) *ApiKeyUpdate {
	aku.mutation.AddRateLimitPerMinute(i)
	return aku
}

// ClearRateLimitPerMinute clears the value of the "rate_limit_per_minute" field.
func (aku *ApiKeyUpdate) ClearRateLimitPerMinute() *ApiKeyUpdate {
	aku.mutation.ClearRateLimitPerMinute()
	return aku
}

// SetIsActive sets the "is_active" field.
func (aku *ApiKeyUpdate) SetIsActive(b bool) *ApiKeyUpdate {
	aku.mutation.SetIsActive(b)
	return aku
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableIsActive(b *bool) *ApiKeyUpdate {
	if b != nil {
		aku.SetIsActive(*b)
	}
	return aku
}

// ClearIsActive clears the value of the "is_active" field.
func (aku *ApiKeyUpdate) ClearIsActive() *ApiKeyUpdate {
	aku.mutation.ClearIsActive()
	return aku
}

// SetLastUsedAt sets the "last_used_at" field.
func (aku *ApiKeyUpdate) SetLastUsedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetLastUsedAt(t)
	return aku
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableLastUsedAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetLastUsedAt(*t)
	}
	return aku
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (aku *ApiKeyUpdate) ClearLastUsedAt() *ApiKeyUpdate {
	aku.mutation.ClearLastUsedAt()
	return aku
}

// SetExpiresAt sets the "expires_at" field.
func (aku *ApiKeyUpdate) SetExpiresAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetExpiresAt(t)
	return aku
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableExpiresAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetExpiresAt(*t)
	}
	return aku
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (aku *ApiKeyUpdate) ClearExpiresAt() *ApiKeyUpdate {
	aku.mutation.ClearExpiresAt()
	return aku
}

// SetCreatedAt sets the "created_at" field.
func (aku *ApiKeyUpdate) SetCreatedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetCreatedAt(t)
	return aku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableCreatedAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetCreatedAt(*t)
	}
	return aku
}

// ClearCreatedAt clears the value of the "created_at" field.
func (aku *ApiKeyUpdate) ClearCreatedAt() *ApiKeyUpdate {
	aku.mutation.ClearCreatedAt()
	return aku
}

// SetUpdatedAt sets the "updated_at" field.
func (aku *ApiKeyUpdate) SetUpdatedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetUpdatedAt(t)
	return aku
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableUpdatedAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetUpdatedAt(*t)
	}
	return aku
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aku *ApiKeyUpdate) ClearUpdatedAt() *ApiKeyUpdate {
	aku.mutation.ClearUpdatedAt()
	return aku
}

// SetDeletedAt sets the "deleted_at" field.
func (aku *ApiKeyUpdate) SetDeletedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetDeletedAt(t)
	return aku
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableDeletedAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetDeletedAt(*t)
	}
	return aku
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aku *ApiKeyUpdate) ClearDeletedAt() *ApiKeyUpdate {
	aku.mutation.ClearDeletedAt()
	return aku
}

// SetUser sets the "user" edge to the User entity.
func (aku *ApiKeyUpdate) SetUser(u *User) *ApiKeyUpdate {
	return aku.SetUserID(u.ID)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (aku *ApiKeyUpdate) Mutation() *ApiKeyMutation {
	return aku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aku *ApiKeyUpdate) ClearUser() *ApiKeyUpdate {
	aku.mutation.ClearUser()
	return aku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *ApiKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aku.sqlSave, aku.mutation, aku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *ApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *ApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *ApiKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aku *ApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.KeyName(); ok {
		_spec.SetField(apikey.FieldKeyName, field.TypeString, value)
	}
	if value, ok := aku.mutation.APIKeyHash(); ok {
		_spec.SetField(apikey.FieldAPIKeyHash, field.TypeString, value)
	}
	if value, ok := aku.mutation.APIKeyPrefix(); ok {
		_spec.SetField(apikey.FieldAPIKeyPrefix, field.TypeString, value)
	}
	if value, ok := aku.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := aku.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldPermissions, value)
		})
	}
	if aku.mutation.PermissionsCleared() {
		_spec.ClearField(apikey.FieldPermissions, field.TypeJSON)
	}
	if value, ok := aku.mutation.RateLimitPerMinute(); ok {
		_spec.SetField(apikey.FieldRateLimitPerMinute, field.TypeInt32, value)
	}
	if value, ok := aku.mutation.AddedRateLimitPerMinute(); ok {
		_spec.AddField(apikey.FieldRateLimitPerMinute, field.TypeInt32, value)
	}
	if aku.mutation.RateLimitPerMinuteCleared() {
		_spec.ClearField(apikey.FieldRateLimitPerMinute, field.TypeInt32)
	}
	if value, ok := aku.mutation.IsActive(); ok {
		_spec.SetField(apikey.FieldIsActive, field.TypeBool, value)
	}
	if aku.mutation.IsActiveCleared() {
		_spec.ClearField(apikey.FieldIsActive, field.TypeBool)
	}
	if value, ok := aku.mutation.LastUsedAt(); ok {
		_spec.SetField(apikey.FieldLastUsedAt, field.TypeTime, value)
	}
	if aku.mutation.LastUsedAtCleared() {
		_spec.ClearField(apikey.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := aku.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
	}
	if aku.mutation.ExpiresAtCleared() {
		_spec.ClearField(apikey.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := aku.mutation.CreatedAt(); ok {
		_spec.SetField(apikey.FieldCreatedAt, field.TypeTime, value)
	}
	if aku.mutation.CreatedAtCleared() {
		_spec.ClearField(apikey.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aku.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if aku.mutation.UpdatedAtCleared() {
		_spec.ClearField(apikey.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aku.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
	}
	if aku.mutation.DeletedAtCleared() {
		_spec.ClearField(apikey.FieldDeletedAt, field.TypeTime)
	}
	if aku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aku.mutation.done = true
	return n, nil
}

// ApiKeyUpdateOne is the builder for updating a single ApiKey entity.
type ApiKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApiKeyMutation
}

// SetUserID sets the "user_id" field.
func (akuo *ApiKeyUpdateOne) SetUserID(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetUserID(s)
	return akuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableUserID(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetUserID(*s)
	}
	return akuo
}

// ClearUserID clears the value of the "user_id" field.
func (akuo *ApiKeyUpdateOne) ClearUserID() *ApiKeyUpdateOne {
	akuo.mutation.ClearUserID()
	return akuo
}

// SetKeyName sets the "key_name" field.
func (akuo *ApiKeyUpdateOne) SetKeyName(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetKeyName(s)
	return akuo
}

// SetNillableKeyName sets the "key_name" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableKeyName(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetKeyName(*s)
	}
	return akuo
}

// SetAPIKeyHash sets the "api_key_hash" field.
func (akuo *ApiKeyUpdateOne) SetAPIKeyHash(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetAPIKeyHash(s)
	return akuo
}

// SetNillableAPIKeyHash sets the "api_key_hash" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableAPIKeyHash(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetAPIKeyHash(*s)
	}
	return akuo
}

// SetAPIKeyPrefix sets the "api_key_prefix" field.
func (akuo *ApiKeyUpdateOne) SetAPIKeyPrefix(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetAPIKeyPrefix(s)
	return akuo
}

// SetNillableAPIKeyPrefix sets the "api_key_prefix" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableAPIKeyPrefix(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetAPIKeyPrefix(*s)
	}
	return akuo
}

// SetPermissions sets the "permissions" field.
func (akuo *ApiKeyUpdateOne) SetPermissions(jm json.RawMessage) *ApiKeyUpdateOne {
	akuo.mutation.SetPermissions(jm)
	return akuo
}

// AppendPermissions appends jm to the "permissions" field.
func (akuo *ApiKeyUpdateOne) AppendPermissions(jm json.RawMessage) *ApiKeyUpdateOne {
	akuo.mutation.AppendPermissions(jm)
	return akuo
}

// ClearPermissions clears the value of the "permissions" field.
func (akuo *ApiKeyUpdateOne) ClearPermissions() *ApiKeyUpdateOne {
	akuo.mutation.ClearPermissions()
	return akuo
}

// SetRateLimitPerMinute sets the "rate_limit_per_minute" field.
func (akuo *ApiKeyUpdateOne) SetRateLimitPerMinute(i int32) *ApiKeyUpdateOne {
	akuo.mutation.ResetRateLimitPerMinute()
	akuo.mutation.SetRateLimitPerMinute(i)
	return akuo
}

// SetNillableRateLimitPerMinute sets the "rate_limit_per_minute" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableRateLimitPerMinute(i *int32) *ApiKeyUpdateOne {
	if i != nil {
		akuo.SetRateLimitPerMinute(*i)
	}
	return akuo
}

// AddRateLimitPerMinute adds i to the "rate_limit_per_minute" field.
func (akuo *ApiKeyUpdateOne) AddRateLimitPerMinute(i int32) *ApiKeyUpdateOne {
	akuo.mutation.AddRateLimitPerMinute(i)
	return akuo
}

// ClearRateLimitPerMinute clears the value of the "rate_limit_per_minute" field.
func (akuo *ApiKeyUpdateOne) ClearRateLimitPerMinute() *ApiKeyUpdateOne {
	akuo.mutation.ClearRateLimitPerMinute()
	return akuo
}

// SetIsActive sets the "is_active" field.
func (akuo *ApiKeyUpdateOne) SetIsActive(b bool) *ApiKeyUpdateOne {
	akuo.mutation.SetIsActive(b)
	return akuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableIsActive(b *bool) *ApiKeyUpdateOne {
	if b != nil {
		akuo.SetIsActive(*b)
	}
	return akuo
}

// ClearIsActive clears the value of the "is_active" field.
func (akuo *ApiKeyUpdateOne) ClearIsActive() *ApiKeyUpdateOne {
	akuo.mutation.ClearIsActive()
	return akuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (akuo *ApiKeyUpdateOne) SetLastUsedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetLastUsedAt(t)
	return akuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableLastUsedAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetLastUsedAt(*t)
	}
	return akuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (akuo *ApiKeyUpdateOne) ClearLastUsedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearLastUsedAt()
	return akuo
}

// SetExpiresAt sets the "expires_at" field.
func (akuo *ApiKeyUpdateOne) SetExpiresAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetExpiresAt(t)
	return akuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableExpiresAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetExpiresAt(*t)
	}
	return akuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (akuo *ApiKeyUpdateOne) ClearExpiresAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearExpiresAt()
	return akuo
}

// SetCreatedAt sets the "created_at" field.
func (akuo *ApiKeyUpdateOne) SetCreatedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetCreatedAt(t)
	return akuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableCreatedAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetCreatedAt(*t)
	}
	return akuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (akuo *ApiKeyUpdateOne) ClearCreatedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearCreatedAt()
	return akuo
}

// SetUpdatedAt sets the "updated_at" field.
func (akuo *ApiKeyUpdateOne) SetUpdatedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetUpdatedAt(t)
	return akuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableUpdatedAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetUpdatedAt(*t)
	}
	return akuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (akuo *ApiKeyUpdateOne) ClearUpdatedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearUpdatedAt()
	return akuo
}

// SetDeletedAt sets the "deleted_at" field.
func (akuo *ApiKeyUpdateOne) SetDeletedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetDeletedAt(t)
	return akuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableDeletedAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetDeletedAt(*t)
	}
	return akuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (akuo *ApiKeyUpdateOne) ClearDeletedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearDeletedAt()
	return akuo
}

// SetUser sets the "user" edge to the User entity.
func (akuo *ApiKeyUpdateOne) SetUser(u *User) *ApiKeyUpdateOne {
	return akuo.SetUserID(u.ID)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (akuo *ApiKeyUpdateOne) Mutation() *ApiKeyMutation {
	return akuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (akuo *ApiKeyUpdateOne) ClearUser() *ApiKeyUpdateOne {
	akuo.mutation.ClearUser()
	return akuo
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (akuo *ApiKeyUpdateOne) Where(ps ...predicate.ApiKey) *ApiKeyUpdateOne {
	akuo.mutation.Where(ps...)
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *ApiKeyUpdateOne) Select(field string, fields ...string) *ApiKeyUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated ApiKey entity.
func (akuo *ApiKeyUpdateOne) Save(ctx context.Context) (*ApiKey, error) {
	return withHooks(ctx, akuo.sqlSave, akuo.mutation, akuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) SaveX(ctx context.Context) *ApiKey {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *ApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (akuo *ApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *ApiKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikey.FieldID)
		for _, f := range fields {
			if !apikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.KeyName(); ok {
		_spec.SetField(apikey.FieldKeyName, field.TypeString, value)
	}
	if value, ok := akuo.mutation.APIKeyHash(); ok {
		_spec.SetField(apikey.FieldAPIKeyHash, field.TypeString, value)
	}
	if value, ok := akuo.mutation.APIKeyPrefix(); ok {
		_spec.SetField(apikey.FieldAPIKeyPrefix, field.TypeString, value)
	}
	if value, ok := akuo.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := akuo.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldPermissions, value)
		})
	}
	if akuo.mutation.PermissionsCleared() {
		_spec.ClearField(apikey.FieldPermissions, field.TypeJSON)
	}
	if value, ok := akuo.mutation.RateLimitPerMinute(); ok {
		_spec.SetField(apikey.FieldRateLimitPerMinute, field.TypeInt32, value)
	}
	if value, ok := akuo.mutation.AddedRateLimitPerMinute(); ok {
		_spec.AddField(apikey.FieldRateLimitPerMinute, field.TypeInt32, value)
	}
	if akuo.mutation.RateLimitPerMinuteCleared() {
		_spec.ClearField(apikey.FieldRateLimitPerMinute, field.TypeInt32)
	}
	if value, ok := akuo.mutation.IsActive(); ok {
		_spec.SetField(apikey.FieldIsActive, field.TypeBool, value)
	}
	if akuo.mutation.IsActiveCleared() {
		_spec.ClearField(apikey.FieldIsActive, field.TypeBool)
	}
	if value, ok := akuo.mutation.LastUsedAt(); ok {
		_spec.SetField(apikey.FieldLastUsedAt, field.TypeTime, value)
	}
	if akuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(apikey.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := akuo.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
	}
	if akuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(apikey.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := akuo.mutation.CreatedAt(); ok {
		_spec.SetField(apikey.FieldCreatedAt, field.TypeTime, value)
	}
	if akuo.mutation.CreatedAtCleared() {
		_spec.ClearField(apikey.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := akuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if akuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(apikey.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := akuo.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
	}
	if akuo.mutation.DeletedAtCleared() {
		_spec.ClearField(apikey.FieldDeletedAt, field.TypeTime)
	}
	if akuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApiKey{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akuo.mutation.done = true
	return _node, nil
}
