// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/privacysetting"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// PrivacySettingCreate is the builder for creating a PrivacySetting entity.
type PrivacySettingCreate struct {
	config
	mutation *PrivacySettingMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (psc *PrivacySettingCreate) SetUserID(s string) *PrivacySettingCreate {
	psc.mutation.SetUserID(s)
	return psc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableUserID(s *string) *PrivacySettingCreate {
	if s != nil {
		psc.SetUserID(*s)
	}
	return psc
}

// SetProfileVisibility sets the "profile_visibility" field.
func (psc *PrivacySettingCreate) SetProfileVisibility(pv privacysetting.ProfileVisibility) *PrivacySettingCreate {
	psc.mutation.SetProfileVisibility(pv)
	return psc
}

// SetNillableProfileVisibility sets the "profile_visibility" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableProfileVisibility(pv *privacysetting.ProfileVisibility) *PrivacySettingCreate {
	if pv != nil {
		psc.SetProfileVisibility(*pv)
	}
	return psc
}

// SetShowEmail sets the "show_email" field.
func (psc *PrivacySettingCreate) SetShowEmail(b bool) *PrivacySettingCreate {
	psc.mutation.SetShowEmail(b)
	return psc
}

// SetNillableShowEmail sets the "show_email" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableShowEmail(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetShowEmail(*b)
	}
	return psc
}

// SetShowPhone sets the "show_phone" field.
func (psc *PrivacySettingCreate) SetShowPhone(b bool) *PrivacySettingCreate {
	psc.mutation.SetShowPhone(b)
	return psc
}

// SetNillableShowPhone sets the "show_phone" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableShowPhone(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetShowPhone(*b)
	}
	return psc
}

// SetShowBirthDate sets the "show_birth_date" field.
func (psc *PrivacySettingCreate) SetShowBirthDate(b bool) *PrivacySettingCreate {
	psc.mutation.SetShowBirthDate(b)
	return psc
}

// SetNillableShowBirthDate sets the "show_birth_date" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableShowBirthDate(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetShowBirthDate(*b)
	}
	return psc
}

// SetAllowSearchEngines sets the "allow_search_engines" field.
func (psc *PrivacySettingCreate) SetAllowSearchEngines(b bool) *PrivacySettingCreate {
	psc.mutation.SetAllowSearchEngines(b)
	return psc
}

// SetNillableAllowSearchEngines sets the "allow_search_engines" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableAllowSearchEngines(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetAllowSearchEngines(*b)
	}
	return psc
}

// SetDataSharingConsent sets the "data_sharing_consent" field.
func (psc *PrivacySettingCreate) SetDataSharingConsent(b bool) *PrivacySettingCreate {
	psc.mutation.SetDataSharingConsent(b)
	return psc
}

// SetNillableDataSharingConsent sets the "data_sharing_consent" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableDataSharingConsent(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetDataSharingConsent(*b)
	}
	return psc
}

// SetAnalyticsConsent sets the "analytics_consent" field.
func (psc *PrivacySettingCreate) SetAnalyticsConsent(b bool) *PrivacySettingCreate {
	psc.mutation.SetAnalyticsConsent(b)
	return psc
}

// SetNillableAnalyticsConsent sets the "analytics_consent" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableAnalyticsConsent(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetAnalyticsConsent(*b)
	}
	return psc
}

// SetMarketingConsent sets the "marketing_consent" field.
func (psc *PrivacySettingCreate) SetMarketingConsent(b bool) *PrivacySettingCreate {
	psc.mutation.SetMarketingConsent(b)
	return psc
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableMarketingConsent(b *bool) *PrivacySettingCreate {
	if b != nil {
		psc.SetMarketingConsent(*b)
	}
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *PrivacySettingCreate) SetCreatedAt(t time.Time) *PrivacySettingCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableCreatedAt(t *time.Time) *PrivacySettingCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PrivacySettingCreate) SetUpdatedAt(t time.Time) *PrivacySettingCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PrivacySettingCreate) SetNillableUpdatedAt(t *time.Time) *PrivacySettingCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PrivacySettingCreate) SetID(s string) *PrivacySettingCreate {
	psc.mutation.SetID(s)
	return psc
}

// SetUser sets the "user" edge to the User entity.
func (psc *PrivacySettingCreate) SetUser(u *User) *PrivacySettingCreate {
	return psc.SetUserID(u.ID)
}

// Mutation returns the PrivacySettingMutation object of the builder.
func (psc *PrivacySettingCreate) Mutation() *PrivacySettingMutation {
	return psc.mutation
}

// Save creates the PrivacySetting in the database.
func (psc *PrivacySettingCreate) Save(ctx context.Context) (*PrivacySetting, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PrivacySettingCreate) SaveX(ctx context.Context) *PrivacySetting {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PrivacySettingCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PrivacySettingCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PrivacySettingCreate) check() error {
	if v, ok := psc.mutation.ProfileVisibility(); ok {
		if err := privacysetting.ProfileVisibilityValidator(v); err != nil {
			return &ValidationError{Name: "profile_visibility", err: fmt.Errorf(`ent: validator failed for field "PrivacySetting.profile_visibility": %w`, err)}
		}
	}
	return nil
}

func (psc *PrivacySettingCreate) sqlSave(ctx context.Context) (*PrivacySetting, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PrivacySetting.ID type: %T", _spec.ID.Value)
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PrivacySettingCreate) createSpec() (*PrivacySetting, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivacySetting{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(privacysetting.Table, sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.ProfileVisibility(); ok {
		_spec.SetField(privacysetting.FieldProfileVisibility, field.TypeEnum, value)
		_node.ProfileVisibility = value
	}
	if value, ok := psc.mutation.ShowEmail(); ok {
		_spec.SetField(privacysetting.FieldShowEmail, field.TypeBool, value)
		_node.ShowEmail = value
	}
	if value, ok := psc.mutation.ShowPhone(); ok {
		_spec.SetField(privacysetting.FieldShowPhone, field.TypeBool, value)
		_node.ShowPhone = value
	}
	if value, ok := psc.mutation.ShowBirthDate(); ok {
		_spec.SetField(privacysetting.FieldShowBirthDate, field.TypeBool, value)
		_node.ShowBirthDate = value
	}
	if value, ok := psc.mutation.AllowSearchEngines(); ok {
		_spec.SetField(privacysetting.FieldAllowSearchEngines, field.TypeBool, value)
		_node.AllowSearchEngines = value
	}
	if value, ok := psc.mutation.DataSharingConsent(); ok {
		_spec.SetField(privacysetting.FieldDataSharingConsent, field.TypeBool, value)
		_node.DataSharingConsent = value
	}
	if value, ok := psc.mutation.AnalyticsConsent(); ok {
		_spec.SetField(privacysetting.FieldAnalyticsConsent, field.TypeBool, value)
		_node.AnalyticsConsent = value
	}
	if value, ok := psc.mutation.MarketingConsent(); ok {
		_spec.SetField(privacysetting.FieldMarketingConsent, field.TypeBool, value)
		_node.MarketingConsent = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(privacysetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(privacysetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := psc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privacysetting.UserTable,
			Columns: []string{privacysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrivacySettingCreateBulk is the builder for creating many PrivacySetting entities in bulk.
type PrivacySettingCreateBulk struct {
	config
	err      error
	builders []*PrivacySettingCreate
}

// Save creates the PrivacySetting entities in the database.
func (pscb *PrivacySettingCreateBulk) Save(ctx context.Context) ([]*PrivacySetting, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PrivacySetting, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivacySettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PrivacySettingCreateBulk) SaveX(ctx context.Context) []*PrivacySetting {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PrivacySettingCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PrivacySettingCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
