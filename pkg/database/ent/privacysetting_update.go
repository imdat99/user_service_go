// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/predicate"
	"github.com/imdat99/user_service_go/pkg/database/ent/privacysetting"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// PrivacySettingUpdate is the builder for updating PrivacySetting entities.
type PrivacySettingUpdate struct {
	config
	hooks    []Hook
	mutation *PrivacySettingMutation
}

// Where appends a list predicates to the PrivacySettingUpdate builder.
func (psu *PrivacySettingUpdate) Where(ps ...predicate.PrivacySetting) *PrivacySettingUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUserID sets the "user_id" field.
func (psu *PrivacySettingUpdate) SetUserID(s string) *PrivacySettingUpdate {
	psu.mutation.SetUserID(s)
	return psu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableUserID(s *string) *PrivacySettingUpdate {
	if s != nil {
		psu.SetUserID(*s)
	}
	return psu
}

// ClearUserID clears the value of the "user_id" field.
func (psu *PrivacySettingUpdate) ClearUserID() *PrivacySettingUpdate {
	psu.mutation.ClearUserID()
	return psu
}

// SetProfileVisibility sets the "profile_visibility" field.
func (psu *PrivacySettingUpdate) SetProfileVisibility(pv privacysetting.ProfileVisibility) *PrivacySettingUpdate {
	psu.mutation.SetProfileVisibility(pv)
	return psu
}

// SetNillableProfileVisibility sets the "profile_visibility" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableProfileVisibility(pv *privacysetting.ProfileVisibility) *PrivacySettingUpdate {
	if pv != nil {
		psu.SetProfileVisibility(*pv)
	}
	return psu
}

// ClearProfileVisibility clears the value of the "profile_visibility" field.
func (psu *PrivacySettingUpdate) ClearProfileVisibility() *PrivacySettingUpdate {
	psu.mutation.ClearProfileVisibility()
	return psu
}

// SetShowEmail sets the "show_email" field.
func (psu *PrivacySettingUpdate) SetShowEmail(b bool) *PrivacySettingUpdate {
	psu.mutation.SetShowEmail(b)
	return psu
}

// SetNillableShowEmail sets the "show_email" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableShowEmail(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetShowEmail(*b)
	}
	return psu
}

// ClearShowEmail clears the value of the "show_email" field.
func (psu *PrivacySettingUpdate) ClearShowEmail() *PrivacySettingUpdate {
	psu.mutation.ClearShowEmail()
	return psu
}

// SetShowPhone sets the "show_phone" field.
func (psu *PrivacySettingUpdate) SetShowPhone(b bool) *PrivacySettingUpdate {
	psu.mutation.SetShowPhone(b)
	return psu
}

// SetNillableShowPhone sets the "show_phone" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableShowPhone(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetShowPhone(*b)
	}
	return psu
}

// ClearShowPhone clears the value of the "show_phone" field.
func (psu *PrivacySettingUpdate) ClearShowPhone() *PrivacySettingUpdate {
	psu.mutation.ClearShowPhone()
	return psu
}

// SetShowBirthDate sets the "show_birth_date" field.
func (psu *PrivacySettingUpdate) SetShowBirthDate(b bool) *PrivacySettingUpdate {
	psu.mutation.SetShowBirthDate(b)
	return psu
}

// SetNillableShowBirthDate sets the "show_birth_date" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableShowBirthDate(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetShowBirthDate(*b)
	}
	return psu
}

// ClearShowBirthDate clears the value of the "show_birth_date" field.
func (psu *PrivacySettingUpdate) ClearShowBirthDate() *PrivacySettingUpdate {
	psu.mutation.ClearShowBirthDate()
	return psu
}

// SetAllowSearchEngines sets the "allow_search_engines" field.
func (psu *PrivacySettingUpdate) SetAllowSearchEngines(b bool) *PrivacySettingUpdate {
	psu.mutation.SetAllowSearchEngines(b)
	return psu
}

// SetNillableAllowSearchEngines sets the "allow_search_engines" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableAllowSearchEngines(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetAllowSearchEngines(*b)
	}
	return psu
}

// ClearAllowSearchEngines clears the value of the "allow_search_engines" field.
func (psu *PrivacySettingUpdate) ClearAllowSearchEngines() *PrivacySettingUpdate {
	psu.mutation.ClearAllowSearchEngines()
	return psu
}

// SetDataSharingConsent sets the "data_sharing_consent" field.
func (psu *PrivacySettingUpdate) SetDataSharingConsent(b bool) *PrivacySettingUpdate {
	psu.mutation.SetDataSharingConsent(b)
	return psu
}

// SetNillableDataSharingConsent sets the "data_sharing_consent" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableDataSharingConsent(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetDataSharingConsent(*b)
	}
	return psu
}

// ClearDataSharingConsent clears the value of the "data_sharing_consent" field.
func (psu *PrivacySettingUpdate) ClearDataSharingConsent() *PrivacySettingUpdate {
	psu.mutation.ClearDataSharingConsent()
	return psu
}

// SetAnalyticsConsent sets the "analytics_consent" field.
func (psu *PrivacySettingUpdate) SetAnalyticsConsent(b bool) *PrivacySettingUpdate {
	psu.mutation.SetAnalyticsConsent(b)
	return psu
}

// SetNillableAnalyticsConsent sets the "analytics_consent" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableAnalyticsConsent(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetAnalyticsConsent(*b)
	}
	return psu
}

// ClearAnalyticsConsent clears the value of the "analytics_consent" field.
func (psu *PrivacySettingUpdate) ClearAnalyticsConsent() *PrivacySettingUpdate {
	psu.mutation.ClearAnalyticsConsent()
	return psu
}

// SetMarketingConsent sets the "marketing_consent" field.
func (psu *PrivacySettingUpdate) SetMarketingConsent(b bool) *PrivacySettingUpdate {
	psu.mutation.SetMarketingConsent(b)
	return psu
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableMarketingConsent(b *bool) *PrivacySettingUpdate {
	if b != nil {
		psu.SetMarketingConsent(*b)
	}
	return psu
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (psu *PrivacySettingUpdate) ClearMarketingConsent() *PrivacySettingUpdate {
	psu.mutation.ClearMarketingConsent()
	return psu
}

// SetCreatedAt sets the "created_at" field.
func (psu *PrivacySettingUpdate) SetCreatedAt(t time.Time) *PrivacySettingUpdate {
	psu.mutation.SetCreatedAt(t)
	return psu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableCreatedAt(t *time.Time) *PrivacySettingUpdate {
	if t != nil {
		psu.SetCreatedAt(*t)
	}
	return psu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psu *PrivacySettingUpdate) ClearCreatedAt() *PrivacySettingUpdate {
	psu.mutation.ClearCreatedAt()
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PrivacySettingUpdate) SetUpdatedAt(t time.Time) *PrivacySettingUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psu *PrivacySettingUpdate) SetNillableUpdatedAt(t *time.Time) *PrivacySettingUpdate {
	if t != nil {
		psu.SetUpdatedAt(*t)
	}
	return psu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psu *PrivacySettingUpdate) ClearUpdatedAt() *PrivacySettingUpdate {
	psu.mutation.ClearUpdatedAt()
	return psu
}

// SetUser sets the "user" edge to the User entity.
func (psu *PrivacySettingUpdate) SetUser(u *User) *PrivacySettingUpdate {
	return psu.SetUserID(u.ID)
}

// Mutation returns the PrivacySettingMutation object of the builder.
func (psu *PrivacySettingUpdate) Mutation() *PrivacySettingMutation {
	return psu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (psu *PrivacySettingUpdate) ClearUser() *PrivacySettingUpdate {
	psu.mutation.ClearUser()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PrivacySettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PrivacySettingUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PrivacySettingUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PrivacySettingUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PrivacySettingUpdate) check() error {
	if v, ok := psu.mutation.ProfileVisibility(); ok {
		if err := privacysetting.ProfileVisibilityValidator(v); err != nil {
			return &ValidationError{Name: "profile_visibility", err: fmt.Errorf(`ent: validator failed for field "PrivacySetting.profile_visibility": %w`, err)}
		}
	}
	return nil
}

func (psu *PrivacySettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(privacysetting.Table, privacysetting.Columns, sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.ProfileVisibility(); ok {
		_spec.SetField(privacysetting.FieldProfileVisibility, field.TypeEnum, value)
	}
	if psu.mutation.ProfileVisibilityCleared() {
		_spec.ClearField(privacysetting.FieldProfileVisibility, field.TypeEnum)
	}
	if value, ok := psu.mutation.ShowEmail(); ok {
		_spec.SetField(privacysetting.FieldShowEmail, field.TypeBool, value)
	}
	if psu.mutation.ShowEmailCleared() {
		_spec.ClearField(privacysetting.FieldShowEmail, field.TypeBool)
	}
	if value, ok := psu.mutation.ShowPhone(); ok {
		_spec.SetField(privacysetting.FieldShowPhone, field.TypeBool, value)
	}
	if psu.mutation.ShowPhoneCleared() {
		_spec.ClearField(privacysetting.FieldShowPhone, field.TypeBool)
	}
	if value, ok := psu.mutation.ShowBirthDate(); ok {
		_spec.SetField(privacysetting.FieldShowBirthDate, field.TypeBool, value)
	}
	if psu.mutation.ShowBirthDateCleared() {
		_spec.ClearField(privacysetting.FieldShowBirthDate, field.TypeBool)
	}
	if value, ok := psu.mutation.AllowSearchEngines(); ok {
		_spec.SetField(privacysetting.FieldAllowSearchEngines, field.TypeBool, value)
	}
	if psu.mutation.AllowSearchEnginesCleared() {
		_spec.ClearField(privacysetting.FieldAllowSearchEngines, field.TypeBool)
	}
	if value, ok := psu.mutation.DataSharingConsent(); ok {
		_spec.SetField(privacysetting.FieldDataSharingConsent, field.TypeBool, value)
	}
	if psu.mutation.DataSharingConsentCleared() {
		_spec.ClearField(privacysetting.FieldDataSharingConsent, field.TypeBool)
	}
	if value, ok := psu.mutation.AnalyticsConsent(); ok {
		_spec.SetField(privacysetting.FieldAnalyticsConsent, field.TypeBool, value)
	}
	if psu.mutation.AnalyticsConsentCleared() {
		_spec.ClearField(privacysetting.FieldAnalyticsConsent, field.TypeBool)
	}
	if value, ok := psu.mutation.MarketingConsent(); ok {
		_spec.SetField(privacysetting.FieldMarketingConsent, field.TypeBool, value)
	}
	if psu.mutation.MarketingConsentCleared() {
		_spec.ClearField(privacysetting.FieldMarketingConsent, field.TypeBool)
	}
	if value, ok := psu.mutation.CreatedAt(); ok {
		_spec.SetField(privacysetting.FieldCreatedAt, field.TypeTime, value)
	}
	if psu.mutation.CreatedAtCleared() {
		_spec.ClearField(privacysetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(privacysetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if psu.mutation.UpdatedAtCleared() {
		_spec.ClearField(privacysetting.FieldUpdatedAt, field.TypeTime)
	}
	if psu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privacysetting.UserTable,
			Columns: []string{privacysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privacysetting.UserTable,
			Columns: []string{privacysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privacysetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PrivacySettingUpdateOne is the builder for updating a single PrivacySetting entity.
type PrivacySettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivacySettingMutation
}

// SetUserID sets the "user_id" field.
func (psuo *PrivacySettingUpdateOne) SetUserID(s string) *PrivacySettingUpdateOne {
	psuo.mutation.SetUserID(s)
	return psuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableUserID(s *string) *PrivacySettingUpdateOne {
	if s != nil {
		psuo.SetUserID(*s)
	}
	return psuo
}

// ClearUserID clears the value of the "user_id" field.
func (psuo *PrivacySettingUpdateOne) ClearUserID() *PrivacySettingUpdateOne {
	psuo.mutation.ClearUserID()
	return psuo
}

// SetProfileVisibility sets the "profile_visibility" field.
func (psuo *PrivacySettingUpdateOne) SetProfileVisibility(pv privacysetting.ProfileVisibility) *PrivacySettingUpdateOne {
	psuo.mutation.SetProfileVisibility(pv)
	return psuo
}

// SetNillableProfileVisibility sets the "profile_visibility" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableProfileVisibility(pv *privacysetting.ProfileVisibility) *PrivacySettingUpdateOne {
	if pv != nil {
		psuo.SetProfileVisibility(*pv)
	}
	return psuo
}

// ClearProfileVisibility clears the value of the "profile_visibility" field.
func (psuo *PrivacySettingUpdateOne) ClearProfileVisibility() *PrivacySettingUpdateOne {
	psuo.mutation.ClearProfileVisibility()
	return psuo
}

// SetShowEmail sets the "show_email" field.
func (psuo *PrivacySettingUpdateOne) SetShowEmail(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetShowEmail(b)
	return psuo
}

// SetNillableShowEmail sets the "show_email" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableShowEmail(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetShowEmail(*b)
	}
	return psuo
}

// ClearShowEmail clears the value of the "show_email" field.
func (psuo *PrivacySettingUpdateOne) ClearShowEmail() *PrivacySettingUpdateOne {
	psuo.mutation.ClearShowEmail()
	return psuo
}

// SetShowPhone sets the "show_phone" field.
func (psuo *PrivacySettingUpdateOne) SetShowPhone(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetShowPhone(b)
	return psuo
}

// SetNillableShowPhone sets the "show_phone" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableShowPhone(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetShowPhone(*b)
	}
	return psuo
}

// ClearShowPhone clears the value of the "show_phone" field.
func (psuo *PrivacySettingUpdateOne) ClearShowPhone() *PrivacySettingUpdateOne {
	psuo.mutation.ClearShowPhone()
	return psuo
}

// SetShowBirthDate sets the "show_birth_date" field.
func (psuo *PrivacySettingUpdateOne) SetShowBirthDate(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetShowBirthDate(b)
	return psuo
}

// SetNillableShowBirthDate sets the "show_birth_date" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableShowBirthDate(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetShowBirthDate(*b)
	}
	return psuo
}

// ClearShowBirthDate clears the value of the "show_birth_date" field.
func (psuo *PrivacySettingUpdateOne) ClearShowBirthDate() *PrivacySettingUpdateOne {
	psuo.mutation.ClearShowBirthDate()
	return psuo
}

// SetAllowSearchEngines sets the "allow_search_engines" field.
func (psuo *PrivacySettingUpdateOne) SetAllowSearchEngines(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetAllowSearchEngines(b)
	return psuo
}

// SetNillableAllowSearchEngines sets the "allow_search_engines" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableAllowSearchEngines(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetAllowSearchEngines(*b)
	}
	return psuo
}

// ClearAllowSearchEngines clears the value of the "allow_search_engines" field.
func (psuo *PrivacySettingUpdateOne) ClearAllowSearchEngines() *PrivacySettingUpdateOne {
	psuo.mutation.ClearAllowSearchEngines()
	return psuo
}

// SetDataSharingConsent sets the "data_sharing_consent" field.
func (psuo *PrivacySettingUpdateOne) SetDataSharingConsent(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetDataSharingConsent(b)
	return psuo
}

// SetNillableDataSharingConsent sets the "data_sharing_consent" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableDataSharingConsent(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetDataSharingConsent(*b)
	}
	return psuo
}

// ClearDataSharingConsent clears the value of the "data_sharing_consent" field.
func (psuo *PrivacySettingUpdateOne) ClearDataSharingConsent() *PrivacySettingUpdateOne {
	psuo.mutation.ClearDataSharingConsent()
	return psuo
}

// SetAnalyticsConsent sets the "analytics_consent" field.
func (psuo *PrivacySettingUpdateOne) SetAnalyticsConsent(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetAnalyticsConsent(b)
	return psuo
}

// SetNillableAnalyticsConsent sets the "analytics_consent" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableAnalyticsConsent(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetAnalyticsConsent(*b)
	}
	return psuo
}

// ClearAnalyticsConsent clears the value of the "analytics_consent" field.
func (psuo *PrivacySettingUpdateOne) ClearAnalyticsConsent() *PrivacySettingUpdateOne {
	psuo.mutation.ClearAnalyticsConsent()
	return psuo
}

// SetMarketingConsent sets the "marketing_consent" field.
func (psuo *PrivacySettingUpdateOne) SetMarketingConsent(b bool) *PrivacySettingUpdateOne {
	psuo.mutation.SetMarketingConsent(b)
	return psuo
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableMarketingConsent(b *bool) *PrivacySettingUpdateOne {
	if b != nil {
		psuo.SetMarketingConsent(*b)
	}
	return psuo
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (psuo *PrivacySettingUpdateOne) ClearMarketingConsent() *PrivacySettingUpdateOne {
	psuo.mutation.ClearMarketingConsent()
	return psuo
}

// SetCreatedAt sets the "created_at" field.
func (psuo *PrivacySettingUpdateOne) SetCreatedAt(t time.Time) *PrivacySettingUpdateOne {
	psuo.mutation.SetCreatedAt(t)
	return psuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableCreatedAt(t *time.Time) *PrivacySettingUpdateOne {
	if t != nil {
		psuo.SetCreatedAt(*t)
	}
	return psuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psuo *PrivacySettingUpdateOne) ClearCreatedAt() *PrivacySettingUpdateOne {
	psuo.mutation.ClearCreatedAt()
	return psuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PrivacySettingUpdateOne) SetUpdatedAt(t time.Time) *PrivacySettingUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psuo *PrivacySettingUpdateOne) SetNillableUpdatedAt(t *time.Time) *PrivacySettingUpdateOne {
	if t != nil {
		psuo.SetUpdatedAt(*t)
	}
	return psuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psuo *PrivacySettingUpdateOne) ClearUpdatedAt() *PrivacySettingUpdateOne {
	psuo.mutation.ClearUpdatedAt()
	return psuo
}

// SetUser sets the "user" edge to the User entity.
func (psuo *PrivacySettingUpdateOne) SetUser(u *User) *PrivacySettingUpdateOne {
	return psuo.SetUserID(u.ID)
}

// Mutation returns the PrivacySettingMutation object of the builder.
func (psuo *PrivacySettingUpdateOne) Mutation() *PrivacySettingMutation {
	return psuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (psuo *PrivacySettingUpdateOne) ClearUser() *PrivacySettingUpdateOne {
	psuo.mutation.ClearUser()
	return psuo
}

// Where appends a list predicates to the PrivacySettingUpdate builder.
func (psuo *PrivacySettingUpdateOne) Where(ps ...predicate.PrivacySetting) *PrivacySettingUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PrivacySettingUpdateOne) Select(field string, fields ...string) *PrivacySettingUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PrivacySetting entity.
func (psuo *PrivacySettingUpdateOne) Save(ctx context.Context) (*PrivacySetting, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PrivacySettingUpdateOne) SaveX(ctx context.Context) *PrivacySetting {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PrivacySettingUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PrivacySettingUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PrivacySettingUpdateOne) check() error {
	if v, ok := psuo.mutation.ProfileVisibility(); ok {
		if err := privacysetting.ProfileVisibilityValidator(v); err != nil {
			return &ValidationError{Name: "profile_visibility", err: fmt.Errorf(`ent: validator failed for field "PrivacySetting.profile_visibility": %w`, err)}
		}
	}
	return nil
}

func (psuo *PrivacySettingUpdateOne) sqlSave(ctx context.Context) (_node *PrivacySetting, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(privacysetting.Table, privacysetting.Columns, sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivacySetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privacysetting.FieldID)
		for _, f := range fields {
			if !privacysetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privacysetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.ProfileVisibility(); ok {
		_spec.SetField(privacysetting.FieldProfileVisibility, field.TypeEnum, value)
	}
	if psuo.mutation.ProfileVisibilityCleared() {
		_spec.ClearField(privacysetting.FieldProfileVisibility, field.TypeEnum)
	}
	if value, ok := psuo.mutation.ShowEmail(); ok {
		_spec.SetField(privacysetting.FieldShowEmail, field.TypeBool, value)
	}
	if psuo.mutation.ShowEmailCleared() {
		_spec.ClearField(privacysetting.FieldShowEmail, field.TypeBool)
	}
	if value, ok := psuo.mutation.ShowPhone(); ok {
		_spec.SetField(privacysetting.FieldShowPhone, field.TypeBool, value)
	}
	if psuo.mutation.ShowPhoneCleared() {
		_spec.ClearField(privacysetting.FieldShowPhone, field.TypeBool)
	}
	if value, ok := psuo.mutation.ShowBirthDate(); ok {
		_spec.SetField(privacysetting.FieldShowBirthDate, field.TypeBool, value)
	}
	if psuo.mutation.ShowBirthDateCleared() {
		_spec.ClearField(privacysetting.FieldShowBirthDate, field.TypeBool)
	}
	if value, ok := psuo.mutation.AllowSearchEngines(); ok {
		_spec.SetField(privacysetting.FieldAllowSearchEngines, field.TypeBool, value)
	}
	if psuo.mutation.AllowSearchEnginesCleared() {
		_spec.ClearField(privacysetting.FieldAllowSearchEngines, field.TypeBool)
	}
	if value, ok := psuo.mutation.DataSharingConsent(); ok {
		_spec.SetField(privacysetting.FieldDataSharingConsent, field.TypeBool, value)
	}
	if psuo.mutation.DataSharingConsentCleared() {
		_spec.ClearField(privacysetting.FieldDataSharingConsent, field.TypeBool)
	}
	if value, ok := psuo.mutation.AnalyticsConsent(); ok {
		_spec.SetField(privacysetting.FieldAnalyticsConsent, field.TypeBool, value)
	}
	if psuo.mutation.AnalyticsConsentCleared() {
		_spec.ClearField(privacysetting.FieldAnalyticsConsent, field.TypeBool)
	}
	if value, ok := psuo.mutation.MarketingConsent(); ok {
		_spec.SetField(privacysetting.FieldMarketingConsent, field.TypeBool, value)
	}
	if psuo.mutation.MarketingConsentCleared() {
		_spec.ClearField(privacysetting.FieldMarketingConsent, field.TypeBool)
	}
	if value, ok := psuo.mutation.CreatedAt(); ok {
		_spec.SetField(privacysetting.FieldCreatedAt, field.TypeTime, value)
	}
	if psuo.mutation.CreatedAtCleared() {
		_spec.ClearField(privacysetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(privacysetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if psuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(privacysetting.FieldUpdatedAt, field.TypeTime)
	}
	if psuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privacysetting.UserTable,
			Columns: []string{privacysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privacysetting.UserTable,
			Columns: []string{privacysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrivacySetting{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privacysetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
