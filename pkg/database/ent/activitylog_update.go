// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/activitylog"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/user"
)

// ActivityLogUpdate is the builder for updating ActivityLog entities.
type ActivityLogUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityLogMutation
}

// Where appends a list predicates to the ActivityLogUpdate builder.
func (alu *ActivityLogUpdate) Where(ps ...predicate.ActivityLog) *ActivityLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetUserID sets the "user_id" field.
func (alu *ActivityLogUpdate) SetUserID(s string) *ActivityLogUpdate {
	alu.mutation.SetUserID(s)
	return alu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableUserID(s *string) *ActivityLogUpdate {
	if s != nil {
		alu.SetUserID(*s)
	}
	return alu
}

// ClearUserID clears the value of the "user_id" field.
func (alu *ActivityLogUpdate) ClearUserID() *ActivityLogUpdate {
	alu.mutation.ClearUserID()
	return alu
}

// SetActivityType sets the "activity_type" field.
func (alu *ActivityLogUpdate) SetActivityType(at activitylog.ActivityType) *ActivityLogUpdate {
	alu.mutation.SetActivityType(at)
	return alu
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableActivityType(at *activitylog.ActivityType) *ActivityLogUpdate {
	if at != nil {
		alu.SetActivityType(*at)
	}
	return alu
}

// SetDescription sets the "description" field.
func (alu *ActivityLogUpdate) SetDescription(s string) *ActivityLogUpdate {
	alu.mutation.SetDescription(s)
	return alu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableDescription(s *string) *ActivityLogUpdate {
	if s != nil {
		alu.SetDescription(*s)
	}
	return alu
}

// ClearDescription clears the value of the "description" field.
func (alu *ActivityLogUpdate) ClearDescription() *ActivityLogUpdate {
	alu.mutation.ClearDescription()
	return alu
}

// SetIPAddress sets the "ip_address" field.
func (alu *ActivityLogUpdate) SetIPAddress(s string) *ActivityLogUpdate {
	alu.mutation.SetIPAddress(s)
	return alu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableIPAddress(s *string) *ActivityLogUpdate {
	if s != nil {
		alu.SetIPAddress(*s)
	}
	return alu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (alu *ActivityLogUpdate) ClearIPAddress() *ActivityLogUpdate {
	alu.mutation.ClearIPAddress()
	return alu
}

// SetUserAgent sets the "user_agent" field.
func (alu *ActivityLogUpdate) SetUserAgent(s string) *ActivityLogUpdate {
	alu.mutation.SetUserAgent(s)
	return alu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableUserAgent(s *string) *ActivityLogUpdate {
	if s != nil {
		alu.SetUserAgent(*s)
	}
	return alu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (alu *ActivityLogUpdate) ClearUserAgent() *ActivityLogUpdate {
	alu.mutation.ClearUserAgent()
	return alu
}

// SetMetadata sets the "metadata" field.
func (alu *ActivityLogUpdate) SetMetadata(jm json.RawMessage) *ActivityLogUpdate {
	alu.mutation.SetMetadata(jm)
	return alu
}

// AppendMetadata appends jm to the "metadata" field.
func (alu *ActivityLogUpdate) AppendMetadata(jm json.RawMessage) *ActivityLogUpdate {
	alu.mutation.AppendMetadata(jm)
	return alu
}

// ClearMetadata clears the value of the "metadata" field.
func (alu *ActivityLogUpdate) ClearMetadata() *ActivityLogUpdate {
	alu.mutation.ClearMetadata()
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *ActivityLogUpdate) SetCreatedAt(t time.Time) *ActivityLogUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *ActivityLogUpdate) SetNillableCreatedAt(t *time.Time) *ActivityLogUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (alu *ActivityLogUpdate) ClearCreatedAt() *ActivityLogUpdate {
	alu.mutation.ClearCreatedAt()
	return alu
}

// SetUser sets the "user" edge to the User entity.
func (alu *ActivityLogUpdate) SetUser(u *User) *ActivityLogUpdate {
	return alu.SetUserID(u.ID)
}

// Mutation returns the ActivityLogMutation object of the builder.
func (alu *ActivityLogUpdate) Mutation() *ActivityLogMutation {
	return alu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (alu *ActivityLogUpdate) ClearUser() *ActivityLogUpdate {
	alu.mutation.ClearUser()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *ActivityLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *ActivityLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *ActivityLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *ActivityLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *ActivityLogUpdate) check() error {
	if v, ok := alu.mutation.ActivityType(); ok {
		if err := activitylog.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ActivityLog.activity_type": %w`, err)}
		}
	}
	return nil
}

func (alu *ActivityLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitylog.Table, activitylog.Columns, sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.ActivityType(); ok {
		_spec.SetField(activitylog.FieldActivityType, field.TypeEnum, value)
	}
	if value, ok := alu.mutation.Description(); ok {
		_spec.SetField(activitylog.FieldDescription, field.TypeString, value)
	}
	if alu.mutation.DescriptionCleared() {
		_spec.ClearField(activitylog.FieldDescription, field.TypeString)
	}
	if value, ok := alu.mutation.IPAddress(); ok {
		_spec.SetField(activitylog.FieldIPAddress, field.TypeString, value)
	}
	if alu.mutation.IPAddressCleared() {
		_spec.ClearField(activitylog.FieldIPAddress, field.TypeString)
	}
	if value, ok := alu.mutation.UserAgent(); ok {
		_spec.SetField(activitylog.FieldUserAgent, field.TypeString, value)
	}
	if alu.mutation.UserAgentCleared() {
		_spec.ClearField(activitylog.FieldUserAgent, field.TypeString)
	}
	if value, ok := alu.mutation.Metadata(); ok {
		_spec.SetField(activitylog.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := alu.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitylog.FieldMetadata, value)
		})
	}
	if alu.mutation.MetadataCleared() {
		_spec.ClearField(activitylog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(activitylog.FieldCreatedAt, field.TypeTime, value)
	}
	if alu.mutation.CreatedAtCleared() {
		_spec.ClearField(activitylog.FieldCreatedAt, field.TypeTime)
	}
	if alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.UserTable,
			Columns: []string{activitylog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.UserTable,
			Columns: []string{activitylog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// ActivityLogUpdateOne is the builder for updating a single ActivityLog entity.
type ActivityLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityLogMutation
}

// SetUserID sets the "user_id" field.
func (aluo *ActivityLogUpdateOne) SetUserID(s string) *ActivityLogUpdateOne {
	aluo.mutation.SetUserID(s)
	return aluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableUserID(s *string) *ActivityLogUpdateOne {
	if s != nil {
		aluo.SetUserID(*s)
	}
	return aluo
}

// ClearUserID clears the value of the "user_id" field.
func (aluo *ActivityLogUpdateOne) ClearUserID() *ActivityLogUpdateOne {
	aluo.mutation.ClearUserID()
	return aluo
}

// SetActivityType sets the "activity_type" field.
func (aluo *ActivityLogUpdateOne) SetActivityType(at activitylog.ActivityType) *ActivityLogUpdateOne {
	aluo.mutation.SetActivityType(at)
	return aluo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableActivityType(at *activitylog.ActivityType) *ActivityLogUpdateOne {
	if at != nil {
		aluo.SetActivityType(*at)
	}
	return aluo
}

// SetDescription sets the "description" field.
func (aluo *ActivityLogUpdateOne) SetDescription(s string) *ActivityLogUpdateOne {
	aluo.mutation.SetDescription(s)
	return aluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableDescription(s *string) *ActivityLogUpdateOne {
	if s != nil {
		aluo.SetDescription(*s)
	}
	return aluo
}

// ClearDescription clears the value of the "description" field.
func (aluo *ActivityLogUpdateOne) ClearDescription() *ActivityLogUpdateOne {
	aluo.mutation.ClearDescription()
	return aluo
}

// SetIPAddress sets the "ip_address" field.
func (aluo *ActivityLogUpdateOne) SetIPAddress(s string) *ActivityLogUpdateOne {
	aluo.mutation.SetIPAddress(s)
	return aluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableIPAddress(s *string) *ActivityLogUpdateOne {
	if s != nil {
		aluo.SetIPAddress(*s)
	}
	return aluo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (aluo *ActivityLogUpdateOne) ClearIPAddress() *ActivityLogUpdateOne {
	aluo.mutation.ClearIPAddress()
	return aluo
}

// SetUserAgent sets the "user_agent" field.
func (aluo *ActivityLogUpdateOne) SetUserAgent(s string) *ActivityLogUpdateOne {
	aluo.mutation.SetUserAgent(s)
	return aluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableUserAgent(s *string) *ActivityLogUpdateOne {
	if s != nil {
		aluo.SetUserAgent(*s)
	}
	return aluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (aluo *ActivityLogUpdateOne) ClearUserAgent() *ActivityLogUpdateOne {
	aluo.mutation.ClearUserAgent()
	return aluo
}

// SetMetadata sets the "metadata" field.
func (aluo *ActivityLogUpdateOne) SetMetadata(jm json.RawMessage) *ActivityLogUpdateOne {
	aluo.mutation.SetMetadata(jm)
	return aluo
}

// AppendMetadata appends jm to the "metadata" field.
func (aluo *ActivityLogUpdateOne) AppendMetadata(jm json.RawMessage) *ActivityLogUpdateOne {
	aluo.mutation.AppendMetadata(jm)
	return aluo
}

// ClearMetadata clears the value of the "metadata" field.
func (aluo *ActivityLogUpdateOne) ClearMetadata() *ActivityLogUpdateOne {
	aluo.mutation.ClearMetadata()
	return aluo
}

// SetCreatedAt sets the "created_at" field.
func (aluo *ActivityLogUpdateOne) SetCreatedAt(t time.Time) *ActivityLogUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *ActivityLogUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityLogUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (aluo *ActivityLogUpdateOne) ClearCreatedAt() *ActivityLogUpdateOne {
	aluo.mutation.ClearCreatedAt()
	return aluo
}

// SetUser sets the "user" edge to the User entity.
func (aluo *ActivityLogUpdateOne) SetUser(u *User) *ActivityLogUpdateOne {
	return aluo.SetUserID(u.ID)
}

// Mutation returns the ActivityLogMutation object of the builder.
func (aluo *ActivityLogUpdateOne) Mutation() *ActivityLogMutation {
	return aluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aluo *ActivityLogUpdateOne) ClearUser() *ActivityLogUpdateOne {
	aluo.mutation.ClearUser()
	return aluo
}

// Where appends a list predicates to the ActivityLogUpdate builder.
func (aluo *ActivityLogUpdateOne) Where(ps ...predicate.ActivityLog) *ActivityLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *ActivityLogUpdateOne) Select(field string, fields ...string) *ActivityLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated ActivityLog entity.
func (aluo *ActivityLogUpdateOne) Save(ctx context.Context) (*ActivityLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *ActivityLogUpdateOne) SaveX(ctx context.Context) *ActivityLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *ActivityLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *ActivityLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *ActivityLogUpdateOne) check() error {
	if v, ok := aluo.mutation.ActivityType(); ok {
		if err := activitylog.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ActivityLog.activity_type": %w`, err)}
		}
	}
	return nil
}

func (aluo *ActivityLogUpdateOne) sqlSave(ctx context.Context) (_node *ActivityLog, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitylog.Table, activitylog.Columns, sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitylog.FieldID)
		for _, f := range fields {
			if !activitylog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitylog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.ActivityType(); ok {
		_spec.SetField(activitylog.FieldActivityType, field.TypeEnum, value)
	}
	if value, ok := aluo.mutation.Description(); ok {
		_spec.SetField(activitylog.FieldDescription, field.TypeString, value)
	}
	if aluo.mutation.DescriptionCleared() {
		_spec.ClearField(activitylog.FieldDescription, field.TypeString)
	}
	if value, ok := aluo.mutation.IPAddress(); ok {
		_spec.SetField(activitylog.FieldIPAddress, field.TypeString, value)
	}
	if aluo.mutation.IPAddressCleared() {
		_spec.ClearField(activitylog.FieldIPAddress, field.TypeString)
	}
	if value, ok := aluo.mutation.UserAgent(); ok {
		_spec.SetField(activitylog.FieldUserAgent, field.TypeString, value)
	}
	if aluo.mutation.UserAgentCleared() {
		_spec.ClearField(activitylog.FieldUserAgent, field.TypeString)
	}
	if value, ok := aluo.mutation.Metadata(); ok {
		_spec.SetField(activitylog.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := aluo.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitylog.FieldMetadata, value)
		})
	}
	if aluo.mutation.MetadataCleared() {
		_spec.ClearField(activitylog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(activitylog.FieldCreatedAt, field.TypeTime, value)
	}
	if aluo.mutation.CreatedAtCleared() {
		_spec.ClearField(activitylog.FieldCreatedAt, field.TypeTime)
	}
	if aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.UserTable,
			Columns: []string{activitylog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.UserTable,
			Columns: []string{activitylog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
