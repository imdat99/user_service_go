// Code generated by ent, DO NOT EDIT.

package privacysetting

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the privacysetting type in the database.
	Label = "privacy_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldProfileVisibility holds the string denoting the profile_visibility field in the database.
	FieldProfileVisibility = "profile_visibility"
	// FieldShowEmail holds the string denoting the show_email field in the database.
	FieldShowEmail = "show_email"
	// FieldShowPhone holds the string denoting the show_phone field in the database.
	FieldShowPhone = "show_phone"
	// FieldShowBirthDate holds the string denoting the show_birth_date field in the database.
	FieldShowBirthDate = "show_birth_date"
	// FieldAllowSearchEngines holds the string denoting the allow_search_engines field in the database.
	FieldAllowSearchEngines = "allow_search_engines"
	// FieldDataSharingConsent holds the string denoting the data_sharing_consent field in the database.
	FieldDataSharingConsent = "data_sharing_consent"
	// FieldAnalyticsConsent holds the string denoting the analytics_consent field in the database.
	FieldAnalyticsConsent = "analytics_consent"
	// FieldMarketingConsent holds the string denoting the marketing_consent field in the database.
	FieldMarketingConsent = "marketing_consent"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the privacysetting in the database.
	Table = "privacy_settings"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "privacy_settings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for privacysetting fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldProfileVisibility,
	FieldShowEmail,
	FieldShowPhone,
	FieldShowBirthDate,
	FieldAllowSearchEngines,
	FieldDataSharingConsent,
	FieldAnalyticsConsent,
	FieldMarketingConsent,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ProfileVisibility defines the type for the "profile_visibility" enum field.
type ProfileVisibility string

// ProfileVisibility values.
const (
	ProfileVisibilityPublic      ProfileVisibility = "public"
	ProfileVisibilityFriendsOnly ProfileVisibility = "friends_only"
	ProfileVisibilityPrivate     ProfileVisibility = "private"
)

func (pv ProfileVisibility) String() string {
	return string(pv)
}

// ProfileVisibilityValidator is a validator for the "profile_visibility" field enum values. It is called by the builders before save.
func ProfileVisibilityValidator(pv ProfileVisibility) error {
	switch pv {
	case ProfileVisibilityPublic, ProfileVisibilityFriendsOnly, ProfileVisibilityPrivate:
		return nil
	default:
		return fmt.Errorf("privacysetting: invalid enum value for profile_visibility field: %q", pv)
	}
}

// OrderOption defines the ordering options for the PrivacySetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByProfileVisibility orders the results by the profile_visibility field.
func ByProfileVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileVisibility, opts...).ToFunc()
}

// ByShowEmail orders the results by the show_email field.
func ByShowEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowEmail, opts...).ToFunc()
}

// ByShowPhone orders the results by the show_phone field.
func ByShowPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowPhone, opts...).ToFunc()
}

// ByShowBirthDate orders the results by the show_birth_date field.
func ByShowBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowBirthDate, opts...).ToFunc()
}

// ByAllowSearchEngines orders the results by the allow_search_engines field.
func ByAllowSearchEngines(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowSearchEngines, opts...).ToFunc()
}

// ByDataSharingConsent orders the results by the data_sharing_consent field.
func ByDataSharingConsent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataSharingConsent, opts...).ToFunc()
}

// ByAnalyticsConsent orders the results by the analytics_consent field.
func ByAnalyticsConsent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnalyticsConsent, opts...).ToFunc()
}

// ByMarketingConsent orders the results by the marketing_consent field.
func ByMarketingConsent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketingConsent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
