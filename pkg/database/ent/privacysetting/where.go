// Code generated by ent, DO NOT EDIT.

package privacysetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/imdat99/user_service_go/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldUserID, v))
}

// ShowEmail applies equality check predicate on the "show_email" field. It's identical to ShowEmailEQ.
func ShowEmail(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowEmail, v))
}

// ShowPhone applies equality check predicate on the "show_phone" field. It's identical to ShowPhoneEQ.
func ShowPhone(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowPhone, v))
}

// ShowBirthDate applies equality check predicate on the "show_birth_date" field. It's identical to ShowBirthDateEQ.
func ShowBirthDate(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowBirthDate, v))
}

// AllowSearchEngines applies equality check predicate on the "allow_search_engines" field. It's identical to AllowSearchEnginesEQ.
func AllowSearchEngines(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldAllowSearchEngines, v))
}

// DataSharingConsent applies equality check predicate on the "data_sharing_consent" field. It's identical to DataSharingConsentEQ.
func DataSharingConsent(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldDataSharingConsent, v))
}

// AnalyticsConsent applies equality check predicate on the "analytics_consent" field. It's identical to AnalyticsConsentEQ.
func AnalyticsConsent(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldAnalyticsConsent, v))
}

// MarketingConsent applies equality check predicate on the "marketing_consent" field. It's identical to MarketingConsentEQ.
func MarketingConsent(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldMarketingConsent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldContainsFold(FieldUserID, v))
}

// ProfileVisibilityEQ applies the EQ predicate on the "profile_visibility" field.
func ProfileVisibilityEQ(v ProfileVisibility) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldProfileVisibility, v))
}

// ProfileVisibilityNEQ applies the NEQ predicate on the "profile_visibility" field.
func ProfileVisibilityNEQ(v ProfileVisibility) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldProfileVisibility, v))
}

// ProfileVisibilityIn applies the In predicate on the "profile_visibility" field.
func ProfileVisibilityIn(vs ...ProfileVisibility) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIn(FieldProfileVisibility, vs...))
}

// ProfileVisibilityNotIn applies the NotIn predicate on the "profile_visibility" field.
func ProfileVisibilityNotIn(vs ...ProfileVisibility) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotIn(FieldProfileVisibility, vs...))
}

// ProfileVisibilityIsNil applies the IsNil predicate on the "profile_visibility" field.
func ProfileVisibilityIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldProfileVisibility))
}

// ProfileVisibilityNotNil applies the NotNil predicate on the "profile_visibility" field.
func ProfileVisibilityNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldProfileVisibility))
}

// ShowEmailEQ applies the EQ predicate on the "show_email" field.
func ShowEmailEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowEmail, v))
}

// ShowEmailNEQ applies the NEQ predicate on the "show_email" field.
func ShowEmailNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldShowEmail, v))
}

// ShowEmailIsNil applies the IsNil predicate on the "show_email" field.
func ShowEmailIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldShowEmail))
}

// ShowEmailNotNil applies the NotNil predicate on the "show_email" field.
func ShowEmailNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldShowEmail))
}

// ShowPhoneEQ applies the EQ predicate on the "show_phone" field.
func ShowPhoneEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowPhone, v))
}

// ShowPhoneNEQ applies the NEQ predicate on the "show_phone" field.
func ShowPhoneNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldShowPhone, v))
}

// ShowPhoneIsNil applies the IsNil predicate on the "show_phone" field.
func ShowPhoneIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldShowPhone))
}

// ShowPhoneNotNil applies the NotNil predicate on the "show_phone" field.
func ShowPhoneNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldShowPhone))
}

// ShowBirthDateEQ applies the EQ predicate on the "show_birth_date" field.
func ShowBirthDateEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldShowBirthDate, v))
}

// ShowBirthDateNEQ applies the NEQ predicate on the "show_birth_date" field.
func ShowBirthDateNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldShowBirthDate, v))
}

// ShowBirthDateIsNil applies the IsNil predicate on the "show_birth_date" field.
func ShowBirthDateIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldShowBirthDate))
}

// ShowBirthDateNotNil applies the NotNil predicate on the "show_birth_date" field.
func ShowBirthDateNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldShowBirthDate))
}

// AllowSearchEnginesEQ applies the EQ predicate on the "allow_search_engines" field.
func AllowSearchEnginesEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldAllowSearchEngines, v))
}

// AllowSearchEnginesNEQ applies the NEQ predicate on the "allow_search_engines" field.
func AllowSearchEnginesNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldAllowSearchEngines, v))
}

// AllowSearchEnginesIsNil applies the IsNil predicate on the "allow_search_engines" field.
func AllowSearchEnginesIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldAllowSearchEngines))
}

// AllowSearchEnginesNotNil applies the NotNil predicate on the "allow_search_engines" field.
func AllowSearchEnginesNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldAllowSearchEngines))
}

// DataSharingConsentEQ applies the EQ predicate on the "data_sharing_consent" field.
func DataSharingConsentEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldDataSharingConsent, v))
}

// DataSharingConsentNEQ applies the NEQ predicate on the "data_sharing_consent" field.
func DataSharingConsentNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldDataSharingConsent, v))
}

// DataSharingConsentIsNil applies the IsNil predicate on the "data_sharing_consent" field.
func DataSharingConsentIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldDataSharingConsent))
}

// DataSharingConsentNotNil applies the NotNil predicate on the "data_sharing_consent" field.
func DataSharingConsentNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldDataSharingConsent))
}

// AnalyticsConsentEQ applies the EQ predicate on the "analytics_consent" field.
func AnalyticsConsentEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldAnalyticsConsent, v))
}

// AnalyticsConsentNEQ applies the NEQ predicate on the "analytics_consent" field.
func AnalyticsConsentNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldAnalyticsConsent, v))
}

// AnalyticsConsentIsNil applies the IsNil predicate on the "analytics_consent" field.
func AnalyticsConsentIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldAnalyticsConsent))
}

// AnalyticsConsentNotNil applies the NotNil predicate on the "analytics_consent" field.
func AnalyticsConsentNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldAnalyticsConsent))
}

// MarketingConsentEQ applies the EQ predicate on the "marketing_consent" field.
func MarketingConsentEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldMarketingConsent, v))
}

// MarketingConsentNEQ applies the NEQ predicate on the "marketing_consent" field.
func MarketingConsentNEQ(v bool) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldMarketingConsent, v))
}

// MarketingConsentIsNil applies the IsNil predicate on the "marketing_consent" field.
func MarketingConsentIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldMarketingConsent))
}

// MarketingConsentNotNil applies the NotNil predicate on the "marketing_consent" field.
func MarketingConsentNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldMarketingConsent))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PrivacySetting {
	return predicate.PrivacySetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PrivacySetting {
	return predicate.PrivacySetting(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrivacySetting) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrivacySetting) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrivacySetting) predicate.PrivacySetting {
	return predicate.PrivacySetting(sql.NotPredicates(p))
}
