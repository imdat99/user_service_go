// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/userprofile"
)

// UserProfileCreate is the builder for creating a UserProfile entity.
type UserProfileCreate struct {
	config
	mutation *UserProfileMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (upc *UserProfileCreate) SetUserID(s string) *UserProfileCreate {
	upc.mutation.SetUserID(s)
	return upc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableUserID(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetUserID(*s)
	}
	return upc
}

// SetBio sets the "bio" field.
func (upc *UserProfileCreate) SetBio(s string) *UserProfileCreate {
	upc.mutation.SetBio(s)
	return upc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableBio(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetBio(*s)
	}
	return upc
}

// SetWebsite sets the "website" field.
func (upc *UserProfileCreate) SetWebsite(s string) *UserProfileCreate {
	upc.mutation.SetWebsite(s)
	return upc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableWebsite(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetWebsite(*s)
	}
	return upc
}

// SetLocation sets the "location" field.
func (upc *UserProfileCreate) SetLocation(s string) *UserProfileCreate {
	upc.mutation.SetLocation(s)
	return upc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableLocation(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetLocation(*s)
	}
	return upc
}

// SetTimezone sets the "timezone" field.
func (upc *UserProfileCreate) SetTimezone(s string) *UserProfileCreate {
	upc.mutation.SetTimezone(s)
	return upc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableTimezone(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetTimezone(*s)
	}
	return upc
}

// SetLanguage sets the "language" field.
func (upc *UserProfileCreate) SetLanguage(s string) *UserProfileCreate {
	upc.mutation.SetLanguage(s)
	return upc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableLanguage(s *string) *UserProfileCreate {
	if s != nil {
		upc.SetLanguage(*s)
	}
	return upc
}

// SetGender sets the "gender" field.
func (upc *UserProfileCreate) SetGender(u userprofile.Gender) *UserProfileCreate {
	upc.mutation.SetGender(u)
	return upc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableGender(u *userprofile.Gender) *UserProfileCreate {
	if u != nil {
		upc.SetGender(*u)
	}
	return upc
}

// SetProfileVisibility sets the "profile_visibility" field.
func (upc *UserProfileCreate) SetProfileVisibility(uv userprofile.ProfileVisibility) *UserProfileCreate {
	upc.mutation.SetProfileVisibility(uv)
	return upc
}

// SetNillableProfileVisibility sets the "profile_visibility" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableProfileVisibility(uv *userprofile.ProfileVisibility) *UserProfileCreate {
	if uv != nil {
		upc.SetProfileVisibility(*uv)
	}
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserProfileCreate) SetCreatedAt(t time.Time) *UserProfileCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableCreatedAt(t *time.Time) *UserProfileCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserProfileCreate) SetUpdatedAt(t time.Time) *UserProfileCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableUpdatedAt(t *time.Time) *UserProfileCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserProfileCreate) SetID(s string) *UserProfileCreate {
	upc.mutation.SetID(s)
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserProfileCreate) SetUser(u *User) *UserProfileCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upc *UserProfileCreate) Mutation() *UserProfileMutation {
	return upc.mutation
}

// Save creates the UserProfile in the database.
func (upc *UserProfileCreate) Save(ctx context.Context) (*UserProfile, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserProfileCreate) SaveX(ctx context.Context) *UserProfile {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserProfileCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserProfileCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserProfileCreate) check() error {
	if v, ok := upc.mutation.Gender(); ok {
		if err := userprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "UserProfile.gender": %w`, err)}
		}
	}
	if v, ok := upc.mutation.ProfileVisibility(); ok {
		if err := userprofile.ProfileVisibilityValidator(v); err != nil {
			return &ValidationError{Name: "profile_visibility", err: fmt.Errorf(`ent: validator failed for field "UserProfile.profile_visibility": %w`, err)}
		}
	}
	return nil
}

func (upc *UserProfileCreate) sqlSave(ctx context.Context) (*UserProfile, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserProfile.ID type: %T", _spec.ID.Value)
		}
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserProfileCreate) createSpec() (*UserProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProfile{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userprofile.Table, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString))
	)
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.Bio(); ok {
		_spec.SetField(userprofile.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := upc.mutation.Website(); ok {
		_spec.SetField(userprofile.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := upc.mutation.Location(); ok {
		_spec.SetField(userprofile.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := upc.mutation.Timezone(); ok {
		_spec.SetField(userprofile.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := upc.mutation.Language(); ok {
		_spec.SetField(userprofile.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := upc.mutation.Gender(); ok {
		_spec.SetField(userprofile.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := upc.mutation.ProfileVisibility(); ok {
		_spec.SetField(userprofile.FieldProfileVisibility, field.TypeEnum, value)
		_node.ProfileVisibility = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserProfileCreateBulk is the builder for creating many UserProfile entities in bulk.
type UserProfileCreateBulk struct {
	config
	err      error
	builders []*UserProfileCreate
}

// Save creates the UserProfile entities in the database.
func (upcb *UserProfileCreateBulk) Save(ctx context.Context) ([]*UserProfile, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserProfile, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) SaveX(ctx context.Context) []*UserProfile {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
