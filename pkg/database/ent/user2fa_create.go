// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
	"context"
	"encoding/json"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// User2faCreate is the builder for creating a User2fa entity.
type User2faCreate struct {
	config
	mutation *User2faMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uc *User2faCreate) SetUserID(s string) *User2faCreate {
	uc.mutation.SetUserID(s)
	return uc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uc *User2faCreate) SetNillableUserID(s *string) *User2faCreate {
	if s != nil {
		uc.SetUserID(*s)
	}
	return uc
}

// SetIsEnabled sets the "is_enabled" field.
func (uc *User2faCreate) SetIsEnabled(b bool) *User2faCreate {
	uc.mutation.SetIsEnabled(b)
	return uc
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (uc *User2faCreate) SetNillableIsEnabled(b *bool) *User2faCreate {
	if b != nil {
		uc.SetIsEnabled(*b)
	}
	return uc
}

// SetSecretKey sets the "secret_key" field.
func (uc *User2faCreate) SetSecretKey(s string) *User2faCreate {
	uc.mutation.SetSecretKey(s)
	return uc
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (uc *User2faCreate) SetNillableSecretKey(s *string) *User2faCreate {
	if s != nil {
		uc.SetSecretKey(*s)
	}
	return uc
}

// SetBackupCodes sets the "backup_codes" field.
func (uc *User2faCreate) SetBackupCodes(jm json.RawMessage) *User2faCreate {
	uc.mutation.SetBackupCodes(jm)
	return uc
}

// SetMethod sets the "method" field.
func (uc *User2faCreate) SetMethod(u user2fa.Method) *User2faCreate {
	uc.mutation.SetMethod(u)
	return uc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (uc *User2faCreate) SetNillableMethod(u *user2fa.Method) *User2faCreate {
	if u != nil {
		uc.SetMethod(*u)
	}
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *User2faCreate) SetPhoneNumber(s string) *User2faCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *User2faCreate) SetNillablePhoneNumber(s *string) *User2faCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetEmailAddress sets the "email_address" field.
func (uc *User2faCreate) SetEmailAddress(s string) *User2faCreate {
	uc.mutation.SetEmailAddress(s)
	return uc
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uc *User2faCreate) SetNillableEmailAddress(s *string) *User2faCreate {
	if s != nil {
		uc.SetEmailAddress(*s)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *User2faCreate) SetCreatedAt(t time.Time) *User2faCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *User2faCreate) SetNillableCreatedAt(t *time.Time) *User2faCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *User2faCreate) SetUpdatedAt(t time.Time) *User2faCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *User2faCreate) SetNillableUpdatedAt(t *time.Time) *User2faCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *User2faCreate) SetID(s string) *User2faCreate {
	uc.mutation.SetID(s)
	return uc
}

// SetUser sets the "user" edge to the User entity.
func (uc *User2faCreate) SetUser(u *User) *User2faCreate {
	return uc.SetUserID(u.ID)
}

// Mutation returns the User2faMutation object of the builder.
func (uc *User2faCreate) Mutation() *User2faMutation {
	return uc.mutation
}

// Save creates the User2fa in the database.
func (uc *User2faCreate) Save(ctx context.Context) (*User2fa, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *User2faCreate) SaveX(ctx context.Context) *User2fa {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *User2faCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *User2faCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *User2faCreate) check() error {
	if v, ok := uc.mutation.Method(); ok {
		if err := user2fa.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "User2fa.method": %w`, err)}
		}
	}
	return nil
}

func (uc *User2faCreate) sqlSave(ctx context.Context) (*User2fa, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User2fa.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *User2faCreate) createSpec() (*User2fa, *sqlgraph.CreateSpec) {
	var (
		_node = &User2fa{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user2fa.Table, sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.IsEnabled(); ok {
		_spec.SetField(user2fa.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := uc.mutation.SecretKey(); ok {
		_spec.SetField(user2fa.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = value
	}
	if value, ok := uc.mutation.BackupCodes(); ok {
		_spec.SetField(user2fa.FieldBackupCodes, field.TypeJSON, value)
		_node.BackupCodes = value
	}
	if value, ok := uc.mutation.Method(); ok {
		_spec.SetField(user2fa.FieldMethod, field.TypeEnum, value)
		_node.Method = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user2fa.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.EmailAddress(); ok {
		_spec.SetField(user2fa.FieldEmailAddress, field.TypeString, value)
		_node.EmailAddress = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user2fa.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user2fa.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user2fa.UserTable,
			Columns: []string{user2fa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// User2faCreateBulk is the builder for creating many User2fa entities in bulk.
type User2faCreateBulk struct {
	config
	err      error
	builders []*User2faCreate
}

// Save creates the User2fa entities in the database.
func (ucb *User2faCreateBulk) Save(ctx context.Context) ([]*User2fa, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User2fa, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*User2faMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *User2faCreateBulk) SaveX(ctx context.Context) []*User2fa {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *User2faCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *User2faCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
