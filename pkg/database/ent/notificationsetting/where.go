// Code generated by ent, DO NOT EDIT.

package notificationsetting

import (
	"app/pkg/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUserID, v))
}

// EmailNotifications applies equality check predicate on the "email_notifications" field. It's identical to EmailNotificationsEQ.
func EmailNotifications(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldEmailNotifications, v))
}

// SmsNotifications applies equality check predicate on the "sms_notifications" field. It's identical to SmsNotificationsEQ.
func SmsNotifications(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldSmsNotifications, v))
}

// PushNotifications applies equality check predicate on the "push_notifications" field. It's identical to PushNotificationsEQ.
func PushNotifications(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldPushNotifications, v))
}

// MarketingEmails applies equality check predicate on the "marketing_emails" field. It's identical to MarketingEmailsEQ.
func MarketingEmails(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldMarketingEmails, v))
}

// SecurityAlerts applies equality check predicate on the "security_alerts" field. It's identical to SecurityAlertsEQ.
func SecurityAlerts(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldSecurityAlerts, v))
}

// LoginAlerts applies equality check predicate on the "login_alerts" field. It's identical to LoginAlertsEQ.
func LoginAlerts(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldLoginAlerts, v))
}

// ProfileUpdates applies equality check predicate on the "profile_updates" field. It's identical to ProfileUpdatesEQ.
func ProfileUpdates(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldProfileUpdates, v))
}

// PaymentNotifications applies equality check predicate on the "payment_notifications" field. It's identical to PaymentNotificationsEQ.
func PaymentNotifications(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldPaymentNotifications, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldContainsFold(FieldUserID, v))
}

// EmailNotificationsEQ applies the EQ predicate on the "email_notifications" field.
func EmailNotificationsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldEmailNotifications, v))
}

// EmailNotificationsNEQ applies the NEQ predicate on the "email_notifications" field.
func EmailNotificationsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldEmailNotifications, v))
}

// EmailNotificationsIsNil applies the IsNil predicate on the "email_notifications" field.
func EmailNotificationsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldEmailNotifications))
}

// EmailNotificationsNotNil applies the NotNil predicate on the "email_notifications" field.
func EmailNotificationsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldEmailNotifications))
}

// SmsNotificationsEQ applies the EQ predicate on the "sms_notifications" field.
func SmsNotificationsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldSmsNotifications, v))
}

// SmsNotificationsNEQ applies the NEQ predicate on the "sms_notifications" field.
func SmsNotificationsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldSmsNotifications, v))
}

// SmsNotificationsIsNil applies the IsNil predicate on the "sms_notifications" field.
func SmsNotificationsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldSmsNotifications))
}

// SmsNotificationsNotNil applies the NotNil predicate on the "sms_notifications" field.
func SmsNotificationsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldSmsNotifications))
}

// PushNotificationsEQ applies the EQ predicate on the "push_notifications" field.
func PushNotificationsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldPushNotifications, v))
}

// PushNotificationsNEQ applies the NEQ predicate on the "push_notifications" field.
func PushNotificationsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldPushNotifications, v))
}

// PushNotificationsIsNil applies the IsNil predicate on the "push_notifications" field.
func PushNotificationsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldPushNotifications))
}

// PushNotificationsNotNil applies the NotNil predicate on the "push_notifications" field.
func PushNotificationsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldPushNotifications))
}

// MarketingEmailsEQ applies the EQ predicate on the "marketing_emails" field.
func MarketingEmailsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldMarketingEmails, v))
}

// MarketingEmailsNEQ applies the NEQ predicate on the "marketing_emails" field.
func MarketingEmailsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldMarketingEmails, v))
}

// MarketingEmailsIsNil applies the IsNil predicate on the "marketing_emails" field.
func MarketingEmailsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldMarketingEmails))
}

// MarketingEmailsNotNil applies the NotNil predicate on the "marketing_emails" field.
func MarketingEmailsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldMarketingEmails))
}

// SecurityAlertsEQ applies the EQ predicate on the "security_alerts" field.
func SecurityAlertsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldSecurityAlerts, v))
}

// SecurityAlertsNEQ applies the NEQ predicate on the "security_alerts" field.
func SecurityAlertsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldSecurityAlerts, v))
}

// SecurityAlertsIsNil applies the IsNil predicate on the "security_alerts" field.
func SecurityAlertsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldSecurityAlerts))
}

// SecurityAlertsNotNil applies the NotNil predicate on the "security_alerts" field.
func SecurityAlertsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldSecurityAlerts))
}

// LoginAlertsEQ applies the EQ predicate on the "login_alerts" field.
func LoginAlertsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldLoginAlerts, v))
}

// LoginAlertsNEQ applies the NEQ predicate on the "login_alerts" field.
func LoginAlertsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldLoginAlerts, v))
}

// LoginAlertsIsNil applies the IsNil predicate on the "login_alerts" field.
func LoginAlertsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldLoginAlerts))
}

// LoginAlertsNotNil applies the NotNil predicate on the "login_alerts" field.
func LoginAlertsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldLoginAlerts))
}

// ProfileUpdatesEQ applies the EQ predicate on the "profile_updates" field.
func ProfileUpdatesEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldProfileUpdates, v))
}

// ProfileUpdatesNEQ applies the NEQ predicate on the "profile_updates" field.
func ProfileUpdatesNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldProfileUpdates, v))
}

// ProfileUpdatesIsNil applies the IsNil predicate on the "profile_updates" field.
func ProfileUpdatesIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldProfileUpdates))
}

// ProfileUpdatesNotNil applies the NotNil predicate on the "profile_updates" field.
func ProfileUpdatesNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldProfileUpdates))
}

// PaymentNotificationsEQ applies the EQ predicate on the "payment_notifications" field.
func PaymentNotificationsEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldPaymentNotifications, v))
}

// PaymentNotificationsNEQ applies the NEQ predicate on the "payment_notifications" field.
func PaymentNotificationsNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldPaymentNotifications, v))
}

// PaymentNotificationsIsNil applies the IsNil predicate on the "payment_notifications" field.
func PaymentNotificationsIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldPaymentNotifications))
}

// PaymentNotificationsNotNil applies the NotNil predicate on the "payment_notifications" field.
func PaymentNotificationsNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldPaymentNotifications))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NotificationSetting {
	return predicate.NotificationSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.NotificationSetting {
	return predicate.NotificationSetting(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.NotPredicates(p))
}
