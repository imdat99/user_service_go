// Code generated by ent, DO NOT EDIT.

package notificationsetting

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notificationsetting type in the database.
	Label = "notification_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldEmailNotifications holds the string denoting the email_notifications field in the database.
	FieldEmailNotifications = "email_notifications"
	// FieldSmsNotifications holds the string denoting the sms_notifications field in the database.
	FieldSmsNotifications = "sms_notifications"
	// FieldPushNotifications holds the string denoting the push_notifications field in the database.
	FieldPushNotifications = "push_notifications"
	// FieldMarketingEmails holds the string denoting the marketing_emails field in the database.
	FieldMarketingEmails = "marketing_emails"
	// FieldSecurityAlerts holds the string denoting the security_alerts field in the database.
	FieldSecurityAlerts = "security_alerts"
	// FieldLoginAlerts holds the string denoting the login_alerts field in the database.
	FieldLoginAlerts = "login_alerts"
	// FieldProfileUpdates holds the string denoting the profile_updates field in the database.
	FieldProfileUpdates = "profile_updates"
	// FieldPaymentNotifications holds the string denoting the payment_notifications field in the database.
	FieldPaymentNotifications = "payment_notifications"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the notificationsetting in the database.
	Table = "notification_settings"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "notification_settings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for notificationsetting fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldEmailNotifications,
	FieldSmsNotifications,
	FieldPushNotifications,
	FieldMarketingEmails,
	FieldSecurityAlerts,
	FieldLoginAlerts,
	FieldProfileUpdates,
	FieldPaymentNotifications,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "app/pkg/database/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// OrderOption defines the ordering options for the NotificationSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByEmailNotifications orders the results by the email_notifications field.
func ByEmailNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailNotifications, opts...).ToFunc()
}

// BySmsNotifications orders the results by the sms_notifications field.
func BySmsNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsNotifications, opts...).ToFunc()
}

// ByPushNotifications orders the results by the push_notifications field.
func ByPushNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushNotifications, opts...).ToFunc()
}

// ByMarketingEmails orders the results by the marketing_emails field.
func ByMarketingEmails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketingEmails, opts...).ToFunc()
}

// BySecurityAlerts orders the results by the security_alerts field.
func BySecurityAlerts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityAlerts, opts...).ToFunc()
}

// ByLoginAlerts orders the results by the login_alerts field.
func ByLoginAlerts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginAlerts, opts...).ToFunc()
}

// ByProfileUpdates orders the results by the profile_updates field.
func ByProfileUpdates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileUpdates, opts...).ToFunc()
}

// ByPaymentNotifications orders the results by the payment_notifications field.
func ByPaymentNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentNotifications, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
