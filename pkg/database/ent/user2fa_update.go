// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/predicate"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
	"github.com/imdat99/user_service_go/pkg/database/ent/user2fa"
)

// User2faUpdate is the builder for updating User2fa entities.
type User2faUpdate struct {
	config
	hooks    []Hook
	mutation *User2faMutation
}

// Where appends a list predicates to the User2faUpdate builder.
func (uu *User2faUpdate) Where(ps ...predicate.User2fa) *User2faUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserID sets the "user_id" field.
func (uu *User2faUpdate) SetUserID(s string) *User2faUpdate {
	uu.mutation.SetUserID(s)
	return uu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableUserID(s *string) *User2faUpdate {
	if s != nil {
		uu.SetUserID(*s)
	}
	return uu
}

// ClearUserID clears the value of the "user_id" field.
func (uu *User2faUpdate) ClearUserID() *User2faUpdate {
	uu.mutation.ClearUserID()
	return uu
}

// SetIsEnabled sets the "is_enabled" field.
func (uu *User2faUpdate) SetIsEnabled(b bool) *User2faUpdate {
	uu.mutation.SetIsEnabled(b)
	return uu
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableIsEnabled(b *bool) *User2faUpdate {
	if b != nil {
		uu.SetIsEnabled(*b)
	}
	return uu
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (uu *User2faUpdate) ClearIsEnabled() *User2faUpdate {
	uu.mutation.ClearIsEnabled()
	return uu
}

// SetSecretKey sets the "secret_key" field.
func (uu *User2faUpdate) SetSecretKey(s string) *User2faUpdate {
	uu.mutation.SetSecretKey(s)
	return uu
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableSecretKey(s *string) *User2faUpdate {
	if s != nil {
		uu.SetSecretKey(*s)
	}
	return uu
}

// ClearSecretKey clears the value of the "secret_key" field.
func (uu *User2faUpdate) ClearSecretKey() *User2faUpdate {
	uu.mutation.ClearSecretKey()
	return uu
}

// SetBackupCodes sets the "backup_codes" field.
func (uu *User2faUpdate) SetBackupCodes(jm json.RawMessage) *User2faUpdate {
	uu.mutation.SetBackupCodes(jm)
	return uu
}

// AppendBackupCodes appends jm to the "backup_codes" field.
func (uu *User2faUpdate) AppendBackupCodes(jm json.RawMessage) *User2faUpdate {
	uu.mutation.AppendBackupCodes(jm)
	return uu
}

// ClearBackupCodes clears the value of the "backup_codes" field.
func (uu *User2faUpdate) ClearBackupCodes() *User2faUpdate {
	uu.mutation.ClearBackupCodes()
	return uu
}

// SetMethod sets the "method" field.
func (uu *User2faUpdate) SetMethod(u user2fa.Method) *User2faUpdate {
	uu.mutation.SetMethod(u)
	return uu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableMethod(u *user2fa.Method) *User2faUpdate {
	if u != nil {
		uu.SetMethod(*u)
	}
	return uu
}

// ClearMethod clears the value of the "method" field.
func (uu *User2faUpdate) ClearMethod() *User2faUpdate {
	uu.mutation.ClearMethod()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *User2faUpdate) SetPhoneNumber(s string) *User2faUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *User2faUpdate) SetNillablePhoneNumber(s *string) *User2faUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *User2faUpdate) ClearPhoneNumber() *User2faUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetEmailAddress sets the "email_address" field.
func (uu *User2faUpdate) SetEmailAddress(s string) *User2faUpdate {
	uu.mutation.SetEmailAddress(s)
	return uu
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableEmailAddress(s *string) *User2faUpdate {
	if s != nil {
		uu.SetEmailAddress(*s)
	}
	return uu
}

// ClearEmailAddress clears the value of the "email_address" field.
func (uu *User2faUpdate) ClearEmailAddress() *User2faUpdate {
	uu.mutation.ClearEmailAddress()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *User2faUpdate) SetCreatedAt(t time.Time) *User2faUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableCreatedAt(t *time.Time) *User2faUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *User2faUpdate) ClearCreatedAt() *User2faUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *User2faUpdate) SetUpdatedAt(t time.Time) *User2faUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *User2faUpdate) SetNillableUpdatedAt(t *time.Time) *User2faUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *User2faUpdate) ClearUpdatedAt() *User2faUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetUser sets the "user" edge to the User entity.
func (uu *User2faUpdate) SetUser(u *User) *User2faUpdate {
	return uu.SetUserID(u.ID)
}

// Mutation returns the User2faMutation object of the builder.
func (uu *User2faUpdate) Mutation() *User2faMutation {
	return uu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uu *User2faUpdate) ClearUser() *User2faUpdate {
	uu.mutation.ClearUser()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *User2faUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *User2faUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *User2faUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *User2faUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *User2faUpdate) check() error {
	if v, ok := uu.mutation.Method(); ok {
		if err := user2fa.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "User2fa.method": %w`, err)}
		}
	}
	return nil
}

func (uu *User2faUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user2fa.Table, user2fa.Columns, sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IsEnabled(); ok {
		_spec.SetField(user2fa.FieldIsEnabled, field.TypeBool, value)
	}
	if uu.mutation.IsEnabledCleared() {
		_spec.ClearField(user2fa.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := uu.mutation.SecretKey(); ok {
		_spec.SetField(user2fa.FieldSecretKey, field.TypeString, value)
	}
	if uu.mutation.SecretKeyCleared() {
		_spec.ClearField(user2fa.FieldSecretKey, field.TypeString)
	}
	if value, ok := uu.mutation.BackupCodes(); ok {
		_spec.SetField(user2fa.FieldBackupCodes, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedBackupCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user2fa.FieldBackupCodes, value)
		})
	}
	if uu.mutation.BackupCodesCleared() {
		_spec.ClearField(user2fa.FieldBackupCodes, field.TypeJSON)
	}
	if value, ok := uu.mutation.Method(); ok {
		_spec.SetField(user2fa.FieldMethod, field.TypeEnum, value)
	}
	if uu.mutation.MethodCleared() {
		_spec.ClearField(user2fa.FieldMethod, field.TypeEnum)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user2fa.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user2fa.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.EmailAddress(); ok {
		_spec.SetField(user2fa.FieldEmailAddress, field.TypeString, value)
	}
	if uu.mutation.EmailAddressCleared() {
		_spec.ClearField(user2fa.FieldEmailAddress, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user2fa.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user2fa.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user2fa.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user2fa.FieldUpdatedAt, field.TypeTime)
	}
	if uu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user2fa.UserTable,
			Columns: []string{user2fa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user2fa.UserTable,
			Columns: []string{user2fa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user2fa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// User2faUpdateOne is the builder for updating a single User2fa entity.
type User2faUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *User2faMutation
}

// SetUserID sets the "user_id" field.
func (uuo *User2faUpdateOne) SetUserID(s string) *User2faUpdateOne {
	uuo.mutation.SetUserID(s)
	return uuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableUserID(s *string) *User2faUpdateOne {
	if s != nil {
		uuo.SetUserID(*s)
	}
	return uuo
}

// ClearUserID clears the value of the "user_id" field.
func (uuo *User2faUpdateOne) ClearUserID() *User2faUpdateOne {
	uuo.mutation.ClearUserID()
	return uuo
}

// SetIsEnabled sets the "is_enabled" field.
func (uuo *User2faUpdateOne) SetIsEnabled(b bool) *User2faUpdateOne {
	uuo.mutation.SetIsEnabled(b)
	return uuo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableIsEnabled(b *bool) *User2faUpdateOne {
	if b != nil {
		uuo.SetIsEnabled(*b)
	}
	return uuo
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (uuo *User2faUpdateOne) ClearIsEnabled() *User2faUpdateOne {
	uuo.mutation.ClearIsEnabled()
	return uuo
}

// SetSecretKey sets the "secret_key" field.
func (uuo *User2faUpdateOne) SetSecretKey(s string) *User2faUpdateOne {
	uuo.mutation.SetSecretKey(s)
	return uuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableSecretKey(s *string) *User2faUpdateOne {
	if s != nil {
		uuo.SetSecretKey(*s)
	}
	return uuo
}

// ClearSecretKey clears the value of the "secret_key" field.
func (uuo *User2faUpdateOne) ClearSecretKey() *User2faUpdateOne {
	uuo.mutation.ClearSecretKey()
	return uuo
}

// SetBackupCodes sets the "backup_codes" field.
func (uuo *User2faUpdateOne) SetBackupCodes(jm json.RawMessage) *User2faUpdateOne {
	uuo.mutation.SetBackupCodes(jm)
	return uuo
}

// AppendBackupCodes appends jm to the "backup_codes" field.
func (uuo *User2faUpdateOne) AppendBackupCodes(jm json.RawMessage) *User2faUpdateOne {
	uuo.mutation.AppendBackupCodes(jm)
	return uuo
}

// ClearBackupCodes clears the value of the "backup_codes" field.
func (uuo *User2faUpdateOne) ClearBackupCodes() *User2faUpdateOne {
	uuo.mutation.ClearBackupCodes()
	return uuo
}

// SetMethod sets the "method" field.
func (uuo *User2faUpdateOne) SetMethod(u user2fa.Method) *User2faUpdateOne {
	uuo.mutation.SetMethod(u)
	return uuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableMethod(u *user2fa.Method) *User2faUpdateOne {
	if u != nil {
		uuo.SetMethod(*u)
	}
	return uuo
}

// ClearMethod clears the value of the "method" field.
func (uuo *User2faUpdateOne) ClearMethod() *User2faUpdateOne {
	uuo.mutation.ClearMethod()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *User2faUpdateOne) SetPhoneNumber(s string) *User2faUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillablePhoneNumber(s *string) *User2faUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *User2faUpdateOne) ClearPhoneNumber() *User2faUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetEmailAddress sets the "email_address" field.
func (uuo *User2faUpdateOne) SetEmailAddress(s string) *User2faUpdateOne {
	uuo.mutation.SetEmailAddress(s)
	return uuo
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableEmailAddress(s *string) *User2faUpdateOne {
	if s != nil {
		uuo.SetEmailAddress(*s)
	}
	return uuo
}

// ClearEmailAddress clears the value of the "email_address" field.
func (uuo *User2faUpdateOne) ClearEmailAddress() *User2faUpdateOne {
	uuo.mutation.ClearEmailAddress()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *User2faUpdateOne) SetCreatedAt(t time.Time) *User2faUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableCreatedAt(t *time.Time) *User2faUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *User2faUpdateOne) ClearCreatedAt() *User2faUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *User2faUpdateOne) SetUpdatedAt(t time.Time) *User2faUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *User2faUpdateOne) SetNillableUpdatedAt(t *time.Time) *User2faUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *User2faUpdateOne) ClearUpdatedAt() *User2faUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetUser sets the "user" edge to the User entity.
func (uuo *User2faUpdateOne) SetUser(u *User) *User2faUpdateOne {
	return uuo.SetUserID(u.ID)
}

// Mutation returns the User2faMutation object of the builder.
func (uuo *User2faUpdateOne) Mutation() *User2faMutation {
	return uuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uuo *User2faUpdateOne) ClearUser() *User2faUpdateOne {
	uuo.mutation.ClearUser()
	return uuo
}

// Where appends a list predicates to the User2faUpdate builder.
func (uuo *User2faUpdateOne) Where(ps ...predicate.User2fa) *User2faUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *User2faUpdateOne) Select(field string, fields ...string) *User2faUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User2fa entity.
func (uuo *User2faUpdateOne) Save(ctx context.Context) (*User2fa, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *User2faUpdateOne) SaveX(ctx context.Context) *User2fa {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *User2faUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *User2faUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *User2faUpdateOne) check() error {
	if v, ok := uuo.mutation.Method(); ok {
		if err := user2fa.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "User2fa.method": %w`, err)}
		}
	}
	return nil
}

func (uuo *User2faUpdateOne) sqlSave(ctx context.Context) (_node *User2fa, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user2fa.Table, user2fa.Columns, sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User2fa.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user2fa.FieldID)
		for _, f := range fields {
			if !user2fa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user2fa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.IsEnabled(); ok {
		_spec.SetField(user2fa.FieldIsEnabled, field.TypeBool, value)
	}
	if uuo.mutation.IsEnabledCleared() {
		_spec.ClearField(user2fa.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := uuo.mutation.SecretKey(); ok {
		_spec.SetField(user2fa.FieldSecretKey, field.TypeString, value)
	}
	if uuo.mutation.SecretKeyCleared() {
		_spec.ClearField(user2fa.FieldSecretKey, field.TypeString)
	}
	if value, ok := uuo.mutation.BackupCodes(); ok {
		_spec.SetField(user2fa.FieldBackupCodes, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedBackupCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user2fa.FieldBackupCodes, value)
		})
	}
	if uuo.mutation.BackupCodesCleared() {
		_spec.ClearField(user2fa.FieldBackupCodes, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Method(); ok {
		_spec.SetField(user2fa.FieldMethod, field.TypeEnum, value)
	}
	if uuo.mutation.MethodCleared() {
		_spec.ClearField(user2fa.FieldMethod, field.TypeEnum)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user2fa.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user2fa.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailAddress(); ok {
		_spec.SetField(user2fa.FieldEmailAddress, field.TypeString, value)
	}
	if uuo.mutation.EmailAddressCleared() {
		_spec.ClearField(user2fa.FieldEmailAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user2fa.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user2fa.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user2fa.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user2fa.FieldUpdatedAt, field.TypeTime)
	}
	if uuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user2fa.UserTable,
			Columns: []string{user2fa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user2fa.UserTable,
			Columns: []string{user2fa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User2fa{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user2fa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
