// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// PaymentMethodID holds the value of the "payment_method_id" field.
	PaymentMethodID string `json:"payment_method_id,omitempty"`
	// TransactionType holds the value of the "transaction_type" field.
	TransactionType transaction.TransactionType `json:"transaction_type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Status holds the value of the "status" field.
	Status transaction.Status `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalTransactionID holds the value of the "external_transaction_id" field.
	ExternalTransactionID string `json:"external_transaction_id,omitempty"`
	// ReferenceNumber holds the value of the "reference_number" field.
	ReferenceNumber string `json:"reference_number,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata json.RawMessage `json:"metadata,omitempty"`
	// ProcessedAt holds the value of the "processed_at" field.
	ProcessedAt time.Time `json:"processed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges        TransactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// PaymentMethod holds the value of the payment_method edge.
	PaymentMethod *PaymentMethod `json:"payment_method,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PaymentMethodOrErr returns the PaymentMethod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) PaymentMethodOrErr() (*PaymentMethod, error) {
	if e.PaymentMethod != nil {
		return e.PaymentMethod, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: paymentmethod.Label}
	}
	return nil, &NotLoadedError{edge: "payment_method"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldMetadata:
			values[i] = new([]byte)
		case transaction.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID, transaction.FieldUserID, transaction.FieldPaymentMethodID, transaction.FieldTransactionType, transaction.FieldCurrency, transaction.FieldStatus, transaction.FieldDescription, transaction.FieldExternalTransactionID, transaction.FieldReferenceNumber:
			values[i] = new(sql.NullString)
		case transaction.FieldProcessedAt, transaction.FieldCreatedAt, transaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case transaction.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = value.String
			}
		case transaction.FieldPaymentMethodID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_id", values[i])
			} else if value.Valid {
				t.PaymentMethodID = value.String
			}
		case transaction.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
				t.TransactionType = transaction.TransactionType(value.String)
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transaction.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				t.Currency = value.String
			}
		case transaction.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = transaction.Status(value.String)
			}
		case transaction.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case transaction.FieldExternalTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_transaction_id", values[i])
			} else if value.Valid {
				t.ExternalTransactionID = value.String
			}
		case transaction.FieldReferenceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_number", values[i])
			} else if value.Valid {
				t.ReferenceNumber = value.String
			}
		case transaction.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case transaction.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				t.ProcessedAt = value.Time
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Transaction entity.
func (t *Transaction) QueryUser() *UserQuery {
	return NewTransactionClient(t.config).QueryUser(t)
}

// QueryPaymentMethod queries the "payment_method" edge of the Transaction entity.
func (t *Transaction) QueryPaymentMethod() *PaymentMethodQuery {
	return NewTransactionClient(t.config).QueryPaymentMethod(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("user_id=")
	builder.WriteString(t.UserID)
	builder.WriteString(", ")
	builder.WriteString("payment_method_id=")
	builder.WriteString(t.PaymentMethodID)
	builder.WriteString(", ")
	builder.WriteString("transaction_type=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionType))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(t.Currency)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("external_transaction_id=")
	builder.WriteString(t.ExternalTransactionID)
	builder.WriteString(", ")
	builder.WriteString("reference_number=")
	builder.WriteString(t.ReferenceNumber)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", t.Metadata))
	builder.WriteString(", ")
	builder.WriteString("processed_at=")
	builder.WriteString(t.ProcessedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
