// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/imdat99/user_service_go/pkg/database/ent/privacysetting"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// PrivacySetting is the model entity for the PrivacySetting schema.
type PrivacySetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ProfileVisibility holds the value of the "profile_visibility" field.
	ProfileVisibility privacysetting.ProfileVisibility `json:"profile_visibility,omitempty"`
	// ShowEmail holds the value of the "show_email" field.
	ShowEmail bool `json:"show_email,omitempty"`
	// ShowPhone holds the value of the "show_phone" field.
	ShowPhone bool `json:"show_phone,omitempty"`
	// ShowBirthDate holds the value of the "show_birth_date" field.
	ShowBirthDate bool `json:"show_birth_date,omitempty"`
	// AllowSearchEngines holds the value of the "allow_search_engines" field.
	AllowSearchEngines bool `json:"allow_search_engines,omitempty"`
	// DataSharingConsent holds the value of the "data_sharing_consent" field.
	DataSharingConsent bool `json:"data_sharing_consent,omitempty"`
	// AnalyticsConsent holds the value of the "analytics_consent" field.
	AnalyticsConsent bool `json:"analytics_consent,omitempty"`
	// MarketingConsent holds the value of the "marketing_consent" field.
	MarketingConsent bool `json:"marketing_consent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivacySettingQuery when eager-loading is set.
	Edges        PrivacySettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PrivacySettingEdges holds the relations/edges for other nodes in the graph.
type PrivacySettingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivacySettingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivacySetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case privacysetting.FieldShowEmail, privacysetting.FieldShowPhone, privacysetting.FieldShowBirthDate, privacysetting.FieldAllowSearchEngines, privacysetting.FieldDataSharingConsent, privacysetting.FieldAnalyticsConsent, privacysetting.FieldMarketingConsent:
			values[i] = new(sql.NullBool)
		case privacysetting.FieldID, privacysetting.FieldUserID, privacysetting.FieldProfileVisibility:
			values[i] = new(sql.NullString)
		case privacysetting.FieldCreatedAt, privacysetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivacySetting fields.
func (ps *PrivacySetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privacysetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ps.ID = value.String
			}
		case privacysetting.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ps.UserID = value.String
			}
		case privacysetting.FieldProfileVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_visibility", values[i])
			} else if value.Valid {
				ps.ProfileVisibility = privacysetting.ProfileVisibility(value.String)
			}
		case privacysetting.FieldShowEmail:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_email", values[i])
			} else if value.Valid {
				ps.ShowEmail = value.Bool
			}
		case privacysetting.FieldShowPhone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_phone", values[i])
			} else if value.Valid {
				ps.ShowPhone = value.Bool
			}
		case privacysetting.FieldShowBirthDate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_birth_date", values[i])
			} else if value.Valid {
				ps.ShowBirthDate = value.Bool
			}
		case privacysetting.FieldAllowSearchEngines:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_search_engines", values[i])
			} else if value.Valid {
				ps.AllowSearchEngines = value.Bool
			}
		case privacysetting.FieldDataSharingConsent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field data_sharing_consent", values[i])
			} else if value.Valid {
				ps.DataSharingConsent = value.Bool
			}
		case privacysetting.FieldAnalyticsConsent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field analytics_consent", values[i])
			} else if value.Valid {
				ps.AnalyticsConsent = value.Bool
			}
		case privacysetting.FieldMarketingConsent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field marketing_consent", values[i])
			} else if value.Valid {
				ps.MarketingConsent = value.Bool
			}
		case privacysetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case privacysetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrivacySetting.
// This includes values selected through modifiers, order, etc.
func (ps *PrivacySetting) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PrivacySetting entity.
func (ps *PrivacySetting) QueryUser() *UserQuery {
	return NewPrivacySettingClient(ps.config).QueryUser(ps)
}

// Update returns a builder for updating this PrivacySetting.
// Note that you need to call PrivacySetting.Unwrap() before calling this method if this PrivacySetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PrivacySetting) Update() *PrivacySettingUpdateOne {
	return NewPrivacySettingClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PrivacySetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PrivacySetting) Unwrap() *PrivacySetting {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivacySetting is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PrivacySetting) String() string {
	var builder strings.Builder
	builder.WriteString("PrivacySetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("user_id=")
	builder.WriteString(ps.UserID)
	builder.WriteString(", ")
	builder.WriteString("profile_visibility=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProfileVisibility))
	builder.WriteString(", ")
	builder.WriteString("show_email=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowEmail))
	builder.WriteString(", ")
	builder.WriteString("show_phone=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowPhone))
	builder.WriteString(", ")
	builder.WriteString("show_birth_date=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowBirthDate))
	builder.WriteString(", ")
	builder.WriteString("allow_search_engines=")
	builder.WriteString(fmt.Sprintf("%v", ps.AllowSearchEngines))
	builder.WriteString(", ")
	builder.WriteString("data_sharing_consent=")
	builder.WriteString(fmt.Sprintf("%v", ps.DataSharingConsent))
	builder.WriteString(", ")
	builder.WriteString("analytics_consent=")
	builder.WriteString(fmt.Sprintf("%v", ps.AnalyticsConsent))
	builder.WriteString(", ")
	builder.WriteString("marketing_consent=")
	builder.WriteString(fmt.Sprintf("%v", ps.MarketingConsent))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrivacySettings is a parsable slice of PrivacySetting.
type PrivacySettings []*PrivacySetting
