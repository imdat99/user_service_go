// Code generated by ent, DO NOT EDIT.

package paymentmethod

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentmethod type in the database.
	Label = "payment_method"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMethodType holds the string denoting the method_type field in the database.
	FieldMethodType = "method_type"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldMaskedNumber holds the string denoting the masked_number field in the database.
	FieldMaskedNumber = "masked_number"
	// FieldHolderName holds the string denoting the holder_name field in the database.
	FieldHolderName = "holder_name"
	// FieldExpiryMonth holds the string denoting the expiry_month field in the database.
	FieldExpiryMonth = "expiry_month"
	// FieldExpiryYear holds the string denoting the expiry_year field in the database.
	FieldExpiryYear = "expiry_year"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// Table holds the table name of the paymentmethod in the database.
	Table = "payment_methods"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "payment_methods"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "payment_method_id"
)

// Columns holds all SQL columns for paymentmethod fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldMethodType,
	FieldProvider,
	FieldMaskedNumber,
	FieldHolderName,
	FieldExpiryMonth,
	FieldExpiryYear,
	FieldIsDefault,
	FieldIsActive,
	FieldExternalID,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "app/pkg/database/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// MethodType defines the type for the "method_type" enum field.
type MethodType string

// MethodType values.
const (
	MethodTypeCreditCard    MethodType = "credit_card"
	MethodTypeDebitCard     MethodType = "debit_card"
	MethodTypePaypal        MethodType = "paypal"
	MethodTypeBankTransfer  MethodType = "bank_transfer"
	MethodTypeDigitalWallet MethodType = "digital_wallet"
)

func (mt MethodType) String() string {
	return string(mt)
}

// MethodTypeValidator is a validator for the "method_type" field enum values. It is called by the builders before save.
func MethodTypeValidator(mt MethodType) error {
	switch mt {
	case MethodTypeCreditCard, MethodTypeDebitCard, MethodTypePaypal, MethodTypeBankTransfer, MethodTypeDigitalWallet:
		return nil
	default:
		return fmt.Errorf("paymentmethod: invalid enum value for method_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the PaymentMethod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMethodType orders the results by the method_type field.
func ByMethodType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethodType, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByMaskedNumber orders the results by the masked_number field.
func ByMaskedNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaskedNumber, opts...).ToFunc()
}

// ByHolderName orders the results by the holder_name field.
func ByHolderName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHolderName, opts...).ToFunc()
}

// ByExpiryMonth orders the results by the expiry_month field.
func ByExpiryMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryMonth, opts...).ToFunc()
}

// ByExpiryYear orders the results by the expiry_year field.
func ByExpiryYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryYear, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
