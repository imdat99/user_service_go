// Code generated by ent, DO NOT EDIT.

package paymentmethod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"app/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUserID, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProvider, v))
}

// MaskedNumber applies equality check predicate on the "masked_number" field. It's identical to MaskedNumberEQ.
func MaskedNumber(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldMaskedNumber, v))
}

// HolderName applies equality check predicate on the "holder_name" field. It's identical to HolderNameEQ.
func HolderName(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldHolderName, v))
}

// ExpiryMonth applies equality check predicate on the "expiry_month" field. It's identical to ExpiryMonthEQ.
func ExpiryMonth(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpiryMonth, v))
}

// ExpiryYear applies equality check predicate on the "expiry_year" field. It's identical to ExpiryYearEQ.
func ExpiryYear(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpiryYear, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsDefault, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsActive, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExternalID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldUserID, v))
}

// MethodTypeEQ applies the EQ predicate on the "method_type" field.
func MethodTypeEQ(v MethodType) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldMethodType, v))
}

// MethodTypeNEQ applies the NEQ predicate on the "method_type" field.
func MethodTypeNEQ(v MethodType) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldMethodType, v))
}

// MethodTypeIn applies the In predicate on the "method_type" field.
func MethodTypeIn(vs ...MethodType) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldMethodType, vs...))
}

// MethodTypeNotIn applies the NotIn predicate on the "method_type" field.
func MethodTypeNotIn(vs ...MethodType) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldMethodType, vs...))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldProvider, v))
}

// MaskedNumberEQ applies the EQ predicate on the "masked_number" field.
func MaskedNumberEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldMaskedNumber, v))
}

// MaskedNumberNEQ applies the NEQ predicate on the "masked_number" field.
func MaskedNumberNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldMaskedNumber, v))
}

// MaskedNumberIn applies the In predicate on the "masked_number" field.
func MaskedNumberIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldMaskedNumber, vs...))
}

// MaskedNumberNotIn applies the NotIn predicate on the "masked_number" field.
func MaskedNumberNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldMaskedNumber, vs...))
}

// MaskedNumberGT applies the GT predicate on the "masked_number" field.
func MaskedNumberGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldMaskedNumber, v))
}

// MaskedNumberGTE applies the GTE predicate on the "masked_number" field.
func MaskedNumberGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldMaskedNumber, v))
}

// MaskedNumberLT applies the LT predicate on the "masked_number" field.
func MaskedNumberLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldMaskedNumber, v))
}

// MaskedNumberLTE applies the LTE predicate on the "masked_number" field.
func MaskedNumberLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldMaskedNumber, v))
}

// MaskedNumberContains applies the Contains predicate on the "masked_number" field.
func MaskedNumberContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldMaskedNumber, v))
}

// MaskedNumberHasPrefix applies the HasPrefix predicate on the "masked_number" field.
func MaskedNumberHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldMaskedNumber, v))
}

// MaskedNumberHasSuffix applies the HasSuffix predicate on the "masked_number" field.
func MaskedNumberHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldMaskedNumber, v))
}

// MaskedNumberIsNil applies the IsNil predicate on the "masked_number" field.
func MaskedNumberIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldMaskedNumber))
}

// MaskedNumberNotNil applies the NotNil predicate on the "masked_number" field.
func MaskedNumberNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldMaskedNumber))
}

// MaskedNumberEqualFold applies the EqualFold predicate on the "masked_number" field.
func MaskedNumberEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldMaskedNumber, v))
}

// MaskedNumberContainsFold applies the ContainsFold predicate on the "masked_number" field.
func MaskedNumberContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldMaskedNumber, v))
}

// HolderNameEQ applies the EQ predicate on the "holder_name" field.
func HolderNameEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldHolderName, v))
}

// HolderNameNEQ applies the NEQ predicate on the "holder_name" field.
func HolderNameNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldHolderName, v))
}

// HolderNameIn applies the In predicate on the "holder_name" field.
func HolderNameIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldHolderName, vs...))
}

// HolderNameNotIn applies the NotIn predicate on the "holder_name" field.
func HolderNameNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldHolderName, vs...))
}

// HolderNameGT applies the GT predicate on the "holder_name" field.
func HolderNameGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldHolderName, v))
}

// HolderNameGTE applies the GTE predicate on the "holder_name" field.
func HolderNameGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldHolderName, v))
}

// HolderNameLT applies the LT predicate on the "holder_name" field.
func HolderNameLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldHolderName, v))
}

// HolderNameLTE applies the LTE predicate on the "holder_name" field.
func HolderNameLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldHolderName, v))
}

// HolderNameContains applies the Contains predicate on the "holder_name" field.
func HolderNameContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldHolderName, v))
}

// HolderNameHasPrefix applies the HasPrefix predicate on the "holder_name" field.
func HolderNameHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldHolderName, v))
}

// HolderNameHasSuffix applies the HasSuffix predicate on the "holder_name" field.
func HolderNameHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldHolderName, v))
}

// HolderNameIsNil applies the IsNil predicate on the "holder_name" field.
func HolderNameIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldHolderName))
}

// HolderNameNotNil applies the NotNil predicate on the "holder_name" field.
func HolderNameNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldHolderName))
}

// HolderNameEqualFold applies the EqualFold predicate on the "holder_name" field.
func HolderNameEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldHolderName, v))
}

// HolderNameContainsFold applies the ContainsFold predicate on the "holder_name" field.
func HolderNameContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldHolderName, v))
}

// ExpiryMonthEQ applies the EQ predicate on the "expiry_month" field.
func ExpiryMonthEQ(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpiryMonth, v))
}

// ExpiryMonthNEQ applies the NEQ predicate on the "expiry_month" field.
func ExpiryMonthNEQ(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldExpiryMonth, v))
}

// ExpiryMonthIn applies the In predicate on the "expiry_month" field.
func ExpiryMonthIn(vs ...int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldExpiryMonth, vs...))
}

// ExpiryMonthNotIn applies the NotIn predicate on the "expiry_month" field.
func ExpiryMonthNotIn(vs ...int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldExpiryMonth, vs...))
}

// ExpiryMonthGT applies the GT predicate on the "expiry_month" field.
func ExpiryMonthGT(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldExpiryMonth, v))
}

// ExpiryMonthGTE applies the GTE predicate on the "expiry_month" field.
func ExpiryMonthGTE(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldExpiryMonth, v))
}

// ExpiryMonthLT applies the LT predicate on the "expiry_month" field.
func ExpiryMonthLT(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldExpiryMonth, v))
}

// ExpiryMonthLTE applies the LTE predicate on the "expiry_month" field.
func ExpiryMonthLTE(v int8) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldExpiryMonth, v))
}

// ExpiryMonthIsNil applies the IsNil predicate on the "expiry_month" field.
func ExpiryMonthIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldExpiryMonth))
}

// ExpiryMonthNotNil applies the NotNil predicate on the "expiry_month" field.
func ExpiryMonthNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldExpiryMonth))
}

// ExpiryYearEQ applies the EQ predicate on the "expiry_year" field.
func ExpiryYearEQ(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpiryYear, v))
}

// ExpiryYearNEQ applies the NEQ predicate on the "expiry_year" field.
func ExpiryYearNEQ(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldExpiryYear, v))
}

// ExpiryYearIn applies the In predicate on the "expiry_year" field.
func ExpiryYearIn(vs ...int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldExpiryYear, vs...))
}

// ExpiryYearNotIn applies the NotIn predicate on the "expiry_year" field.
func ExpiryYearNotIn(vs ...int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldExpiryYear, vs...))
}

// ExpiryYearGT applies the GT predicate on the "expiry_year" field.
func ExpiryYearGT(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldExpiryYear, v))
}

// ExpiryYearGTE applies the GTE predicate on the "expiry_year" field.
func ExpiryYearGTE(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldExpiryYear, v))
}

// ExpiryYearLT applies the LT predicate on the "expiry_year" field.
func ExpiryYearLT(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldExpiryYear, v))
}

// ExpiryYearLTE applies the LTE predicate on the "expiry_year" field.
func ExpiryYearLTE(v int16) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldExpiryYear, v))
}

// ExpiryYearIsNil applies the IsNil predicate on the "expiry_year" field.
func ExpiryYearIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldExpiryYear))
}

// ExpiryYearNotNil applies the NotNil predicate on the "expiry_year" field.
func ExpiryYearNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldExpiryYear))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldIsDefault, v))
}

// IsDefaultIsNil applies the IsNil predicate on the "is_default" field.
func IsDefaultIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldIsDefault))
}

// IsDefaultNotNil applies the NotNil predicate on the "is_default" field.
func IsDefaultNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldIsDefault))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldIsActive, v))
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldIsActive))
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldIsActive))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldExternalID, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldDeletedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.NotPredicates(p))
}
