// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/activitylog"
	"app/pkg/database/ent/apikey"
	"app/pkg/database/ent/notificationsetting"
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/privacysetting"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
	"app/pkg/database/ent/userprofile"
	"app/pkg/database/ent/usersession"
	"app/pkg/database/ent/usertoken"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uu *UserUpdate) SetDateOfBirth(t time.Time) *UserUpdate {
	uu.mutation.SetDateOfBirth(t)
	return uu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDateOfBirth(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDateOfBirth(*t)
	}
	return uu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uu *UserUpdate) ClearDateOfBirth() *UserUpdate {
	uu.mutation.ClearDateOfBirth()
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uu *UserUpdate) ClearAvatarURL() *UserUpdate {
	uu.mutation.ClearAvatarURL()
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (uu *UserUpdate) ClearEmailVerified() *UserUpdate {
	uu.mutation.ClearEmailVerified()
	return uu
}

// SetPhoneVerified sets the "phone_verified" field.
func (uu *UserUpdate) SetPhoneVerified(b bool) *UserUpdate {
	uu.mutation.SetPhoneVerified(b)
	return uu
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPhoneVerified(*b)
	}
	return uu
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (uu *UserUpdate) ClearPhoneVerified() *UserUpdate {
	uu.mutation.ClearPhoneVerified()
	return uu
}

// SetAccountStatus sets the "account_status" field.
func (uu *UserUpdate) SetAccountStatus(us user.AccountStatus) *UserUpdate {
	uu.mutation.SetAccountStatus(us)
	return uu
}

// SetNillableAccountStatus sets the "account_status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountStatus(us *user.AccountStatus) *UserUpdate {
	if us != nil {
		uu.SetAccountStatus(*us)
	}
	return uu
}

// ClearAccountStatus clears the value of the "account_status" field.
func (uu *UserUpdate) ClearAccountStatus() *UserUpdate {
	uu.mutation.ClearAccountStatus()
	return uu
}

// SetLastLoginAt sets the "last_login_at" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uu *UserUpdate) ClearLastLoginAt() *UserUpdate {
	uu.mutation.ClearLastLoginAt()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *UserUpdate) ClearCreatedAt() *UserUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (uu *UserUpdate) AddActivityLogIDs(ids ...string) *UserUpdate {
	uu.mutation.AddActivityLogIDs(ids...)
	return uu
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (uu *UserUpdate) AddActivityLogs(a ...*ActivityLog) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddActivityLogIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uu *UserUpdate) AddAPIKeyIDs(ids ...string) *UserUpdate {
	uu.mutation.AddAPIKeyIDs(ids...)
	return uu
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) AddAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPIKeyIDs(ids...)
}

// SetNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID.
func (uu *UserUpdate) SetNotificationSettingID(id string) *UserUpdate {
	uu.mutation.SetNotificationSettingID(id)
	return uu
}

// SetNillableNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableNotificationSettingID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetNotificationSettingID(*id)
	}
	return uu
}

// SetNotificationSetting sets the "notification_setting" edge to the NotificationSetting entity.
func (uu *UserUpdate) SetNotificationSetting(n *NotificationSetting) *UserUpdate {
	return uu.SetNotificationSettingID(n.ID)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (uu *UserUpdate) AddPaymentMethodIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPaymentMethodIDs(ids...)
	return uu
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (uu *UserUpdate) AddPaymentMethods(p ...*PaymentMethod) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPaymentMethodIDs(ids...)
}

// SetPrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID.
func (uu *UserUpdate) SetPrivacySettingID(id string) *UserUpdate {
	uu.mutation.SetPrivacySettingID(id)
	return uu
}

// SetNillablePrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillablePrivacySettingID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetPrivacySettingID(*id)
	}
	return uu
}

// SetPrivacySetting sets the "privacy_setting" edge to the PrivacySetting entity.
func (uu *UserUpdate) SetPrivacySetting(p *PrivacySetting) *UserUpdate {
	return uu.SetPrivacySettingID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (uu *UserUpdate) AddTransactionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTransactionIDs(ids...)
	return uu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (uu *UserUpdate) AddTransactions(t ...*Transaction) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTransactionIDs(ids...)
}

// SetUserProfileID sets the "user_profile" edge to the UserProfile entity by ID.
func (uu *UserUpdate) SetUserProfileID(id string) *UserUpdate {
	uu.mutation.SetUserProfileID(id)
	return uu
}

// SetNillableUserProfileID sets the "user_profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUserProfileID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetUserProfileID(*id)
	}
	return uu
}

// SetUserProfile sets the "user_profile" edge to the UserProfile entity.
func (uu *UserUpdate) SetUserProfile(u *UserProfile) *UserUpdate {
	return uu.SetUserProfileID(u.ID)
}

// AddUserSessionIDs adds the "user_sessions" edge to the UserSession entity by IDs.
func (uu *UserUpdate) AddUserSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserSessionIDs(ids...)
	return uu
}

// AddUserSessions adds the "user_sessions" edges to the UserSession entity.
func (uu *UserUpdate) AddUserSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserSessionIDs(ids...)
}

// AddUserTokenIDs adds the "user_tokens" edge to the UserToken entity by IDs.
func (uu *UserUpdate) AddUserTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserTokenIDs(ids...)
	return uu
}

// AddUserTokens adds the "user_tokens" edges to the UserToken entity.
func (uu *UserUpdate) AddUserTokens(u ...*UserToken) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserTokenIDs(ids...)
}

// SetUser2faID sets the "user_2fa" edge to the User2fa entity by ID.
func (uu *UserUpdate) SetUser2faID(id string) *UserUpdate {
	uu.mutation.SetUser2faID(id)
	return uu
}

// SetNillableUser2faID sets the "user_2fa" edge to the User2fa entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUser2faID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetUser2faID(*id)
	}
	return uu
}

// SetUser2fa sets the "user_2fa" edge to the User2fa entity.
func (uu *UserUpdate) SetUser2fa(u *User2fa) *UserUpdate {
	return uu.SetUser2faID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearActivityLogs clears all "activity_logs" edges to the ActivityLog entity.
func (uu *UserUpdate) ClearActivityLogs() *UserUpdate {
	uu.mutation.ClearActivityLogs()
	return uu
}

// RemoveActivityLogIDs removes the "activity_logs" edge to ActivityLog entities by IDs.
func (uu *UserUpdate) RemoveActivityLogIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveActivityLogIDs(ids...)
	return uu
}

// RemoveActivityLogs removes "activity_logs" edges to ActivityLog entities.
func (uu *UserUpdate) RemoveActivityLogs(a ...*ActivityLog) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveActivityLogIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) ClearAPIKeys() *UserUpdate {
	uu.mutation.ClearAPIKeys()
	return uu
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uu *UserUpdate) RemoveAPIKeyIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveAPIKeyIDs(ids...)
	return uu
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uu *UserUpdate) RemoveAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPIKeyIDs(ids...)
}

// ClearNotificationSetting clears the "notification_setting" edge to the NotificationSetting entity.
func (uu *UserUpdate) ClearNotificationSetting() *UserUpdate {
	uu.mutation.ClearNotificationSetting()
	return uu
}

// ClearPaymentMethods clears all "payment_methods" edges to the PaymentMethod entity.
func (uu *UserUpdate) ClearPaymentMethods() *UserUpdate {
	uu.mutation.ClearPaymentMethods()
	return uu
}

// RemovePaymentMethodIDs removes the "payment_methods" edge to PaymentMethod entities by IDs.
func (uu *UserUpdate) RemovePaymentMethodIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePaymentMethodIDs(ids...)
	return uu
}

// RemovePaymentMethods removes "payment_methods" edges to PaymentMethod entities.
func (uu *UserUpdate) RemovePaymentMethods(p ...*PaymentMethod) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePaymentMethodIDs(ids...)
}

// ClearPrivacySetting clears the "privacy_setting" edge to the PrivacySetting entity.
func (uu *UserUpdate) ClearPrivacySetting() *UserUpdate {
	uu.mutation.ClearPrivacySetting()
	return uu
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (uu *UserUpdate) ClearTransactions() *UserUpdate {
	uu.mutation.ClearTransactions()
	return uu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (uu *UserUpdate) RemoveTransactionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTransactionIDs(ids...)
	return uu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (uu *UserUpdate) RemoveTransactions(t ...*Transaction) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTransactionIDs(ids...)
}

// ClearUserProfile clears the "user_profile" edge to the UserProfile entity.
func (uu *UserUpdate) ClearUserProfile() *UserUpdate {
	uu.mutation.ClearUserProfile()
	return uu
}

// ClearUserSessions clears all "user_sessions" edges to the UserSession entity.
func (uu *UserUpdate) ClearUserSessions() *UserUpdate {
	uu.mutation.ClearUserSessions()
	return uu
}

// RemoveUserSessionIDs removes the "user_sessions" edge to UserSession entities by IDs.
func (uu *UserUpdate) RemoveUserSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserSessionIDs(ids...)
	return uu
}

// RemoveUserSessions removes "user_sessions" edges to UserSession entities.
func (uu *UserUpdate) RemoveUserSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserSessionIDs(ids...)
}

// ClearUserTokens clears all "user_tokens" edges to the UserToken entity.
func (uu *UserUpdate) ClearUserTokens() *UserUpdate {
	uu.mutation.ClearUserTokens()
	return uu
}

// RemoveUserTokenIDs removes the "user_tokens" edge to UserToken entities by IDs.
func (uu *UserUpdate) RemoveUserTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserTokenIDs(ids...)
	return uu
}

// RemoveUserTokens removes "user_tokens" edges to UserToken entities.
func (uu *UserUpdate) RemoveUserTokens(u ...*UserToken) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserTokenIDs(ids...)
}

// ClearUser2fa clears the "user_2fa" edge to the User2fa entity.
func (uu *UserUpdate) ClearUser2fa() *UserUpdate {
	uu.mutation.ClearUser2fa()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.AccountStatus(); ok {
		if err := user.AccountStatusValidator(v); err != nil {
			return &ValidationError{Name: "account_status", err: fmt.Errorf(`ent: validator failed for field "User.account_status": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeTime, value)
	}
	if uu.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uu.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if uu.mutation.EmailVerifiedCleared() {
		_spec.ClearField(user.FieldEmailVerified, field.TypeBool)
	}
	if value, ok := uu.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if uu.mutation.PhoneVerifiedCleared() {
		_spec.ClearField(user.FieldPhoneVerified, field.TypeBool)
	}
	if value, ok := uu.mutation.AccountStatus(); ok {
		_spec.SetField(user.FieldAccountStatus, field.TypeEnum, value)
	}
	if uu.mutation.AccountStatusCleared() {
		_spec.ClearField(user.FieldAccountStatus, field.TypeEnum)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uu.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if uu.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedActivityLogsIDs(); len(nodes) > 0 && !uu.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.NotificationSettingTable,
			Columns: []string{user.NotificationSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.NotificationSettingTable,
			Columns: []string{user.NotificationSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !uu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrivacySettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivacySettingTable,
			Columns: []string{user.PrivacySettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrivacySettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivacySettingTable,
			Columns: []string{user.PrivacySettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !uu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserSessionsIDs(); len(nodes) > 0 && !uu.mutation.UserSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserTokensIDs(); len(nodes) > 0 && !uu.mutation.UserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.User2faCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2faTable,
			Columns: []string{user.User2faColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.User2faIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2faTable,
			Columns: []string{user.User2faColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uuo *UserUpdateOne) SetDateOfBirth(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDateOfBirth(t)
	return uuo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDateOfBirth(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDateOfBirth(*t)
	}
	return uuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uuo *UserUpdateOne) ClearDateOfBirth() *UserUpdateOne {
	uuo.mutation.ClearDateOfBirth()
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uuo *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	uuo.mutation.ClearAvatarURL()
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (uuo *UserUpdateOne) ClearEmailVerified() *UserUpdateOne {
	uuo.mutation.ClearEmailVerified()
	return uuo
}

// SetPhoneVerified sets the "phone_verified" field.
func (uuo *UserUpdateOne) SetPhoneVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPhoneVerified(b)
	return uuo
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPhoneVerified(*b)
	}
	return uuo
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (uuo *UserUpdateOne) ClearPhoneVerified() *UserUpdateOne {
	uuo.mutation.ClearPhoneVerified()
	return uuo
}

// SetAccountStatus sets the "account_status" field.
func (uuo *UserUpdateOne) SetAccountStatus(us user.AccountStatus) *UserUpdateOne {
	uuo.mutation.SetAccountStatus(us)
	return uuo
}

// SetNillableAccountStatus sets the "account_status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountStatus(us *user.AccountStatus) *UserUpdateOne {
	if us != nil {
		uuo.SetAccountStatus(*us)
	}
	return uuo
}

// ClearAccountStatus clears the value of the "account_status" field.
func (uuo *UserUpdateOne) ClearAccountStatus() *UserUpdateOne {
	uuo.mutation.ClearAccountStatus()
	return uuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uuo *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	uuo.mutation.ClearLastLoginAt()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (uuo *UserUpdateOne) AddActivityLogIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddActivityLogIDs(ids...)
	return uuo
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (uuo *UserUpdateOne) AddActivityLogs(a ...*ActivityLog) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddActivityLogIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uuo *UserUpdateOne) AddAPIKeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddAPIKeyIDs(ids...)
	return uuo
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) AddAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPIKeyIDs(ids...)
}

// SetNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID.
func (uuo *UserUpdateOne) SetNotificationSettingID(id string) *UserUpdateOne {
	uuo.mutation.SetNotificationSettingID(id)
	return uuo
}

// SetNillableNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotificationSettingID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetNotificationSettingID(*id)
	}
	return uuo
}

// SetNotificationSetting sets the "notification_setting" edge to the NotificationSetting entity.
func (uuo *UserUpdateOne) SetNotificationSetting(n *NotificationSetting) *UserUpdateOne {
	return uuo.SetNotificationSettingID(n.ID)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (uuo *UserUpdateOne) AddPaymentMethodIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPaymentMethodIDs(ids...)
	return uuo
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (uuo *UserUpdateOne) AddPaymentMethods(p ...*PaymentMethod) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPaymentMethodIDs(ids...)
}

// SetPrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID.
func (uuo *UserUpdateOne) SetPrivacySettingID(id string) *UserUpdateOne {
	uuo.mutation.SetPrivacySettingID(id)
	return uuo
}

// SetNillablePrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrivacySettingID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetPrivacySettingID(*id)
	}
	return uuo
}

// SetPrivacySetting sets the "privacy_setting" edge to the PrivacySetting entity.
func (uuo *UserUpdateOne) SetPrivacySetting(p *PrivacySetting) *UserUpdateOne {
	return uuo.SetPrivacySettingID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (uuo *UserUpdateOne) AddTransactionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTransactionIDs(ids...)
	return uuo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (uuo *UserUpdateOne) AddTransactions(t ...*Transaction) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTransactionIDs(ids...)
}

// SetUserProfileID sets the "user_profile" edge to the UserProfile entity by ID.
func (uuo *UserUpdateOne) SetUserProfileID(id string) *UserUpdateOne {
	uuo.mutation.SetUserProfileID(id)
	return uuo
}

// SetNillableUserProfileID sets the "user_profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserProfileID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUserProfileID(*id)
	}
	return uuo
}

// SetUserProfile sets the "user_profile" edge to the UserProfile entity.
func (uuo *UserUpdateOne) SetUserProfile(u *UserProfile) *UserUpdateOne {
	return uuo.SetUserProfileID(u.ID)
}

// AddUserSessionIDs adds the "user_sessions" edge to the UserSession entity by IDs.
func (uuo *UserUpdateOne) AddUserSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserSessionIDs(ids...)
	return uuo
}

// AddUserSessions adds the "user_sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) AddUserSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserSessionIDs(ids...)
}

// AddUserTokenIDs adds the "user_tokens" edge to the UserToken entity by IDs.
func (uuo *UserUpdateOne) AddUserTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserTokenIDs(ids...)
	return uuo
}

// AddUserTokens adds the "user_tokens" edges to the UserToken entity.
func (uuo *UserUpdateOne) AddUserTokens(u ...*UserToken) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserTokenIDs(ids...)
}

// SetUser2faID sets the "user_2fa" edge to the User2fa entity by ID.
func (uuo *UserUpdateOne) SetUser2faID(id string) *UserUpdateOne {
	uuo.mutation.SetUser2faID(id)
	return uuo
}

// SetNillableUser2faID sets the "user_2fa" edge to the User2fa entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUser2faID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUser2faID(*id)
	}
	return uuo
}

// SetUser2fa sets the "user_2fa" edge to the User2fa entity.
func (uuo *UserUpdateOne) SetUser2fa(u *User2fa) *UserUpdateOne {
	return uuo.SetUser2faID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearActivityLogs clears all "activity_logs" edges to the ActivityLog entity.
func (uuo *UserUpdateOne) ClearActivityLogs() *UserUpdateOne {
	uuo.mutation.ClearActivityLogs()
	return uuo
}

// RemoveActivityLogIDs removes the "activity_logs" edge to ActivityLog entities by IDs.
func (uuo *UserUpdateOne) RemoveActivityLogIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveActivityLogIDs(ids...)
	return uuo
}

// RemoveActivityLogs removes "activity_logs" edges to ActivityLog entities.
func (uuo *UserUpdateOne) RemoveActivityLogs(a ...*ActivityLog) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveActivityLogIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) ClearAPIKeys() *UserUpdateOne {
	uuo.mutation.ClearAPIKeys()
	return uuo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uuo *UserUpdateOne) RemoveAPIKeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveAPIKeyIDs(ids...)
	return uuo
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uuo *UserUpdateOne) RemoveAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPIKeyIDs(ids...)
}

// ClearNotificationSetting clears the "notification_setting" edge to the NotificationSetting entity.
func (uuo *UserUpdateOne) ClearNotificationSetting() *UserUpdateOne {
	uuo.mutation.ClearNotificationSetting()
	return uuo
}

// ClearPaymentMethods clears all "payment_methods" edges to the PaymentMethod entity.
func (uuo *UserUpdateOne) ClearPaymentMethods() *UserUpdateOne {
	uuo.mutation.ClearPaymentMethods()
	return uuo
}

// RemovePaymentMethodIDs removes the "payment_methods" edge to PaymentMethod entities by IDs.
func (uuo *UserUpdateOne) RemovePaymentMethodIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePaymentMethodIDs(ids...)
	return uuo
}

// RemovePaymentMethods removes "payment_methods" edges to PaymentMethod entities.
func (uuo *UserUpdateOne) RemovePaymentMethods(p ...*PaymentMethod) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePaymentMethodIDs(ids...)
}

// ClearPrivacySetting clears the "privacy_setting" edge to the PrivacySetting entity.
func (uuo *UserUpdateOne) ClearPrivacySetting() *UserUpdateOne {
	uuo.mutation.ClearPrivacySetting()
	return uuo
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (uuo *UserUpdateOne) ClearTransactions() *UserUpdateOne {
	uuo.mutation.ClearTransactions()
	return uuo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (uuo *UserUpdateOne) RemoveTransactionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTransactionIDs(ids...)
	return uuo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (uuo *UserUpdateOne) RemoveTransactions(t ...*Transaction) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTransactionIDs(ids...)
}

// ClearUserProfile clears the "user_profile" edge to the UserProfile entity.
func (uuo *UserUpdateOne) ClearUserProfile() *UserUpdateOne {
	uuo.mutation.ClearUserProfile()
	return uuo
}

// ClearUserSessions clears all "user_sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) ClearUserSessions() *UserUpdateOne {
	uuo.mutation.ClearUserSessions()
	return uuo
}

// RemoveUserSessionIDs removes the "user_sessions" edge to UserSession entities by IDs.
func (uuo *UserUpdateOne) RemoveUserSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserSessionIDs(ids...)
	return uuo
}

// RemoveUserSessions removes "user_sessions" edges to UserSession entities.
func (uuo *UserUpdateOne) RemoveUserSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserSessionIDs(ids...)
}

// ClearUserTokens clears all "user_tokens" edges to the UserToken entity.
func (uuo *UserUpdateOne) ClearUserTokens() *UserUpdateOne {
	uuo.mutation.ClearUserTokens()
	return uuo
}

// RemoveUserTokenIDs removes the "user_tokens" edge to UserToken entities by IDs.
func (uuo *UserUpdateOne) RemoveUserTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserTokenIDs(ids...)
	return uuo
}

// RemoveUserTokens removes "user_tokens" edges to UserToken entities.
func (uuo *UserUpdateOne) RemoveUserTokens(u ...*UserToken) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserTokenIDs(ids...)
}

// ClearUser2fa clears the "user_2fa" edge to the User2fa entity.
func (uuo *UserUpdateOne) ClearUser2fa() *UserUpdateOne {
	uuo.mutation.ClearUser2fa()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.AccountStatus(); ok {
		if err := user.AccountStatusValidator(v); err != nil {
			return &ValidationError{Name: "account_status", err: fmt.Errorf(`ent: validator failed for field "User.account_status": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeTime, value)
	}
	if uuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uuo.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if uuo.mutation.EmailVerifiedCleared() {
		_spec.ClearField(user.FieldEmailVerified, field.TypeBool)
	}
	if value, ok := uuo.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if uuo.mutation.PhoneVerifiedCleared() {
		_spec.ClearField(user.FieldPhoneVerified, field.TypeBool)
	}
	if value, ok := uuo.mutation.AccountStatus(); ok {
		_spec.SetField(user.FieldAccountStatus, field.TypeEnum, value)
	}
	if uuo.mutation.AccountStatusCleared() {
		_spec.ClearField(user.FieldAccountStatus, field.TypeEnum)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if uuo.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedActivityLogsIDs(); len(nodes) > 0 && !uuo.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.NotificationSettingTable,
			Columns: []string{user.NotificationSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.NotificationSettingTable,
			Columns: []string{user.NotificationSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !uuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrivacySettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivacySettingTable,
			Columns: []string{user.PrivacySettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrivacySettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivacySettingTable,
			Columns: []string{user.PrivacySettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !uuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserSessionsIDs(); len(nodes) > 0 && !uuo.mutation.UserSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserTokensIDs(); len(nodes) > 0 && !uuo.mutation.UserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.User2faCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2faTable,
			Columns: []string{user.User2faColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.User2faIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2faTable,
			Columns: []string{user.User2faColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
