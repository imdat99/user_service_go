// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/notificationsetting"
	"app/pkg/database/ent/user"
)

// NotificationSettingCreate is the builder for creating a NotificationSetting entity.
type NotificationSettingCreate struct {
	config
	mutation *NotificationSettingMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (nsc *NotificationSettingCreate) SetUserID(s string) *NotificationSettingCreate {
	nsc.mutation.SetUserID(s)
	return nsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableUserID(s *string) *NotificationSettingCreate {
	if s != nil {
		nsc.SetUserID(*s)
	}
	return nsc
}

// SetEmailNotifications sets the "email_notifications" field.
func (nsc *NotificationSettingCreate) SetEmailNotifications(b bool) *NotificationSettingCreate {
	nsc.mutation.SetEmailNotifications(b)
	return nsc
}

// SetNillableEmailNotifications sets the "email_notifications" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableEmailNotifications(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetEmailNotifications(*b)
	}
	return nsc
}

// SetSmsNotifications sets the "sms_notifications" field.
func (nsc *NotificationSettingCreate) SetSmsNotifications(b bool) *NotificationSettingCreate {
	nsc.mutation.SetSmsNotifications(b)
	return nsc
}

// SetNillableSmsNotifications sets the "sms_notifications" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableSmsNotifications(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetSmsNotifications(*b)
	}
	return nsc
}

// SetPushNotifications sets the "push_notifications" field.
func (nsc *NotificationSettingCreate) SetPushNotifications(b bool) *NotificationSettingCreate {
	nsc.mutation.SetPushNotifications(b)
	return nsc
}

// SetNillablePushNotifications sets the "push_notifications" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillablePushNotifications(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetPushNotifications(*b)
	}
	return nsc
}

// SetMarketingEmails sets the "marketing_emails" field.
func (nsc *NotificationSettingCreate) SetMarketingEmails(b bool) *NotificationSettingCreate {
	nsc.mutation.SetMarketingEmails(b)
	return nsc
}

// SetNillableMarketingEmails sets the "marketing_emails" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableMarketingEmails(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetMarketingEmails(*b)
	}
	return nsc
}

// SetSecurityAlerts sets the "security_alerts" field.
func (nsc *NotificationSettingCreate) SetSecurityAlerts(b bool) *NotificationSettingCreate {
	nsc.mutation.SetSecurityAlerts(b)
	return nsc
}

// SetNillableSecurityAlerts sets the "security_alerts" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableSecurityAlerts(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetSecurityAlerts(*b)
	}
	return nsc
}

// SetLoginAlerts sets the "login_alerts" field.
func (nsc *NotificationSettingCreate) SetLoginAlerts(b bool) *NotificationSettingCreate {
	nsc.mutation.SetLoginAlerts(b)
	return nsc
}

// SetNillableLoginAlerts sets the "login_alerts" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableLoginAlerts(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetLoginAlerts(*b)
	}
	return nsc
}

// SetProfileUpdates sets the "profile_updates" field.
func (nsc *NotificationSettingCreate) SetProfileUpdates(b bool) *NotificationSettingCreate {
	nsc.mutation.SetProfileUpdates(b)
	return nsc
}

// SetNillableProfileUpdates sets the "profile_updates" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableProfileUpdates(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetProfileUpdates(*b)
	}
	return nsc
}

// SetPaymentNotifications sets the "payment_notifications" field.
func (nsc *NotificationSettingCreate) SetPaymentNotifications(b bool) *NotificationSettingCreate {
	nsc.mutation.SetPaymentNotifications(b)
	return nsc
}

// SetNillablePaymentNotifications sets the "payment_notifications" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillablePaymentNotifications(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetPaymentNotifications(*b)
	}
	return nsc
}

// SetCreatedAt sets the "created_at" field.
func (nsc *NotificationSettingCreate) SetCreatedAt(t time.Time) *NotificationSettingCreate {
	nsc.mutation.SetCreatedAt(t)
	return nsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableCreatedAt(t *time.Time) *NotificationSettingCreate {
	if t != nil {
		nsc.SetCreatedAt(*t)
	}
	return nsc
}

// SetUpdatedAt sets the "updated_at" field.
func (nsc *NotificationSettingCreate) SetUpdatedAt(t time.Time) *NotificationSettingCreate {
	nsc.mutation.SetUpdatedAt(t)
	return nsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableUpdatedAt(t *time.Time) *NotificationSettingCreate {
	if t != nil {
		nsc.SetUpdatedAt(*t)
	}
	return nsc
}

// SetID sets the "id" field.
func (nsc *NotificationSettingCreate) SetID(s string) *NotificationSettingCreate {
	nsc.mutation.SetID(s)
	return nsc
}

// SetUser sets the "user" edge to the User entity.
func (nsc *NotificationSettingCreate) SetUser(u *User) *NotificationSettingCreate {
	return nsc.SetUserID(u.ID)
}

// Mutation returns the NotificationSettingMutation object of the builder.
func (nsc *NotificationSettingCreate) Mutation() *NotificationSettingMutation {
	return nsc.mutation
}

// Save creates the NotificationSetting in the database.
func (nsc *NotificationSettingCreate) Save(ctx context.Context) (*NotificationSetting, error) {
	return withHooks(ctx, nsc.sqlSave, nsc.mutation, nsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NotificationSettingCreate) SaveX(ctx context.Context) *NotificationSetting {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NotificationSettingCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NotificationSettingCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NotificationSettingCreate) check() error {
	return nil
}

func (nsc *NotificationSettingCreate) sqlSave(ctx context.Context) (*NotificationSetting, error) {
	if err := nsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NotificationSetting.ID type: %T", _spec.ID.Value)
		}
	}
	nsc.mutation.id = &_node.ID
	nsc.mutation.done = true
	return _node, nil
}

func (nsc *NotificationSettingCreate) createSpec() (*NotificationSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationSetting{config: nsc.config}
		_spec = sqlgraph.NewCreateSpec(notificationsetting.Table, sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString))
	)
	if id, ok := nsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nsc.mutation.EmailNotifications(); ok {
		_spec.SetField(notificationsetting.FieldEmailNotifications, field.TypeBool, value)
		_node.EmailNotifications = value
	}
	if value, ok := nsc.mutation.SmsNotifications(); ok {
		_spec.SetField(notificationsetting.FieldSmsNotifications, field.TypeBool, value)
		_node.SmsNotifications = value
	}
	if value, ok := nsc.mutation.PushNotifications(); ok {
		_spec.SetField(notificationsetting.FieldPushNotifications, field.TypeBool, value)
		_node.PushNotifications = value
	}
	if value, ok := nsc.mutation.MarketingEmails(); ok {
		_spec.SetField(notificationsetting.FieldMarketingEmails, field.TypeBool, value)
		_node.MarketingEmails = value
	}
	if value, ok := nsc.mutation.SecurityAlerts(); ok {
		_spec.SetField(notificationsetting.FieldSecurityAlerts, field.TypeBool, value)
		_node.SecurityAlerts = value
	}
	if value, ok := nsc.mutation.LoginAlerts(); ok {
		_spec.SetField(notificationsetting.FieldLoginAlerts, field.TypeBool, value)
		_node.LoginAlerts = value
	}
	if value, ok := nsc.mutation.ProfileUpdates(); ok {
		_spec.SetField(notificationsetting.FieldProfileUpdates, field.TypeBool, value)
		_node.ProfileUpdates = value
	}
	if value, ok := nsc.mutation.PaymentNotifications(); ok {
		_spec.SetField(notificationsetting.FieldPaymentNotifications, field.TypeBool, value)
		_node.PaymentNotifications = value
	}
	if value, ok := nsc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nsc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := nsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   notificationsetting.UserTable,
			Columns: []string{notificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationSettingCreateBulk is the builder for creating many NotificationSetting entities in bulk.
type NotificationSettingCreateBulk struct {
	config
	err      error
	builders []*NotificationSettingCreate
}

// Save creates the NotificationSetting entities in the database.
func (nscb *NotificationSettingCreateBulk) Save(ctx context.Context) ([]*NotificationSetting, error) {
	if nscb.err != nil {
		return nil, nscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NotificationSetting, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NotificationSettingCreateBulk) SaveX(ctx context.Context) []*NotificationSetting {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NotificationSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NotificationSettingCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}
