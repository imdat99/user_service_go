// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/imdat99/user_service_go/pkg/database/ent/paymentmethod"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// PaymentMethod is the model entity for the PaymentMethod schema.
type PaymentMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// MethodType holds the value of the "method_type" field.
	MethodType paymentmethod.MethodType `json:"method_type,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// MaskedNumber holds the value of the "masked_number" field.
	MaskedNumber string `json:"masked_number,omitempty"`
	// HolderName holds the value of the "holder_name" field.
	HolderName string `json:"holder_name,omitempty"`
	// ExpiryMonth holds the value of the "expiry_month" field.
	ExpiryMonth int8 `json:"expiry_month,omitempty"`
	// ExpiryYear holds the value of the "expiry_year" field.
	ExpiryYear int16 `json:"expiry_year,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata json.RawMessage `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentMethodQuery when eager-loading is set.
	Edges        PaymentMethodEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentMethodEdges holds the relations/edges for other nodes in the graph.
type PaymentMethodEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentMethodEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentMethodEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentMethod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldMetadata:
			values[i] = new([]byte)
		case paymentmethod.FieldIsDefault, paymentmethod.FieldIsActive:
			values[i] = new(sql.NullBool)
		case paymentmethod.FieldExpiryMonth, paymentmethod.FieldExpiryYear:
			values[i] = new(sql.NullInt64)
		case paymentmethod.FieldID, paymentmethod.FieldUserID, paymentmethod.FieldMethodType, paymentmethod.FieldProvider, paymentmethod.FieldMaskedNumber, paymentmethod.FieldHolderName, paymentmethod.FieldExternalID:
			values[i] = new(sql.NullString)
		case paymentmethod.FieldCreatedAt, paymentmethod.FieldUpdatedAt, paymentmethod.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentMethod fields.
func (pm *PaymentMethod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pm.ID = value.String
			}
		case paymentmethod.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pm.UserID = value.String
			}
		case paymentmethod.FieldMethodType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method_type", values[i])
			} else if value.Valid {
				pm.MethodType = paymentmethod.MethodType(value.String)
			}
		case paymentmethod.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pm.Provider = value.String
			}
		case paymentmethod.FieldMaskedNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field masked_number", values[i])
			} else if value.Valid {
				pm.MaskedNumber = value.String
			}
		case paymentmethod.FieldHolderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field holder_name", values[i])
			} else if value.Valid {
				pm.HolderName = value.String
			}
		case paymentmethod.FieldExpiryMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_month", values[i])
			} else if value.Valid {
				pm.ExpiryMonth = int8(value.Int64)
			}
		case paymentmethod.FieldExpiryYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_year", values[i])
			} else if value.Valid {
				pm.ExpiryYear = int16(value.Int64)
			}
		case paymentmethod.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				pm.IsDefault = value.Bool
			}
		case paymentmethod.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pm.IsActive = value.Bool
			}
		case paymentmethod.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				pm.ExternalID = value.String
			}
		case paymentmethod.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pm.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case paymentmethod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case paymentmethod.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case paymentmethod.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = value.Time
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentMethod.
// This includes values selected through modifiers, order, etc.
func (pm *PaymentMethod) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PaymentMethod entity.
func (pm *PaymentMethod) QueryUser() *UserQuery {
	return NewPaymentMethodClient(pm.config).QueryUser(pm)
}

// QueryTransactions queries the "transactions" edge of the PaymentMethod entity.
func (pm *PaymentMethod) QueryTransactions() *TransactionQuery {
	return NewPaymentMethodClient(pm.config).QueryTransactions(pm)
}

// Update returns a builder for updating this PaymentMethod.
// Note that you need to call PaymentMethod.Unwrap() before calling this method if this PaymentMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PaymentMethod) Update() *PaymentMethodUpdateOne {
	return NewPaymentMethodClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PaymentMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PaymentMethod) Unwrap() *PaymentMethod {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentMethod is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PaymentMethod) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentMethod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("user_id=")
	builder.WriteString(pm.UserID)
	builder.WriteString(", ")
	builder.WriteString("method_type=")
	builder.WriteString(fmt.Sprintf("%v", pm.MethodType))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(pm.Provider)
	builder.WriteString(", ")
	builder.WriteString("masked_number=")
	builder.WriteString(pm.MaskedNumber)
	builder.WriteString(", ")
	builder.WriteString("holder_name=")
	builder.WriteString(pm.HolderName)
	builder.WriteString(", ")
	builder.WriteString("expiry_month=")
	builder.WriteString(fmt.Sprintf("%v", pm.ExpiryMonth))
	builder.WriteString(", ")
	builder.WriteString("expiry_year=")
	builder.WriteString(fmt.Sprintf("%v", pm.ExpiryYear))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", pm.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pm.IsActive))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(pm.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pm.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pm.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentMethods is a parsable slice of PaymentMethod.
type PaymentMethods []*PaymentMethod
