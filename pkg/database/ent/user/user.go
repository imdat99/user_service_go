// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPhoneVerified holds the string denoting the phone_verified field in the database.
	FieldPhoneVerified = "phone_verified"
	// FieldAccountStatus holds the string denoting the account_status field in the database.
	FieldAccountStatus = "account_status"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeActivityLogs holds the string denoting the activity_logs edge name in mutations.
	EdgeActivityLogs = "activity_logs"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeNotificationSetting holds the string denoting the notification_setting edge name in mutations.
	EdgeNotificationSetting = "notification_setting"
	// EdgePaymentMethods holds the string denoting the payment_methods edge name in mutations.
	EdgePaymentMethods = "payment_methods"
	// EdgePrivacySetting holds the string denoting the privacy_setting edge name in mutations.
	EdgePrivacySetting = "privacy_setting"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeUserProfile holds the string denoting the user_profile edge name in mutations.
	EdgeUserProfile = "user_profile"
	// EdgeUserSessions holds the string denoting the user_sessions edge name in mutations.
	EdgeUserSessions = "user_sessions"
	// EdgeUserTokens holds the string denoting the user_tokens edge name in mutations.
	EdgeUserTokens = "user_tokens"
	// EdgeUser2fa holds the string denoting the user_2fa edge name in mutations.
	EdgeUser2fa = "user_2fa"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ActivityLogsTable is the table that holds the activity_logs relation/edge.
	ActivityLogsTable = "activity_logs"
	// ActivityLogsInverseTable is the table name for the ActivityLog entity.
	// It exists in this package in order to avoid circular dependency with the "activitylog" package.
	ActivityLogsInverseTable = "activity_logs"
	// ActivityLogsColumn is the table column denoting the activity_logs relation/edge.
	ActivityLogsColumn = "user_id"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "user_id"
	// NotificationSettingTable is the table that holds the notification_setting relation/edge.
	NotificationSettingTable = "notification_settings"
	// NotificationSettingInverseTable is the table name for the NotificationSetting entity.
	// It exists in this package in order to avoid circular dependency with the "notificationsetting" package.
	NotificationSettingInverseTable = "notification_settings"
	// NotificationSettingColumn is the table column denoting the notification_setting relation/edge.
	NotificationSettingColumn = "user_id"
	// PaymentMethodsTable is the table that holds the payment_methods relation/edge.
	PaymentMethodsTable = "payment_methods"
	// PaymentMethodsInverseTable is the table name for the PaymentMethod entity.
	// It exists in this package in order to avoid circular dependency with the "paymentmethod" package.
	PaymentMethodsInverseTable = "payment_methods"
	// PaymentMethodsColumn is the table column denoting the payment_methods relation/edge.
	PaymentMethodsColumn = "user_id"
	// PrivacySettingTable is the table that holds the privacy_setting relation/edge.
	PrivacySettingTable = "privacy_settings"
	// PrivacySettingInverseTable is the table name for the PrivacySetting entity.
	// It exists in this package in order to avoid circular dependency with the "privacysetting" package.
	PrivacySettingInverseTable = "privacy_settings"
	// PrivacySettingColumn is the table column denoting the privacy_setting relation/edge.
	PrivacySettingColumn = "user_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "user_id"
	// UserProfileTable is the table that holds the user_profile relation/edge.
	UserProfileTable = "user_profiles"
	// UserProfileInverseTable is the table name for the UserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userprofile" package.
	UserProfileInverseTable = "user_profiles"
	// UserProfileColumn is the table column denoting the user_profile relation/edge.
	UserProfileColumn = "user_id"
	// UserSessionsTable is the table that holds the user_sessions relation/edge.
	UserSessionsTable = "user_sessions"
	// UserSessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	UserSessionsInverseTable = "user_sessions"
	// UserSessionsColumn is the table column denoting the user_sessions relation/edge.
	UserSessionsColumn = "user_id"
	// UserTokensTable is the table that holds the user_tokens relation/edge.
	UserTokensTable = "user_tokens"
	// UserTokensInverseTable is the table name for the UserToken entity.
	// It exists in this package in order to avoid circular dependency with the "usertoken" package.
	UserTokensInverseTable = "user_tokens"
	// UserTokensColumn is the table column denoting the user_tokens relation/edge.
	UserTokensColumn = "user_id"
	// User2faTable is the table that holds the user_2fa relation/edge.
	User2faTable = "user_2fa"
	// User2faInverseTable is the table name for the User2fa entity.
	// It exists in this package in order to avoid circular dependency with the "user2fa" package.
	User2faInverseTable = "user_2fa"
	// User2faColumn is the table column denoting the user_2fa relation/edge.
	User2faColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldUsername,
	FieldPasswordHash,
	FieldFirstName,
	FieldLastName,
	FieldPhone,
	FieldDateOfBirth,
	FieldAvatarURL,
	FieldEmailVerified,
	FieldPhoneVerified,
	FieldAccountStatus,
	FieldLastLoginAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// AccountStatus defines the type for the "account_status" enum field.
type AccountStatus string

// AccountStatus values.
const (
	AccountStatusActive    AccountStatus = "active"
	AccountStatusInactive  AccountStatus = "inactive"
	AccountStatusSuspended AccountStatus = "suspended"
	AccountStatusPending   AccountStatus = "pending"
)

func (as AccountStatus) String() string {
	return string(as)
}

// AccountStatusValidator is a validator for the "account_status" field enum values. It is called by the builders before save.
func AccountStatusValidator(as AccountStatus) error {
	switch as {
	case AccountStatusActive, AccountStatusInactive, AccountStatusSuspended, AccountStatusPending:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for account_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPhoneVerified orders the results by the phone_verified field.
func ByPhoneVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneVerified, opts...).ToFunc()
}

// ByAccountStatus orders the results by the account_status field.
func ByAccountStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountStatus, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByActivityLogsCount orders the results by activity_logs count.
func ByActivityLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivityLogsStep(), opts...)
	}
}

// ByActivityLogs orders the results by activity_logs terms.
func ByActivityLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationSettingField orders the results by notification_setting field.
func ByNotificationSettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationSettingStep(), sql.OrderByField(field, opts...))
	}
}

// ByPaymentMethodsCount orders the results by payment_methods count.
func ByPaymentMethodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentMethodsStep(), opts...)
	}
}

// ByPaymentMethods orders the results by payment_methods terms.
func ByPaymentMethods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentMethodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrivacySettingField orders the results by privacy_setting field.
func ByPrivacySettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrivacySettingStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserProfileField orders the results by user_profile field.
func ByUserProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserSessionsCount orders the results by user_sessions count.
func ByUserSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserSessionsStep(), opts...)
	}
}

// ByUserSessions orders the results by user_sessions terms.
func ByUserSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserTokensCount orders the results by user_tokens count.
func ByUserTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTokensStep(), opts...)
	}
}

// ByUserTokens orders the results by user_tokens terms.
func ByUserTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUser2faField orders the results by user_2fa field.
func ByUser2faField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUser2faStep(), sql.OrderByField(field, opts...))
	}
}
func newActivityLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivityLogsTable, ActivityLogsColumn),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newNotificationSettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationSettingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, NotificationSettingTable, NotificationSettingColumn),
	)
}
func newPaymentMethodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentMethodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentMethodsTable, PaymentMethodsColumn),
	)
}
func newPrivacySettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrivacySettingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PrivacySettingTable, PrivacySettingColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
func newUserProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserProfileTable, UserProfileColumn),
	)
}
func newUserSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserSessionsTable, UserSessionsColumn),
	)
}
func newUserTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserTokensTable, UserTokensColumn),
	)
}
func newUser2faStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(User2faInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, User2faTable, User2faColumn),
	)
}
