// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"app/pkg/database/ent/migrate"

	"app/pkg/database/ent/activitylog"
	"app/pkg/database/ent/apikey"
	"app/pkg/database/ent/notificationsetting"
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/privacysetting"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
	"app/pkg/database/ent/userprofile"
	"app/pkg/database/ent/usersession"
	"app/pkg/database/ent/usertoken"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ActivityLog is the client for interacting with the ActivityLog builders.
	ActivityLog *ActivityLogClient
	// ApiKey is the client for interacting with the ApiKey builders.
	ApiKey *ApiKeyClient
	// NotificationSetting is the client for interacting with the NotificationSetting builders.
	NotificationSetting *NotificationSettingClient
	// PaymentMethod is the client for interacting with the PaymentMethod builders.
	PaymentMethod *PaymentMethodClient
	// PrivacySetting is the client for interacting with the PrivacySetting builders.
	PrivacySetting *PrivacySettingClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// User2fa is the client for interacting with the User2fa builders.
	User2fa *User2faClient
	// UserProfile is the client for interacting with the UserProfile builders.
	UserProfile *UserProfileClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
	// UserToken is the client for interacting with the UserToken builders.
	UserToken *UserTokenClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ActivityLog = NewActivityLogClient(c.config)
	c.ApiKey = NewApiKeyClient(c.config)
	c.NotificationSetting = NewNotificationSettingClient(c.config)
	c.PaymentMethod = NewPaymentMethodClient(c.config)
	c.PrivacySetting = NewPrivacySettingClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.User = NewUserClient(c.config)
	c.User2fa = NewUser2faClient(c.config)
	c.UserProfile = NewUserProfileClient(c.config)
	c.UserSession = NewUserSessionClient(c.config)
	c.UserToken = NewUserTokenClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ActivityLog:         NewActivityLogClient(cfg),
		ApiKey:              NewApiKeyClient(cfg),
		NotificationSetting: NewNotificationSettingClient(cfg),
		PaymentMethod:       NewPaymentMethodClient(cfg),
		PrivacySetting:      NewPrivacySettingClient(cfg),
		Transaction:         NewTransactionClient(cfg),
		User:                NewUserClient(cfg),
		User2fa:             NewUser2faClient(cfg),
		UserProfile:         NewUserProfileClient(cfg),
		UserSession:         NewUserSessionClient(cfg),
		UserToken:           NewUserTokenClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ActivityLog:         NewActivityLogClient(cfg),
		ApiKey:              NewApiKeyClient(cfg),
		NotificationSetting: NewNotificationSettingClient(cfg),
		PaymentMethod:       NewPaymentMethodClient(cfg),
		PrivacySetting:      NewPrivacySettingClient(cfg),
		Transaction:         NewTransactionClient(cfg),
		User:                NewUserClient(cfg),
		User2fa:             NewUser2faClient(cfg),
		UserProfile:         NewUserProfileClient(cfg),
		UserSession:         NewUserSessionClient(cfg),
		UserToken:           NewUserTokenClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ActivityLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ActivityLog, c.ApiKey, c.NotificationSetting, c.PaymentMethod,
		c.PrivacySetting, c.Transaction, c.User, c.User2fa, c.UserProfile,
		c.UserSession, c.UserToken,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ActivityLog, c.ApiKey, c.NotificationSetting, c.PaymentMethod,
		c.PrivacySetting, c.Transaction, c.User, c.User2fa, c.UserProfile,
		c.UserSession, c.UserToken,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivityLogMutation:
		return c.ActivityLog.mutate(ctx, m)
	case *ApiKeyMutation:
		return c.ApiKey.mutate(ctx, m)
	case *NotificationSettingMutation:
		return c.NotificationSetting.mutate(ctx, m)
	case *PaymentMethodMutation:
		return c.PaymentMethod.mutate(ctx, m)
	case *PrivacySettingMutation:
		return c.PrivacySetting.mutate(ctx, m)
	case *TransactionMutation:
		return c.Transaction.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *User2faMutation:
		return c.User2fa.mutate(ctx, m)
	case *UserProfileMutation:
		return c.UserProfile.mutate(ctx, m)
	case *UserSessionMutation:
		return c.UserSession.mutate(ctx, m)
	case *UserTokenMutation:
		return c.UserToken.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivityLogClient is a client for the ActivityLog schema.
type ActivityLogClient struct {
	config
}

// NewActivityLogClient returns a client for the ActivityLog from the given config.
func NewActivityLogClient(c config) *ActivityLogClient {
	return &ActivityLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activitylog.Hooks(f(g(h())))`.
func (c *ActivityLogClient) Use(hooks ...Hook) {
	c.hooks.ActivityLog = append(c.hooks.ActivityLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activitylog.Intercept(f(g(h())))`.
func (c *ActivityLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActivityLog = append(c.inters.ActivityLog, interceptors...)
}

// Create returns a builder for creating a ActivityLog entity.
func (c *ActivityLogClient) Create() *ActivityLogCreate {
	mutation := newActivityLogMutation(c.config, OpCreate)
	return &ActivityLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityLog entities.
func (c *ActivityLogClient) CreateBulk(builders ...*ActivityLogCreate) *ActivityLogCreateBulk {
	return &ActivityLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivityLogClient) MapCreateBulk(slice any, setFunc func(*ActivityLogCreate, int)) *ActivityLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivityLogCreateBulk{err: fmt.Errorf("calling to ActivityLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivityLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivityLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityLog.
func (c *ActivityLogClient) Update() *ActivityLogUpdate {
	mutation := newActivityLogMutation(c.config, OpUpdate)
	return &ActivityLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityLogClient) UpdateOne(al *ActivityLog) *ActivityLogUpdateOne {
	mutation := newActivityLogMutation(c.config, OpUpdateOne, withActivityLog(al))
	return &ActivityLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityLogClient) UpdateOneID(id string) *ActivityLogUpdateOne {
	mutation := newActivityLogMutation(c.config, OpUpdateOne, withActivityLogID(id))
	return &ActivityLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityLog.
func (c *ActivityLogClient) Delete() *ActivityLogDelete {
	mutation := newActivityLogMutation(c.config, OpDelete)
	return &ActivityLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityLogClient) DeleteOne(al *ActivityLog) *ActivityLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityLogClient) DeleteOneID(id string) *ActivityLogDeleteOne {
	builder := c.Delete().Where(activitylog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityLogDeleteOne{builder}
}

// Query returns a query builder for ActivityLog.
func (c *ActivityLogClient) Query() *ActivityLogQuery {
	return &ActivityLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivityLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ActivityLog entity by its id.
func (c *ActivityLogClient) Get(ctx context.Context, id string) (*ActivityLog, error) {
	return c.Query().Where(activitylog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityLogClient) GetX(ctx context.Context, id string) *ActivityLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ActivityLog.
func (c *ActivityLogClient) QueryUser(al *ActivityLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitylog.Table, activitylog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activitylog.UserTable, activitylog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityLogClient) Hooks() []Hook {
	hooks := c.hooks.ActivityLog
	return append(hooks[:len(hooks):len(hooks)], activitylog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ActivityLogClient) Interceptors() []Interceptor {
	return c.inters.ActivityLog
}

func (c *ActivityLogClient) mutate(ctx context.Context, m *ActivityLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActivityLog mutation op: %q", m.Op())
	}
}

// ApiKeyClient is a client for the ApiKey schema.
type ApiKeyClient struct {
	config
}

// NewApiKeyClient returns a client for the ApiKey from the given config.
func NewApiKeyClient(c config) *ApiKeyClient {
	return &ApiKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *ApiKeyClient) Use(hooks ...Hook) {
	c.hooks.ApiKey = append(c.hooks.ApiKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *ApiKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiKey = append(c.inters.ApiKey, interceptors...)
}

// Create returns a builder for creating a ApiKey entity.
func (c *ApiKeyClient) Create() *ApiKeyCreate {
	mutation := newApiKeyMutation(c.config, OpCreate)
	return &ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiKey entities.
func (c *ApiKeyClient) CreateBulk(builders ...*ApiKeyCreate) *ApiKeyCreateBulk {
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApiKeyClient) MapCreateBulk(slice any, setFunc func(*ApiKeyCreate, int)) *ApiKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApiKeyCreateBulk{err: fmt.Errorf("calling to ApiKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApiKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiKey.
func (c *ApiKeyClient) Update() *ApiKeyUpdate {
	mutation := newApiKeyMutation(c.config, OpUpdate)
	return &ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiKeyClient) UpdateOne(ak *ApiKey) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKey(ak))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiKeyClient) UpdateOneID(id string) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKeyID(id))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiKey.
func (c *ApiKeyClient) Delete() *ApiKeyDelete {
	mutation := newApiKeyMutation(c.config, OpDelete)
	return &ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiKeyClient) DeleteOne(ak *ApiKey) *ApiKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiKeyClient) DeleteOneID(id string) *ApiKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiKeyDeleteOne{builder}
}

// Query returns a query builder for ApiKey.
func (c *ApiKeyClient) Query() *ApiKeyQuery {
	return &ApiKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiKey},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiKey entity by its id.
func (c *ApiKeyClient) Get(ctx context.Context, id string) (*ApiKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiKeyClient) GetX(ctx context.Context, id string) *ApiKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ApiKey.
func (c *ApiKeyClient) QueryUser(ak *ApiKey) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.UserTable, apikey.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiKeyClient) Hooks() []Hook {
	hooks := c.hooks.ApiKey
	return append(hooks[:len(hooks):len(hooks)], apikey.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ApiKeyClient) Interceptors() []Interceptor {
	return c.inters.ApiKey
}

func (c *ApiKeyClient) mutate(ctx context.Context, m *ApiKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiKey mutation op: %q", m.Op())
	}
}

// NotificationSettingClient is a client for the NotificationSetting schema.
type NotificationSettingClient struct {
	config
}

// NewNotificationSettingClient returns a client for the NotificationSetting from the given config.
func NewNotificationSettingClient(c config) *NotificationSettingClient {
	return &NotificationSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationsetting.Hooks(f(g(h())))`.
func (c *NotificationSettingClient) Use(hooks ...Hook) {
	c.hooks.NotificationSetting = append(c.hooks.NotificationSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationsetting.Intercept(f(g(h())))`.
func (c *NotificationSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationSetting = append(c.inters.NotificationSetting, interceptors...)
}

// Create returns a builder for creating a NotificationSetting entity.
func (c *NotificationSettingClient) Create() *NotificationSettingCreate {
	mutation := newNotificationSettingMutation(c.config, OpCreate)
	return &NotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationSetting entities.
func (c *NotificationSettingClient) CreateBulk(builders ...*NotificationSettingCreate) *NotificationSettingCreateBulk {
	return &NotificationSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationSettingClient) MapCreateBulk(slice any, setFunc func(*NotificationSettingCreate, int)) *NotificationSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationSettingCreateBulk{err: fmt.Errorf("calling to NotificationSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationSetting.
func (c *NotificationSettingClient) Update() *NotificationSettingUpdate {
	mutation := newNotificationSettingMutation(c.config, OpUpdate)
	return &NotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationSettingClient) UpdateOne(ns *NotificationSetting) *NotificationSettingUpdateOne {
	mutation := newNotificationSettingMutation(c.config, OpUpdateOne, withNotificationSetting(ns))
	return &NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationSettingClient) UpdateOneID(id string) *NotificationSettingUpdateOne {
	mutation := newNotificationSettingMutation(c.config, OpUpdateOne, withNotificationSettingID(id))
	return &NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationSetting.
func (c *NotificationSettingClient) Delete() *NotificationSettingDelete {
	mutation := newNotificationSettingMutation(c.config, OpDelete)
	return &NotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationSettingClient) DeleteOne(ns *NotificationSetting) *NotificationSettingDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationSettingClient) DeleteOneID(id string) *NotificationSettingDeleteOne {
	builder := c.Delete().Where(notificationsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationSettingDeleteOne{builder}
}

// Query returns a query builder for NotificationSetting.
func (c *NotificationSettingClient) Query() *NotificationSettingQuery {
	return &NotificationSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationSetting entity by its id.
func (c *NotificationSettingClient) Get(ctx context.Context, id string) (*NotificationSetting, error) {
	return c.Query().Where(notificationsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationSettingClient) GetX(ctx context.Context, id string) *NotificationSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NotificationSetting.
func (c *NotificationSettingClient) QueryUser(ns *NotificationSetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationsetting.Table, notificationsetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, notificationsetting.UserTable, notificationsetting.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationSettingClient) Hooks() []Hook {
	hooks := c.hooks.NotificationSetting
	return append(hooks[:len(hooks):len(hooks)], notificationsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationSettingClient) Interceptors() []Interceptor {
	return c.inters.NotificationSetting
}

func (c *NotificationSettingClient) mutate(ctx context.Context, m *NotificationSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationSetting mutation op: %q", m.Op())
	}
}

// PaymentMethodClient is a client for the PaymentMethod schema.
type PaymentMethodClient struct {
	config
}

// NewPaymentMethodClient returns a client for the PaymentMethod from the given config.
func NewPaymentMethodClient(c config) *PaymentMethodClient {
	return &PaymentMethodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentmethod.Hooks(f(g(h())))`.
func (c *PaymentMethodClient) Use(hooks ...Hook) {
	c.hooks.PaymentMethod = append(c.hooks.PaymentMethod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentmethod.Intercept(f(g(h())))`.
func (c *PaymentMethodClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentMethod = append(c.inters.PaymentMethod, interceptors...)
}

// Create returns a builder for creating a PaymentMethod entity.
func (c *PaymentMethodClient) Create() *PaymentMethodCreate {
	mutation := newPaymentMethodMutation(c.config, OpCreate)
	return &PaymentMethodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentMethod entities.
func (c *PaymentMethodClient) CreateBulk(builders ...*PaymentMethodCreate) *PaymentMethodCreateBulk {
	return &PaymentMethodCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentMethodClient) MapCreateBulk(slice any, setFunc func(*PaymentMethodCreate, int)) *PaymentMethodCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentMethodCreateBulk{err: fmt.Errorf("calling to PaymentMethodClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentMethodCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentMethodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentMethod.
func (c *PaymentMethodClient) Update() *PaymentMethodUpdate {
	mutation := newPaymentMethodMutation(c.config, OpUpdate)
	return &PaymentMethodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentMethodClient) UpdateOne(pm *PaymentMethod) *PaymentMethodUpdateOne {
	mutation := newPaymentMethodMutation(c.config, OpUpdateOne, withPaymentMethod(pm))
	return &PaymentMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentMethodClient) UpdateOneID(id string) *PaymentMethodUpdateOne {
	mutation := newPaymentMethodMutation(c.config, OpUpdateOne, withPaymentMethodID(id))
	return &PaymentMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentMethod.
func (c *PaymentMethodClient) Delete() *PaymentMethodDelete {
	mutation := newPaymentMethodMutation(c.config, OpDelete)
	return &PaymentMethodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentMethodClient) DeleteOne(pm *PaymentMethod) *PaymentMethodDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentMethodClient) DeleteOneID(id string) *PaymentMethodDeleteOne {
	builder := c.Delete().Where(paymentmethod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentMethodDeleteOne{builder}
}

// Query returns a query builder for PaymentMethod.
func (c *PaymentMethodClient) Query() *PaymentMethodQuery {
	return &PaymentMethodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentMethod},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentMethod entity by its id.
func (c *PaymentMethodClient) Get(ctx context.Context, id string) (*PaymentMethod, error) {
	return c.Query().Where(paymentmethod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentMethodClient) GetX(ctx context.Context, id string) *PaymentMethod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PaymentMethod.
func (c *PaymentMethodClient) QueryUser(pm *PaymentMethod) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentmethod.Table, paymentmethod.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentmethod.UserTable, paymentmethod.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a PaymentMethod.
func (c *PaymentMethodClient) QueryTransactions(pm *PaymentMethod) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentmethod.Table, paymentmethod.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentmethod.TransactionsTable, paymentmethod.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentMethodClient) Hooks() []Hook {
	hooks := c.hooks.PaymentMethod
	return append(hooks[:len(hooks):len(hooks)], paymentmethod.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PaymentMethodClient) Interceptors() []Interceptor {
	return c.inters.PaymentMethod
}

func (c *PaymentMethodClient) mutate(ctx context.Context, m *PaymentMethodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentMethodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentMethodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentMethodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentMethod mutation op: %q", m.Op())
	}
}

// PrivacySettingClient is a client for the PrivacySetting schema.
type PrivacySettingClient struct {
	config
}

// NewPrivacySettingClient returns a client for the PrivacySetting from the given config.
func NewPrivacySettingClient(c config) *PrivacySettingClient {
	return &PrivacySettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `privacysetting.Hooks(f(g(h())))`.
func (c *PrivacySettingClient) Use(hooks ...Hook) {
	c.hooks.PrivacySetting = append(c.hooks.PrivacySetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `privacysetting.Intercept(f(g(h())))`.
func (c *PrivacySettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrivacySetting = append(c.inters.PrivacySetting, interceptors...)
}

// Create returns a builder for creating a PrivacySetting entity.
func (c *PrivacySettingClient) Create() *PrivacySettingCreate {
	mutation := newPrivacySettingMutation(c.config, OpCreate)
	return &PrivacySettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrivacySetting entities.
func (c *PrivacySettingClient) CreateBulk(builders ...*PrivacySettingCreate) *PrivacySettingCreateBulk {
	return &PrivacySettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrivacySettingClient) MapCreateBulk(slice any, setFunc func(*PrivacySettingCreate, int)) *PrivacySettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrivacySettingCreateBulk{err: fmt.Errorf("calling to PrivacySettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrivacySettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrivacySettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrivacySetting.
func (c *PrivacySettingClient) Update() *PrivacySettingUpdate {
	mutation := newPrivacySettingMutation(c.config, OpUpdate)
	return &PrivacySettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrivacySettingClient) UpdateOne(ps *PrivacySetting) *PrivacySettingUpdateOne {
	mutation := newPrivacySettingMutation(c.config, OpUpdateOne, withPrivacySetting(ps))
	return &PrivacySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrivacySettingClient) UpdateOneID(id string) *PrivacySettingUpdateOne {
	mutation := newPrivacySettingMutation(c.config, OpUpdateOne, withPrivacySettingID(id))
	return &PrivacySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrivacySetting.
func (c *PrivacySettingClient) Delete() *PrivacySettingDelete {
	mutation := newPrivacySettingMutation(c.config, OpDelete)
	return &PrivacySettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrivacySettingClient) DeleteOne(ps *PrivacySetting) *PrivacySettingDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrivacySettingClient) DeleteOneID(id string) *PrivacySettingDeleteOne {
	builder := c.Delete().Where(privacysetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrivacySettingDeleteOne{builder}
}

// Query returns a query builder for PrivacySetting.
func (c *PrivacySettingClient) Query() *PrivacySettingQuery {
	return &PrivacySettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrivacySetting},
		inters: c.Interceptors(),
	}
}

// Get returns a PrivacySetting entity by its id.
func (c *PrivacySettingClient) Get(ctx context.Context, id string) (*PrivacySetting, error) {
	return c.Query().Where(privacysetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrivacySettingClient) GetX(ctx context.Context, id string) *PrivacySetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PrivacySetting.
func (c *PrivacySettingClient) QueryUser(ps *PrivacySetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(privacysetting.Table, privacysetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, privacysetting.UserTable, privacysetting.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrivacySettingClient) Hooks() []Hook {
	hooks := c.hooks.PrivacySetting
	return append(hooks[:len(hooks):len(hooks)], privacysetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PrivacySettingClient) Interceptors() []Interceptor {
	return c.inters.PrivacySetting
}

func (c *PrivacySettingClient) mutate(ctx context.Context, m *PrivacySettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrivacySettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrivacySettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrivacySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrivacySettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrivacySetting mutation op: %q", m.Op())
	}
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transaction.Intercept(f(g(h())))`.
func (c *TransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transaction = append(c.inters.Transaction, interceptors...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransactionClient) MapCreateBulk(slice any, setFunc func(*TransactionCreate, int)) *TransactionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransactionCreateBulk{err: fmt.Errorf("calling to TransactionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransactionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id string) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id string) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id string) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id string) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Transaction.
func (c *TransactionClient) QueryUser(t *Transaction) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.UserTable, transaction.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentMethod queries the payment_method edge of a Transaction.
func (c *TransactionClient) QueryPaymentMethod(t *Transaction) *PaymentMethodQuery {
	query := (&PaymentMethodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(paymentmethod.Table, paymentmethod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.PaymentMethodTable, transaction.PaymentMethodColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	hooks := c.hooks.Transaction
	return append(hooks[:len(hooks):len(hooks)], transaction.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TransactionClient) Interceptors() []Interceptor {
	return c.inters.Transaction
}

func (c *TransactionClient) mutate(ctx context.Context, m *TransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transaction mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivityLogs queries the activity_logs edge of a User.
func (c *UserClient) QueryActivityLogs(u *User) *ActivityLogQuery {
	query := (&ActivityLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(activitylog.Table, activitylog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivityLogsTable, user.ActivityLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKeys queries the api_keys edge of a User.
func (c *UserClient) QueryAPIKeys(u *User) *ApiKeyQuery {
	query := (&ApiKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APIKeysTable, user.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationSetting queries the notification_setting edge of a User.
func (c *UserClient) QueryNotificationSetting(u *User) *NotificationSettingQuery {
	query := (&NotificationSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notificationsetting.Table, notificationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.NotificationSettingTable, user.NotificationSettingColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentMethods queries the payment_methods edge of a User.
func (c *UserClient) QueryPaymentMethods(u *User) *PaymentMethodQuery {
	query := (&PaymentMethodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(paymentmethod.Table, paymentmethod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PaymentMethodsTable, user.PaymentMethodsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrivacySetting queries the privacy_setting edge of a User.
func (c *UserClient) QueryPrivacySetting(u *User) *PrivacySettingQuery {
	query := (&PrivacySettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(privacysetting.Table, privacysetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PrivacySettingTable, user.PrivacySettingColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a User.
func (c *UserClient) QueryTransactions(u *User) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TransactionsTable, user.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser2fa queries the user_2fa edge of a User.
func (c *UserClient) QueryUser2fa(u *User) *User2faQuery {
	query := (&User2faClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user2fa.Table, user2fa.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.User2faTable, user.User2faColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserProfile queries the user_profile edge of a User.
func (c *UserClient) QueryUserProfile(u *User) *UserProfileQuery {
	query := (&UserProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.UserProfileTable, user.UserProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserSessions queries the user_sessions edge of a User.
func (c *UserClient) QueryUserSessions(u *User) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserSessionsTable, user.UserSessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTokens queries the user_tokens edge of a User.
func (c *UserClient) QueryUserTokens(u *User) *UserTokenQuery {
	query := (&UserTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usertoken.Table, usertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserTokensTable, user.UserTokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// User2faClient is a client for the User2fa schema.
type User2faClient struct {
	config
}

// NewUser2faClient returns a client for the User2fa from the given config.
func NewUser2faClient(c config) *User2faClient {
	return &User2faClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user2fa.Hooks(f(g(h())))`.
func (c *User2faClient) Use(hooks ...Hook) {
	c.hooks.User2fa = append(c.hooks.User2fa, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user2fa.Intercept(f(g(h())))`.
func (c *User2faClient) Intercept(interceptors ...Interceptor) {
	c.inters.User2fa = append(c.inters.User2fa, interceptors...)
}

// Create returns a builder for creating a User2fa entity.
func (c *User2faClient) Create() *User2faCreate {
	mutation := newUser2faMutation(c.config, OpCreate)
	return &User2faCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User2fa entities.
func (c *User2faClient) CreateBulk(builders ...*User2faCreate) *User2faCreateBulk {
	return &User2faCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *User2faClient) MapCreateBulk(slice any, setFunc func(*User2faCreate, int)) *User2faCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &User2faCreateBulk{err: fmt.Errorf("calling to User2faClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*User2faCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &User2faCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User2fa.
func (c *User2faClient) Update() *User2faUpdate {
	mutation := newUser2faMutation(c.config, OpUpdate)
	return &User2faUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *User2faClient) UpdateOne(u *User2fa) *User2faUpdateOne {
	mutation := newUser2faMutation(c.config, OpUpdateOne, withUser2fa(u))
	return &User2faUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *User2faClient) UpdateOneID(id string) *User2faUpdateOne {
	mutation := newUser2faMutation(c.config, OpUpdateOne, withUser2faID(id))
	return &User2faUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User2fa.
func (c *User2faClient) Delete() *User2faDelete {
	mutation := newUser2faMutation(c.config, OpDelete)
	return &User2faDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *User2faClient) DeleteOne(u *User2fa) *User2faDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *User2faClient) DeleteOneID(id string) *User2faDeleteOne {
	builder := c.Delete().Where(user2fa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &User2faDeleteOne{builder}
}

// Query returns a query builder for User2fa.
func (c *User2faClient) Query() *User2faQuery {
	return &User2faQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser2fa},
		inters: c.Interceptors(),
	}
}

// Get returns a User2fa entity by its id.
func (c *User2faClient) Get(ctx context.Context, id string) (*User2fa, error) {
	return c.Query().Where(user2fa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *User2faClient) GetX(ctx context.Context, id string) *User2fa {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a User2fa.
func (c *User2faClient) QueryUser(u *User2fa) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user2fa.Table, user2fa.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, user2fa.UserTable, user2fa.UserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *User2faClient) Hooks() []Hook {
	hooks := c.hooks.User2fa
	return append(hooks[:len(hooks):len(hooks)], user2fa.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *User2faClient) Interceptors() []Interceptor {
	return c.inters.User2fa
}

func (c *User2faClient) mutate(ctx context.Context, m *User2faMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&User2faCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&User2faUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&User2faUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&User2faDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User2fa mutation op: %q", m.Op())
	}
}

// UserProfileClient is a client for the UserProfile schema.
type UserProfileClient struct {
	config
}

// NewUserProfileClient returns a client for the UserProfile from the given config.
func NewUserProfileClient(c config) *UserProfileClient {
	return &UserProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprofile.Hooks(f(g(h())))`.
func (c *UserProfileClient) Use(hooks ...Hook) {
	c.hooks.UserProfile = append(c.hooks.UserProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userprofile.Intercept(f(g(h())))`.
func (c *UserProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserProfile = append(c.inters.UserProfile, interceptors...)
}

// Create returns a builder for creating a UserProfile entity.
func (c *UserProfileClient) Create() *UserProfileCreate {
	mutation := newUserProfileMutation(c.config, OpCreate)
	return &UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProfile entities.
func (c *UserProfileClient) CreateBulk(builders ...*UserProfileCreate) *UserProfileCreateBulk {
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserProfileClient) MapCreateBulk(slice any, setFunc func(*UserProfileCreate, int)) *UserProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserProfileCreateBulk{err: fmt.Errorf("calling to UserProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProfile.
func (c *UserProfileClient) Update() *UserProfileUpdate {
	mutation := newUserProfileMutation(c.config, OpUpdate)
	return &UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProfileClient) UpdateOne(up *UserProfile) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfile(up))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProfileClient) UpdateOneID(id string) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfileID(id))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProfile.
func (c *UserProfileClient) Delete() *UserProfileDelete {
	mutation := newUserProfileMutation(c.config, OpDelete)
	return &UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProfileClient) DeleteOne(up *UserProfile) *UserProfileDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProfileClient) DeleteOneID(id string) *UserProfileDeleteOne {
	builder := c.Delete().Where(userprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProfileDeleteOne{builder}
}

// Query returns a query builder for UserProfile.
func (c *UserProfileClient) Query() *UserProfileQuery {
	return &UserProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a UserProfile entity by its id.
func (c *UserProfileClient) Get(ctx context.Context, id string) (*UserProfile, error) {
	return c.Query().Where(userprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProfileClient) GetX(ctx context.Context, id string) *UserProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserProfile.
func (c *UserProfileClient) QueryUser(up *UserProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userprofile.UserTable, userprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserProfileClient) Hooks() []Hook {
	hooks := c.hooks.UserProfile
	return append(hooks[:len(hooks):len(hooks)], userprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserProfileClient) Interceptors() []Interceptor {
	return c.inters.UserProfile
}

func (c *UserProfileClient) mutate(ctx context.Context, m *UserProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserProfile mutation op: %q", m.Op())
	}
}

// UserSessionClient is a client for the UserSession schema.
type UserSessionClient struct {
	config
}

// NewUserSessionClient returns a client for the UserSession from the given config.
func NewUserSessionClient(c config) *UserSessionClient {
	return &UserSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersession.Hooks(f(g(h())))`.
func (c *UserSessionClient) Use(hooks ...Hook) {
	c.hooks.UserSession = append(c.hooks.UserSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersession.Intercept(f(g(h())))`.
func (c *UserSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSession = append(c.inters.UserSession, interceptors...)
}

// Create returns a builder for creating a UserSession entity.
func (c *UserSessionClient) Create() *UserSessionCreate {
	mutation := newUserSessionMutation(c.config, OpCreate)
	return &UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSession entities.
func (c *UserSessionClient) CreateBulk(builders ...*UserSessionCreate) *UserSessionCreateBulk {
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSessionClient) MapCreateBulk(slice any, setFunc func(*UserSessionCreate, int)) *UserSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSessionCreateBulk{err: fmt.Errorf("calling to UserSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSession.
func (c *UserSessionClient) Update() *UserSessionUpdate {
	mutation := newUserSessionMutation(c.config, OpUpdate)
	return &UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionClient) UpdateOne(us *UserSession) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSession(us))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionClient) UpdateOneID(id string) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSessionID(id))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSession.
func (c *UserSessionClient) Delete() *UserSessionDelete {
	mutation := newUserSessionMutation(c.config, OpDelete)
	return &UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSessionClient) DeleteOne(us *UserSession) *UserSessionDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSessionClient) DeleteOneID(id string) *UserSessionDeleteOne {
	builder := c.Delete().Where(usersession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionDeleteOne{builder}
}

// Query returns a query builder for UserSession.
func (c *UserSessionClient) Query() *UserSessionQuery {
	return &UserSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSession},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSession entity by its id.
func (c *UserSessionClient) Get(ctx context.Context, id string) (*UserSession, error) {
	return c.Query().Where(usersession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionClient) GetX(ctx context.Context, id string) *UserSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserSession.
func (c *UserSessionClient) QueryUser(us *UserSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.UserTable, usersession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionClient) Hooks() []Hook {
	hooks := c.hooks.UserSession
	return append(hooks[:len(hooks):len(hooks)], usersession.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserSessionClient) Interceptors() []Interceptor {
	return c.inters.UserSession
}

func (c *UserSessionClient) mutate(ctx context.Context, m *UserSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSession mutation op: %q", m.Op())
	}
}

// UserTokenClient is a client for the UserToken schema.
type UserTokenClient struct {
	config
}

// NewUserTokenClient returns a client for the UserToken from the given config.
func NewUserTokenClient(c config) *UserTokenClient {
	return &UserTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertoken.Hooks(f(g(h())))`.
func (c *UserTokenClient) Use(hooks ...Hook) {
	c.hooks.UserToken = append(c.hooks.UserToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertoken.Intercept(f(g(h())))`.
func (c *UserTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserToken = append(c.inters.UserToken, interceptors...)
}

// Create returns a builder for creating a UserToken entity.
func (c *UserTokenClient) Create() *UserTokenCreate {
	mutation := newUserTokenMutation(c.config, OpCreate)
	return &UserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserToken entities.
func (c *UserTokenClient) CreateBulk(builders ...*UserTokenCreate) *UserTokenCreateBulk {
	return &UserTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTokenClient) MapCreateBulk(slice any, setFunc func(*UserTokenCreate, int)) *UserTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTokenCreateBulk{err: fmt.Errorf("calling to UserTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserToken.
func (c *UserTokenClient) Update() *UserTokenUpdate {
	mutation := newUserTokenMutation(c.config, OpUpdate)
	return &UserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTokenClient) UpdateOne(ut *UserToken) *UserTokenUpdateOne {
	mutation := newUserTokenMutation(c.config, OpUpdateOne, withUserToken(ut))
	return &UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTokenClient) UpdateOneID(id string) *UserTokenUpdateOne {
	mutation := newUserTokenMutation(c.config, OpUpdateOne, withUserTokenID(id))
	return &UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserToken.
func (c *UserTokenClient) Delete() *UserTokenDelete {
	mutation := newUserTokenMutation(c.config, OpDelete)
	return &UserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTokenClient) DeleteOne(ut *UserToken) *UserTokenDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTokenClient) DeleteOneID(id string) *UserTokenDeleteOne {
	builder := c.Delete().Where(usertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTokenDeleteOne{builder}
}

// Query returns a query builder for UserToken.
func (c *UserTokenClient) Query() *UserTokenQuery {
	return &UserTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserToken},
		inters: c.Interceptors(),
	}
}

// Get returns a UserToken entity by its id.
func (c *UserTokenClient) Get(ctx context.Context, id string) (*UserToken, error) {
	return c.Query().Where(usertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTokenClient) GetX(ctx context.Context, id string) *UserToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserToken.
func (c *UserTokenClient) QueryUser(ut *UserToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertoken.Table, usertoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usertoken.UserTable, usertoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildUserTokens queries the child_user_tokens edge of a UserToken.
func (c *UserTokenClient) QueryChildUserTokens(ut *UserToken) *UserTokenQuery {
	query := (&UserTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertoken.Table, usertoken.FieldID, id),
			sqlgraph.To(usertoken.Table, usertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usertoken.ChildUserTokensTable, usertoken.ChildUserTokensColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentUserToken queries the parent_user_token edge of a UserToken.
func (c *UserTokenClient) QueryParentUserToken(ut *UserToken) *UserTokenQuery {
	query := (&UserTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertoken.Table, usertoken.FieldID, id),
			sqlgraph.To(usertoken.Table, usertoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usertoken.ParentUserTokenTable, usertoken.ParentUserTokenColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserTokenClient) Hooks() []Hook {
	hooks := c.hooks.UserToken
	return append(hooks[:len(hooks):len(hooks)], usertoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserTokenClient) Interceptors() []Interceptor {
	return c.inters.UserToken
}

func (c *UserTokenClient) mutate(ctx context.Context, m *UserTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserToken mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ActivityLog, ApiKey, NotificationSetting, PaymentMethod, PrivacySetting,
		Transaction, User, User2fa, UserProfile, UserSession, UserToken []ent.Hook
	}
	inters struct {
		ActivityLog, ApiKey, NotificationSetting, PaymentMethod, PrivacySetting,
		Transaction, User, User2fa, UserProfile, UserSession,
		UserToken []ent.Interceptor
	}
)
