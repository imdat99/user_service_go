// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/user2fa"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// User2faDelete is the builder for deleting a User2fa entity.
type User2faDelete struct {
	config
	hooks    []Hook
	mutation *User2faMutation
}

// Where appends a list predicates to the User2faDelete builder.
func (ud *User2faDelete) Where(ps ...predicate.User2fa) *User2faDelete {
	ud.mutation.Where(ps...)
	return ud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ud *User2faDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ud.sqlExec, ud.mutation, ud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ud *User2faDelete) ExecX(ctx context.Context) int {
	n, err := ud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ud *User2faDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(user2fa.Table, sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString))
	if ps := ud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ud.mutation.done = true
	return affected, err
}

// User2faDeleteOne is the builder for deleting a single User2fa entity.
type User2faDeleteOne struct {
	ud *User2faDelete
}

// Where appends a list predicates to the User2faDelete builder.
func (udo *User2faDeleteOne) Where(ps ...predicate.User2fa) *User2faDeleteOne {
	udo.ud.mutation.Where(ps...)
	return udo
}

// Exec executes the deletion query.
func (udo *User2faDeleteOne) Exec(ctx context.Context) error {
	n, err := udo.ud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{user2fa.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (udo *User2faDeleteOne) ExecX(ctx context.Context) {
	if err := udo.Exec(ctx); err != nil {
		panic(err)
	}
}
