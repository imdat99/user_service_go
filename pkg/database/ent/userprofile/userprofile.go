// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userprofile type in the database.
	Label = "user_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldProfileVisibility holds the string denoting the profile_visibility field in the database.
	FieldProfileVisibility = "profile_visibility"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userprofile in the database.
	Table = "user_profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for userprofile fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldBio,
	FieldWebsite,
	FieldLocation,
	FieldTimezone,
	FieldLanguage,
	FieldGender,
	FieldProfileVisibility,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale           Gender = "male"
	GenderFemale         Gender = "female"
	GenderOther          Gender = "other"
	GenderPreferNotToSay Gender = "prefer_not_to_say"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderOther, GenderPreferNotToSay:
		return nil
	default:
		return fmt.Errorf("userprofile: invalid enum value for gender field: %q", ge)
	}
}

// ProfileVisibility defines the type for the "profile_visibility" enum field.
type ProfileVisibility string

// ProfileVisibility values.
const (
	ProfileVisibilityPublic      ProfileVisibility = "public"
	ProfileVisibilityFriendsOnly ProfileVisibility = "friends_only"
	ProfileVisibilityPrivate     ProfileVisibility = "private"
)

func (pv ProfileVisibility) String() string {
	return string(pv)
}

// ProfileVisibilityValidator is a validator for the "profile_visibility" field enum values. It is called by the builders before save.
func ProfileVisibilityValidator(pv ProfileVisibility) error {
	switch pv {
	case ProfileVisibilityPublic, ProfileVisibilityFriendsOnly, ProfileVisibilityPrivate:
		return nil
	default:
		return fmt.Errorf("userprofile: invalid enum value for profile_visibility field: %q", pv)
	}
}

// OrderOption defines the ordering options for the UserProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByProfileVisibility orders the results by the profile_visibility field.
func ByProfileVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileVisibility, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
