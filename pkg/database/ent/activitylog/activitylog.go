// Code generated by ent, DO NOT EDIT.

package activitylog

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the activitylog type in the database.
	Label = "activity_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "activity_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the activitylog in the database.
	Table = "activity_logs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "activity_logs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for activitylog fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldActivityType,
	FieldDescription,
	FieldIPAddress,
	FieldUserAgent,
	FieldMetadata,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "app/pkg/database/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// ActivityType defines the type for the "activity_type" enum field.
type ActivityType string

// ActivityType values.
const (
	ActivityTypeLogin          ActivityType = "login"
	ActivityTypeLogout         ActivityType = "logout"
	ActivityTypeProfileUpdate  ActivityType = "profile_update"
	ActivityTypePasswordChange ActivityType = "password_change"
	ActivityTypeEmailChange    ActivityType = "email_change"
	ActivityTypePhoneChange    ActivityType = "phone_change"
	ActivityType2faEnable      ActivityType = "2fa_enable"
	ActivityType2faDisable     ActivityType = "2fa_disable"
	ActivityTypePaymentAdd     ActivityType = "payment_add"
	ActivityTypePaymentRemove  ActivityType = "payment_remove"
	ActivityTypeTransaction    ActivityType = "transaction"
)

func (at ActivityType) String() string {
	return string(at)
}

// ActivityTypeValidator is a validator for the "activity_type" field enum values. It is called by the builders before save.
func ActivityTypeValidator(at ActivityType) error {
	switch at {
	case ActivityTypeLogin, ActivityTypeLogout, ActivityTypeProfileUpdate, ActivityTypePasswordChange, ActivityTypeEmailChange, ActivityTypePhoneChange, ActivityType2faEnable, ActivityType2faDisable, ActivityTypePaymentAdd, ActivityTypePaymentRemove, ActivityTypeTransaction:
		return nil
	default:
		return fmt.Errorf("activitylog: invalid enum value for activity_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the ActivityLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByActivityType orders the results by the activity_type field.
func ByActivityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
