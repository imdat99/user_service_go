// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActivityLogsColumns holds the columns for the "activity_logs" table.
	ActivityLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "activity_type", Type: field.TypeEnum, Enums: []string{"login", "logout", "profile_update", "password_change", "email_change", "phone_change", "2fa_enable", "2fa_disable", "payment_add", "payment_remove", "transaction"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// ActivityLogsTable holds the schema information for the "activity_logs" table.
	ActivityLogsTable = &schema.Table{
		Name:       "activity_logs",
		Columns:    ActivityLogsColumns,
		PrimaryKey: []*schema.Column{ActivityLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activity_logs_users_activity_logs",
				Columns:    []*schema.Column{ActivityLogsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "key_name", Type: field.TypeString},
		{Name: "api_key_hash", Type: field.TypeString, Unique: true},
		{Name: "api_key_prefix", Type: field.TypeString},
		{Name: "permissions", Type: field.TypeJSON, Nullable: true},
		{Name: "rate_limit_per_minute", Type: field.TypeInt32, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Nullable: true},
		{Name: "last_used_at", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationSettingsColumns holds the columns for the "notification_settings" table.
	NotificationSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "email_notifications", Type: field.TypeBool, Nullable: true},
		{Name: "sms_notifications", Type: field.TypeBool, Nullable: true},
		{Name: "push_notifications", Type: field.TypeBool, Nullable: true},
		{Name: "marketing_emails", Type: field.TypeBool, Nullable: true},
		{Name: "security_alerts", Type: field.TypeBool, Nullable: true},
		{Name: "login_alerts", Type: field.TypeBool, Nullable: true},
		{Name: "profile_updates", Type: field.TypeBool, Nullable: true},
		{Name: "payment_notifications", Type: field.TypeBool, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// NotificationSettingsTable holds the schema information for the "notification_settings" table.
	NotificationSettingsTable = &schema.Table{
		Name:       "notification_settings",
		Columns:    NotificationSettingsColumns,
		PrimaryKey: []*schema.Column{NotificationSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notification_settings_users_notification_setting",
				Columns:    []*schema.Column{NotificationSettingsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PaymentMethodsColumns holds the columns for the "payment_methods" table.
	PaymentMethodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "method_type", Type: field.TypeEnum, Enums: []string{"credit_card", "debit_card", "paypal", "bank_transfer", "digital_wallet"}},
		{Name: "provider", Type: field.TypeString},
		{Name: "masked_number", Type: field.TypeString, Nullable: true},
		{Name: "holder_name", Type: field.TypeString, Nullable: true},
		{Name: "expiry_month", Type: field.TypeInt8, Nullable: true},
		{Name: "expiry_year", Type: field.TypeInt16, Nullable: true},
		{Name: "is_default", Type: field.TypeBool, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Nullable: true},
		{Name: "external_id", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// PaymentMethodsTable holds the schema information for the "payment_methods" table.
	PaymentMethodsTable = &schema.Table{
		Name:       "payment_methods",
		Columns:    PaymentMethodsColumns,
		PrimaryKey: []*schema.Column{PaymentMethodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_methods_users_payment_methods",
				Columns:    []*schema.Column{PaymentMethodsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PrivacySettingsColumns holds the columns for the "privacy_settings" table.
	PrivacySettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "profile_visibility", Type: field.TypeEnum, Nullable: true, Enums: []string{"public", "friends_only", "private"}},
		{Name: "show_email", Type: field.TypeBool, Nullable: true},
		{Name: "show_phone", Type: field.TypeBool, Nullable: true},
		{Name: "show_birth_date", Type: field.TypeBool, Nullable: true},
		{Name: "allow_search_engines", Type: field.TypeBool, Nullable: true},
		{Name: "data_sharing_consent", Type: field.TypeBool, Nullable: true},
		{Name: "analytics_consent", Type: field.TypeBool, Nullable: true},
		{Name: "marketing_consent", Type: field.TypeBool, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// PrivacySettingsTable holds the schema information for the "privacy_settings" table.
	PrivacySettingsTable = &schema.Table{
		Name:       "privacy_settings",
		Columns:    PrivacySettingsColumns,
		PrimaryKey: []*schema.Column{PrivacySettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "privacy_settings_users_privacy_setting",
				Columns:    []*schema.Column{PrivacySettingsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "transaction_type", Type: field.TypeEnum, Enums: []string{"payment", "refund", "subscription", "purchase", "withdrawal"}},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "currency", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Nullable: true, Enums: []string{"pending", "completed", "failed", "cancelled", "refunded"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "external_transaction_id", Type: field.TypeString, Nullable: true},
		{Name: "reference_number", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "processed_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "payment_method_id", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_payment_methods_transactions",
				Columns:    []*schema.Column{TransactionsColumns[12]},
				RefColumns: []*schema.Column{PaymentMethodsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_users_transactions",
				Columns:    []*schema.Column{TransactionsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "date_of_birth", Type: field.TypeTime, Nullable: true},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
		{Name: "email_verified", Type: field.TypeBool, Nullable: true},
		{Name: "phone_verified", Type: field.TypeBool, Nullable: true},
		{Name: "account_status", Type: field.TypeEnum, Nullable: true, Enums: []string{"active", "inactive", "suspended", "pending"}},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// User2faColumns holds the columns for the "user_2fa" table.
	User2faColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "is_enabled", Type: field.TypeBool, Nullable: true},
		{Name: "secret_key", Type: field.TypeString, Nullable: true},
		{Name: "backup_codes", Type: field.TypeJSON, Nullable: true},
		{Name: "method", Type: field.TypeEnum, Nullable: true, Enums: []string{"totp", "sms", "email"}},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "email_address", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// User2faTable holds the schema information for the "user_2fa" table.
	User2faTable = &schema.Table{
		Name:       "user_2fa",
		Columns:    User2faColumns,
		PrimaryKey: []*schema.Column{User2faColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_2fa_users_user_2fa",
				Columns:    []*schema.Column{User2faColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserProfilesColumns holds the columns for the "user_profiles" table.
	UserProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "bio", Type: field.TypeString, Nullable: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "language", Type: field.TypeString, Nullable: true},
		{Name: "gender", Type: field.TypeEnum, Nullable: true, Enums: []string{"male", "female", "other", "prefer_not_to_say"}},
		{Name: "profile_visibility", Type: field.TypeEnum, Nullable: true, Enums: []string{"public", "friends_only", "private"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// UserProfilesTable holds the schema information for the "user_profiles" table.
	UserProfilesTable = &schema.Table{
		Name:       "user_profiles",
		Columns:    UserProfilesColumns,
		PrimaryKey: []*schema.Column{UserProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_profiles_users_user_profile",
				Columns:    []*schema.Column{UserProfilesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserSessionsColumns holds the columns for the "user_sessions" table.
	UserSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "session_token", Type: field.TypeString, Unique: true},
		{Name: "device_info", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// UserSessionsTable holds the schema information for the "user_sessions" table.
	UserSessionsTable = &schema.Table{
		Name:       "user_sessions",
		Columns:    UserSessionsColumns,
		PrimaryKey: []*schema.Column{UserSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sessions_users_user_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserTokensColumns holds the columns for the "user_tokens" table.
	UserTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "token_type", Type: field.TypeEnum, Enums: []string{"access_token", "refresh_token"}},
		{Name: "token_hash", Type: field.TypeString},
		{Name: "jti", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "is_revoked", Type: field.TypeBool, Nullable: true},
		{Name: "device_info", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_used_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
		{Name: "parent_token_id", Type: field.TypeString, Nullable: true},
	}
	// UserTokensTable holds the schema information for the "user_tokens" table.
	UserTokensTable = &schema.Table{
		Name:       "user_tokens",
		Columns:    UserTokensColumns,
		PrimaryKey: []*schema.Column{UserTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tokens_users_user_tokens",
				Columns:    []*schema.Column{UserTokensColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_tokens_user_tokens_child_user_tokens",
				Columns:    []*schema.Column{UserTokensColumns[13]},
				RefColumns: []*schema.Column{UserTokensColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActivityLogsTable,
		APIKeysTable,
		NotificationSettingsTable,
		PaymentMethodsTable,
		PrivacySettingsTable,
		TransactionsTable,
		UsersTable,
		User2faTable,
		UserProfilesTable,
		UserSessionsTable,
		UserTokensTable,
	}
)

func init() {
	ActivityLogsTable.ForeignKeys[0].RefTable = UsersTable
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	NotificationSettingsTable.ForeignKeys[0].RefTable = UsersTable
	PaymentMethodsTable.ForeignKeys[0].RefTable = UsersTable
	PrivacySettingsTable.ForeignKeys[0].RefTable = UsersTable
	TransactionsTable.ForeignKeys[0].RefTable = PaymentMethodsTable
	TransactionsTable.ForeignKeys[1].RefTable = UsersTable
	User2faTable.ForeignKeys[0].RefTable = UsersTable
	User2faTable.Annotation = &entsql.Annotation{
		Table: "user_2fa",
	}
	UserProfilesTable.ForeignKeys[0].RefTable = UsersTable
	UserSessionsTable.ForeignKeys[0].RefTable = UsersTable
	UserTokensTable.ForeignKeys[0].RefTable = UsersTable
	UserTokensTable.ForeignKeys[1].RefTable = UserTokensTable
}
