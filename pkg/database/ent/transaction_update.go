// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TransactionUpdate) SetUserID(s string) *TransactionUpdate {
	tu.mutation.SetUserID(s)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUserID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetUserID(*s)
	}
	return tu
}

// ClearUserID clears the value of the "user_id" field.
func (tu *TransactionUpdate) ClearUserID() *TransactionUpdate {
	tu.mutation.ClearUserID()
	return tu
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (tu *TransactionUpdate) SetPaymentMethodID(s string) *TransactionUpdate {
	tu.mutation.SetPaymentMethodID(s)
	return tu
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillablePaymentMethodID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetPaymentMethodID(*s)
	}
	return tu
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (tu *TransactionUpdate) ClearPaymentMethodID() *TransactionUpdate {
	tu.mutation.ClearPaymentMethodID()
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(tt transaction.TransactionType) *TransactionUpdate {
	tu.mutation.SetTransactionType(tt)
	return tu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionType(tt *transaction.TransactionType) *TransactionUpdate {
	if tt != nil {
		tu.SetTransactionType(*tt)
	}
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetAmount(*f)
	}
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TransactionUpdate) AddAmount(f float64) *TransactionUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetCurrency sets the "currency" field.
func (tu *TransactionUpdate) SetCurrency(s string) *TransactionUpdate {
	tu.mutation.SetCurrency(s)
	return tu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCurrency(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetCurrency(*s)
	}
	return tu
}

// ClearCurrency clears the value of the "currency" field.
func (tu *TransactionUpdate) ClearCurrency() *TransactionUpdate {
	tu.mutation.ClearCurrency()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(t transaction.Status) *TransactionUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(t *transaction.Status) *TransactionUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TransactionUpdate) ClearStatus() *TransactionUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TransactionUpdate) SetDescription(s string) *TransactionUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDescription(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TransactionUpdate) ClearDescription() *TransactionUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetExternalTransactionID sets the "external_transaction_id" field.
func (tu *TransactionUpdate) SetExternalTransactionID(s string) *TransactionUpdate {
	tu.mutation.SetExternalTransactionID(s)
	return tu
}

// SetNillableExternalTransactionID sets the "external_transaction_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableExternalTransactionID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetExternalTransactionID(*s)
	}
	return tu
}

// ClearExternalTransactionID clears the value of the "external_transaction_id" field.
func (tu *TransactionUpdate) ClearExternalTransactionID() *TransactionUpdate {
	tu.mutation.ClearExternalTransactionID()
	return tu
}

// SetReferenceNumber sets the "reference_number" field.
func (tu *TransactionUpdate) SetReferenceNumber(s string) *TransactionUpdate {
	tu.mutation.SetReferenceNumber(s)
	return tu
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableReferenceNumber(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetReferenceNumber(*s)
	}
	return tu
}

// ClearReferenceNumber clears the value of the "reference_number" field.
func (tu *TransactionUpdate) ClearReferenceNumber() *TransactionUpdate {
	tu.mutation.ClearReferenceNumber()
	return tu
}

// SetMetadata sets the "metadata" field.
func (tu *TransactionUpdate) SetMetadata(jm json.RawMessage) *TransactionUpdate {
	tu.mutation.SetMetadata(jm)
	return tu
}

// AppendMetadata appends jm to the "metadata" field.
func (tu *TransactionUpdate) AppendMetadata(jm json.RawMessage) *TransactionUpdate {
	tu.mutation.AppendMetadata(jm)
	return tu
}

// ClearMetadata clears the value of the "metadata" field.
func (tu *TransactionUpdate) ClearMetadata() *TransactionUpdate {
	tu.mutation.ClearMetadata()
	return tu
}

// SetProcessedAt sets the "processed_at" field.
func (tu *TransactionUpdate) SetProcessedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetProcessedAt(t)
	return tu
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableProcessedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetProcessedAt(*t)
	}
	return tu
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (tu *TransactionUpdate) ClearProcessedAt() *TransactionUpdate {
	tu.mutation.ClearProcessedAt()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TransactionUpdate) ClearCreatedAt() *TransactionUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUpdatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TransactionUpdate) ClearUpdatedAt() *TransactionUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TransactionUpdate) SetUser(u *User) *TransactionUpdate {
	return tu.SetUserID(u.ID)
}

// SetPaymentMethod sets the "payment_method" edge to the PaymentMethod entity.
func (tu *TransactionUpdate) SetPaymentMethod(p *PaymentMethod) *TransactionUpdate {
	return tu.SetPaymentMethodID(p.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TransactionUpdate) ClearUser() *TransactionUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearPaymentMethod clears the "payment_method" edge to the PaymentMethod entity.
func (tu *TransactionUpdate) ClearPaymentMethod() *TransactionUpdate {
	tu.mutation.ClearPaymentMethod()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if tu.mutation.CurrencyCleared() {
		_spec.ClearField(transaction.FieldCurrency, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(transaction.FieldStatus, field.TypeEnum)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.ExternalTransactionID(); ok {
		_spec.SetField(transaction.FieldExternalTransactionID, field.TypeString, value)
	}
	if tu.mutation.ExternalTransactionIDCleared() {
		_spec.ClearField(transaction.FieldExternalTransactionID, field.TypeString)
	}
	if value, ok := tu.mutation.ReferenceNumber(); ok {
		_spec.SetField(transaction.FieldReferenceNumber, field.TypeString, value)
	}
	if tu.mutation.ReferenceNumberCleared() {
		_spec.ClearField(transaction.FieldReferenceNumber, field.TypeString)
	}
	if value, ok := tu.mutation.Metadata(); ok {
		_spec.SetField(transaction.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldMetadata, value)
		})
	}
	if tu.mutation.MetadataCleared() {
		_spec.ClearField(transaction.FieldMetadata, field.TypeJSON)
	}
	if value, ok := tu.mutation.ProcessedAt(); ok {
		_spec.SetField(transaction.FieldProcessedAt, field.TypeTime, value)
	}
	if tu.mutation.ProcessedAtCleared() {
		_spec.ClearField(transaction.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PaymentMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PaymentMethodTable,
			Columns: []string{transaction.PaymentMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PaymentMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PaymentMethodTable,
			Columns: []string{transaction.PaymentMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUserID sets the "user_id" field.
func (tuo *TransactionUpdateOne) SetUserID(s string) *TransactionUpdateOne {
	tuo.mutation.SetUserID(s)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUserID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetUserID(*s)
	}
	return tuo
}

// ClearUserID clears the value of the "user_id" field.
func (tuo *TransactionUpdateOne) ClearUserID() *TransactionUpdateOne {
	tuo.mutation.ClearUserID()
	return tuo
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (tuo *TransactionUpdateOne) SetPaymentMethodID(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentMethodID(s)
	return tuo
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillablePaymentMethodID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetPaymentMethodID(*s)
	}
	return tuo
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (tuo *TransactionUpdateOne) ClearPaymentMethodID() *TransactionUpdateOne {
	tuo.mutation.ClearPaymentMethodID()
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(tt transaction.TransactionType) *TransactionUpdateOne {
	tuo.mutation.SetTransactionType(tt)
	return tuo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionType(tt *transaction.TransactionType) *TransactionUpdateOne {
	if tt != nil {
		tuo.SetTransactionType(*tt)
	}
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetAmount(*f)
	}
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetCurrency sets the "currency" field.
func (tuo *TransactionUpdateOne) SetCurrency(s string) *TransactionUpdateOne {
	tuo.mutation.SetCurrency(s)
	return tuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCurrency(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetCurrency(*s)
	}
	return tuo
}

// ClearCurrency clears the value of the "currency" field.
func (tuo *TransactionUpdateOne) ClearCurrency() *TransactionUpdateOne {
	tuo.mutation.ClearCurrency()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(t transaction.Status) *TransactionUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(t *transaction.Status) *TransactionUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TransactionUpdateOne) ClearStatus() *TransactionUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TransactionUpdateOne) SetDescription(s string) *TransactionUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDescription(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TransactionUpdateOne) ClearDescription() *TransactionUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetExternalTransactionID sets the "external_transaction_id" field.
func (tuo *TransactionUpdateOne) SetExternalTransactionID(s string) *TransactionUpdateOne {
	tuo.mutation.SetExternalTransactionID(s)
	return tuo
}

// SetNillableExternalTransactionID sets the "external_transaction_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableExternalTransactionID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetExternalTransactionID(*s)
	}
	return tuo
}

// ClearExternalTransactionID clears the value of the "external_transaction_id" field.
func (tuo *TransactionUpdateOne) ClearExternalTransactionID() *TransactionUpdateOne {
	tuo.mutation.ClearExternalTransactionID()
	return tuo
}

// SetReferenceNumber sets the "reference_number" field.
func (tuo *TransactionUpdateOne) SetReferenceNumber(s string) *TransactionUpdateOne {
	tuo.mutation.SetReferenceNumber(s)
	return tuo
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableReferenceNumber(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetReferenceNumber(*s)
	}
	return tuo
}

// ClearReferenceNumber clears the value of the "reference_number" field.
func (tuo *TransactionUpdateOne) ClearReferenceNumber() *TransactionUpdateOne {
	tuo.mutation.ClearReferenceNumber()
	return tuo
}

// SetMetadata sets the "metadata" field.
func (tuo *TransactionUpdateOne) SetMetadata(jm json.RawMessage) *TransactionUpdateOne {
	tuo.mutation.SetMetadata(jm)
	return tuo
}

// AppendMetadata appends jm to the "metadata" field.
func (tuo *TransactionUpdateOne) AppendMetadata(jm json.RawMessage) *TransactionUpdateOne {
	tuo.mutation.AppendMetadata(jm)
	return tuo
}

// ClearMetadata clears the value of the "metadata" field.
func (tuo *TransactionUpdateOne) ClearMetadata() *TransactionUpdateOne {
	tuo.mutation.ClearMetadata()
	return tuo
}

// SetProcessedAt sets the "processed_at" field.
func (tuo *TransactionUpdateOne) SetProcessedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetProcessedAt(t)
	return tuo
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableProcessedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetProcessedAt(*t)
	}
	return tuo
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (tuo *TransactionUpdateOne) ClearProcessedAt() *TransactionUpdateOne {
	tuo.mutation.ClearProcessedAt()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TransactionUpdateOne) ClearCreatedAt() *TransactionUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUpdatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TransactionUpdateOne) ClearUpdatedAt() *TransactionUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TransactionUpdateOne) SetUser(u *User) *TransactionUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetPaymentMethod sets the "payment_method" edge to the PaymentMethod entity.
func (tuo *TransactionUpdateOne) SetPaymentMethod(p *PaymentMethod) *TransactionUpdateOne {
	return tuo.SetPaymentMethodID(p.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TransactionUpdateOne) ClearUser() *TransactionUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearPaymentMethod clears the "payment_method" edge to the PaymentMethod entity.
func (tuo *TransactionUpdateOne) ClearPaymentMethod() *TransactionUpdateOne {
	tuo.mutation.ClearPaymentMethod()
	return tuo
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if tuo.mutation.CurrencyCleared() {
		_spec.ClearField(transaction.FieldCurrency, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(transaction.FieldStatus, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.ExternalTransactionID(); ok {
		_spec.SetField(transaction.FieldExternalTransactionID, field.TypeString, value)
	}
	if tuo.mutation.ExternalTransactionIDCleared() {
		_spec.ClearField(transaction.FieldExternalTransactionID, field.TypeString)
	}
	if value, ok := tuo.mutation.ReferenceNumber(); ok {
		_spec.SetField(transaction.FieldReferenceNumber, field.TypeString, value)
	}
	if tuo.mutation.ReferenceNumberCleared() {
		_spec.ClearField(transaction.FieldReferenceNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.Metadata(); ok {
		_spec.SetField(transaction.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldMetadata, value)
		})
	}
	if tuo.mutation.MetadataCleared() {
		_spec.ClearField(transaction.FieldMetadata, field.TypeJSON)
	}
	if value, ok := tuo.mutation.ProcessedAt(); ok {
		_spec.SetField(transaction.FieldProcessedAt, field.TypeTime, value)
	}
	if tuo.mutation.ProcessedAtCleared() {
		_spec.ClearField(transaction.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PaymentMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PaymentMethodTable,
			Columns: []string{transaction.PaymentMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PaymentMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PaymentMethodTable,
			Columns: []string{transaction.PaymentMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
