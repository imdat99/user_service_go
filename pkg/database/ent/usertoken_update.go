// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"app/pkg/database/ent/predicate"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/usertoken"
)

// UserTokenUpdate is the builder for updating UserToken entities.
type UserTokenUpdate struct {
	config
	hooks    []Hook
	mutation *UserTokenMutation
}

// Where appends a list predicates to the UserTokenUpdate builder.
func (utu *UserTokenUpdate) Where(ps ...predicate.UserToken) *UserTokenUpdate {
	utu.mutation.Where(ps...)
	return utu
}

// SetUserID sets the "user_id" field.
func (utu *UserTokenUpdate) SetUserID(s string) *UserTokenUpdate {
	utu.mutation.SetUserID(s)
	return utu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableUserID(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetUserID(*s)
	}
	return utu
}

// ClearUserID clears the value of the "user_id" field.
func (utu *UserTokenUpdate) ClearUserID() *UserTokenUpdate {
	utu.mutation.ClearUserID()
	return utu
}

// SetTokenType sets the "token_type" field.
func (utu *UserTokenUpdate) SetTokenType(ut usertoken.TokenType) *UserTokenUpdate {
	utu.mutation.SetTokenType(ut)
	return utu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableTokenType(ut *usertoken.TokenType) *UserTokenUpdate {
	if ut != nil {
		utu.SetTokenType(*ut)
	}
	return utu
}

// SetTokenHash sets the "token_hash" field.
func (utu *UserTokenUpdate) SetTokenHash(s string) *UserTokenUpdate {
	utu.mutation.SetTokenHash(s)
	return utu
}

// SetNillableTokenHash sets the "token_hash" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableTokenHash(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetTokenHash(*s)
	}
	return utu
}

// SetJti sets the "jti" field.
func (utu *UserTokenUpdate) SetJti(s string) *UserTokenUpdate {
	utu.mutation.SetJti(s)
	return utu
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableJti(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetJti(*s)
	}
	return utu
}

// SetExpiresAt sets the "expires_at" field.
func (utu *UserTokenUpdate) SetExpiresAt(t time.Time) *UserTokenUpdate {
	utu.mutation.SetExpiresAt(t)
	return utu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableExpiresAt(t *time.Time) *UserTokenUpdate {
	if t != nil {
		utu.SetExpiresAt(*t)
	}
	return utu
}

// SetIsRevoked sets the "is_revoked" field.
func (utu *UserTokenUpdate) SetIsRevoked(b bool) *UserTokenUpdate {
	utu.mutation.SetIsRevoked(b)
	return utu
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableIsRevoked(b *bool) *UserTokenUpdate {
	if b != nil {
		utu.SetIsRevoked(*b)
	}
	return utu
}

// ClearIsRevoked clears the value of the "is_revoked" field.
func (utu *UserTokenUpdate) ClearIsRevoked() *UserTokenUpdate {
	utu.mutation.ClearIsRevoked()
	return utu
}

// SetDeviceInfo sets the "device_info" field.
func (utu *UserTokenUpdate) SetDeviceInfo(s string) *UserTokenUpdate {
	utu.mutation.SetDeviceInfo(s)
	return utu
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableDeviceInfo(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetDeviceInfo(*s)
	}
	return utu
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (utu *UserTokenUpdate) ClearDeviceInfo() *UserTokenUpdate {
	utu.mutation.ClearDeviceInfo()
	return utu
}

// SetIPAddress sets the "ip_address" field.
func (utu *UserTokenUpdate) SetIPAddress(s string) *UserTokenUpdate {
	utu.mutation.SetIPAddress(s)
	return utu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableIPAddress(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetIPAddress(*s)
	}
	return utu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (utu *UserTokenUpdate) ClearIPAddress() *UserTokenUpdate {
	utu.mutation.ClearIPAddress()
	return utu
}

// SetUserAgent sets the "user_agent" field.
func (utu *UserTokenUpdate) SetUserAgent(s string) *UserTokenUpdate {
	utu.mutation.SetUserAgent(s)
	return utu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableUserAgent(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetUserAgent(*s)
	}
	return utu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (utu *UserTokenUpdate) ClearUserAgent() *UserTokenUpdate {
	utu.mutation.ClearUserAgent()
	return utu
}

// SetParentTokenID sets the "parent_token_id" field.
func (utu *UserTokenUpdate) SetParentTokenID(s string) *UserTokenUpdate {
	utu.mutation.SetParentTokenID(s)
	return utu
}

// SetNillableParentTokenID sets the "parent_token_id" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableParentTokenID(s *string) *UserTokenUpdate {
	if s != nil {
		utu.SetParentTokenID(*s)
	}
	return utu
}

// ClearParentTokenID clears the value of the "parent_token_id" field.
func (utu *UserTokenUpdate) ClearParentTokenID() *UserTokenUpdate {
	utu.mutation.ClearParentTokenID()
	return utu
}

// SetCreatedAt sets the "created_at" field.
func (utu *UserTokenUpdate) SetCreatedAt(t time.Time) *UserTokenUpdate {
	utu.mutation.SetCreatedAt(t)
	return utu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableCreatedAt(t *time.Time) *UserTokenUpdate {
	if t != nil {
		utu.SetCreatedAt(*t)
	}
	return utu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (utu *UserTokenUpdate) ClearCreatedAt() *UserTokenUpdate {
	utu.mutation.ClearCreatedAt()
	return utu
}

// SetRevokedAt sets the "revoked_at" field.
func (utu *UserTokenUpdate) SetRevokedAt(t time.Time) *UserTokenUpdate {
	utu.mutation.SetRevokedAt(t)
	return utu
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableRevokedAt(t *time.Time) *UserTokenUpdate {
	if t != nil {
		utu.SetRevokedAt(*t)
	}
	return utu
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (utu *UserTokenUpdate) ClearRevokedAt() *UserTokenUpdate {
	utu.mutation.ClearRevokedAt()
	return utu
}

// SetLastUsedAt sets the "last_used_at" field.
func (utu *UserTokenUpdate) SetLastUsedAt(t time.Time) *UserTokenUpdate {
	utu.mutation.SetLastUsedAt(t)
	return utu
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableLastUsedAt(t *time.Time) *UserTokenUpdate {
	if t != nil {
		utu.SetLastUsedAt(*t)
	}
	return utu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (utu *UserTokenUpdate) ClearLastUsedAt() *UserTokenUpdate {
	utu.mutation.ClearLastUsedAt()
	return utu
}

// SetUser sets the "user" edge to the User entity.
func (utu *UserTokenUpdate) SetUser(u *User) *UserTokenUpdate {
	return utu.SetUserID(u.ID)
}

// AddChildUserTokenIDs adds the "child_user_tokens" edge to the UserToken entity by IDs.
func (utu *UserTokenUpdate) AddChildUserTokenIDs(ids ...string) *UserTokenUpdate {
	utu.mutation.AddChildUserTokenIDs(ids...)
	return utu
}

// AddChildUserTokens adds the "child_user_tokens" edges to the UserToken entity.
func (utu *UserTokenUpdate) AddChildUserTokens(u ...*UserToken) *UserTokenUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utu.AddChildUserTokenIDs(ids...)
}

// SetParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID.
func (utu *UserTokenUpdate) SetParentUserTokenID(id string) *UserTokenUpdate {
	utu.mutation.SetParentUserTokenID(id)
	return utu
}

// SetNillableParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableParentUserTokenID(id *string) *UserTokenUpdate {
	if id != nil {
		utu = utu.SetParentUserTokenID(*id)
	}
	return utu
}

// SetParentUserToken sets the "parent_user_token" edge to the UserToken entity.
func (utu *UserTokenUpdate) SetParentUserToken(u *UserToken) *UserTokenUpdate {
	return utu.SetParentUserTokenID(u.ID)
}

// Mutation returns the UserTokenMutation object of the builder.
func (utu *UserTokenUpdate) Mutation() *UserTokenMutation {
	return utu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utu *UserTokenUpdate) ClearUser() *UserTokenUpdate {
	utu.mutation.ClearUser()
	return utu
}

// ClearChildUserTokens clears all "child_user_tokens" edges to the UserToken entity.
func (utu *UserTokenUpdate) ClearChildUserTokens() *UserTokenUpdate {
	utu.mutation.ClearChildUserTokens()
	return utu
}

// RemoveChildUserTokenIDs removes the "child_user_tokens" edge to UserToken entities by IDs.
func (utu *UserTokenUpdate) RemoveChildUserTokenIDs(ids ...string) *UserTokenUpdate {
	utu.mutation.RemoveChildUserTokenIDs(ids...)
	return utu
}

// RemoveChildUserTokens removes "child_user_tokens" edges to UserToken entities.
func (utu *UserTokenUpdate) RemoveChildUserTokens(u ...*UserToken) *UserTokenUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utu.RemoveChildUserTokenIDs(ids...)
}

// ClearParentUserToken clears the "parent_user_token" edge to the UserToken entity.
func (utu *UserTokenUpdate) ClearParentUserToken() *UserTokenUpdate {
	utu.mutation.ClearParentUserToken()
	return utu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utu *UserTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utu.sqlSave, utu.mutation, utu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UserTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UserTokenUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UserTokenUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utu *UserTokenUpdate) check() error {
	if v, ok := utu.mutation.TokenType(); ok {
		if err := usertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "UserToken.token_type": %w`, err)}
		}
	}
	return nil
}

func (utu *UserTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertoken.Table, usertoken.Columns, sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString))
	if ps := utu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utu.mutation.TokenType(); ok {
		_spec.SetField(usertoken.FieldTokenType, field.TypeEnum, value)
	}
	if value, ok := utu.mutation.TokenHash(); ok {
		_spec.SetField(usertoken.FieldTokenHash, field.TypeString, value)
	}
	if value, ok := utu.mutation.Jti(); ok {
		_spec.SetField(usertoken.FieldJti, field.TypeString, value)
	}
	if value, ok := utu.mutation.ExpiresAt(); ok {
		_spec.SetField(usertoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := utu.mutation.IsRevoked(); ok {
		_spec.SetField(usertoken.FieldIsRevoked, field.TypeBool, value)
	}
	if utu.mutation.IsRevokedCleared() {
		_spec.ClearField(usertoken.FieldIsRevoked, field.TypeBool)
	}
	if value, ok := utu.mutation.DeviceInfo(); ok {
		_spec.SetField(usertoken.FieldDeviceInfo, field.TypeString, value)
	}
	if utu.mutation.DeviceInfoCleared() {
		_spec.ClearField(usertoken.FieldDeviceInfo, field.TypeString)
	}
	if value, ok := utu.mutation.IPAddress(); ok {
		_spec.SetField(usertoken.FieldIPAddress, field.TypeString, value)
	}
	if utu.mutation.IPAddressCleared() {
		_spec.ClearField(usertoken.FieldIPAddress, field.TypeString)
	}
	if value, ok := utu.mutation.UserAgent(); ok {
		_spec.SetField(usertoken.FieldUserAgent, field.TypeString, value)
	}
	if utu.mutation.UserAgentCleared() {
		_spec.ClearField(usertoken.FieldUserAgent, field.TypeString)
	}
	if value, ok := utu.mutation.CreatedAt(); ok {
		_spec.SetField(usertoken.FieldCreatedAt, field.TypeTime, value)
	}
	if utu.mutation.CreatedAtCleared() {
		_spec.ClearField(usertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := utu.mutation.RevokedAt(); ok {
		_spec.SetField(usertoken.FieldRevokedAt, field.TypeTime, value)
	}
	if utu.mutation.RevokedAtCleared() {
		_spec.ClearField(usertoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := utu.mutation.LastUsedAt(); ok {
		_spec.SetField(usertoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if utu.mutation.LastUsedAtCleared() {
		_spec.ClearField(usertoken.FieldLastUsedAt, field.TypeTime)
	}
	if utu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utu.mutation.ChildUserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utu.mutation.RemovedChildUserTokensIDs(); len(nodes) > 0 && !utu.mutation.ChildUserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utu.mutation.ChildUserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utu.mutation.ParentUserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.ParentUserTokenTable,
			Columns: []string{usertoken.ParentUserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utu.mutation.ParentUserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.ParentUserTokenTable,
			Columns: []string{usertoken.ParentUserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utu.mutation.done = true
	return n, nil
}

// UserTokenUpdateOne is the builder for updating a single UserToken entity.
type UserTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTokenMutation
}

// SetUserID sets the "user_id" field.
func (utuo *UserTokenUpdateOne) SetUserID(s string) *UserTokenUpdateOne {
	utuo.mutation.SetUserID(s)
	return utuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableUserID(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetUserID(*s)
	}
	return utuo
}

// ClearUserID clears the value of the "user_id" field.
func (utuo *UserTokenUpdateOne) ClearUserID() *UserTokenUpdateOne {
	utuo.mutation.ClearUserID()
	return utuo
}

// SetTokenType sets the "token_type" field.
func (utuo *UserTokenUpdateOne) SetTokenType(ut usertoken.TokenType) *UserTokenUpdateOne {
	utuo.mutation.SetTokenType(ut)
	return utuo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableTokenType(ut *usertoken.TokenType) *UserTokenUpdateOne {
	if ut != nil {
		utuo.SetTokenType(*ut)
	}
	return utuo
}

// SetTokenHash sets the "token_hash" field.
func (utuo *UserTokenUpdateOne) SetTokenHash(s string) *UserTokenUpdateOne {
	utuo.mutation.SetTokenHash(s)
	return utuo
}

// SetNillableTokenHash sets the "token_hash" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableTokenHash(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetTokenHash(*s)
	}
	return utuo
}

// SetJti sets the "jti" field.
func (utuo *UserTokenUpdateOne) SetJti(s string) *UserTokenUpdateOne {
	utuo.mutation.SetJti(s)
	return utuo
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableJti(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetJti(*s)
	}
	return utuo
}

// SetExpiresAt sets the "expires_at" field.
func (utuo *UserTokenUpdateOne) SetExpiresAt(t time.Time) *UserTokenUpdateOne {
	utuo.mutation.SetExpiresAt(t)
	return utuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *UserTokenUpdateOne {
	if t != nil {
		utuo.SetExpiresAt(*t)
	}
	return utuo
}

// SetIsRevoked sets the "is_revoked" field.
func (utuo *UserTokenUpdateOne) SetIsRevoked(b bool) *UserTokenUpdateOne {
	utuo.mutation.SetIsRevoked(b)
	return utuo
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableIsRevoked(b *bool) *UserTokenUpdateOne {
	if b != nil {
		utuo.SetIsRevoked(*b)
	}
	return utuo
}

// ClearIsRevoked clears the value of the "is_revoked" field.
func (utuo *UserTokenUpdateOne) ClearIsRevoked() *UserTokenUpdateOne {
	utuo.mutation.ClearIsRevoked()
	return utuo
}

// SetDeviceInfo sets the "device_info" field.
func (utuo *UserTokenUpdateOne) SetDeviceInfo(s string) *UserTokenUpdateOne {
	utuo.mutation.SetDeviceInfo(s)
	return utuo
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableDeviceInfo(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetDeviceInfo(*s)
	}
	return utuo
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (utuo *UserTokenUpdateOne) ClearDeviceInfo() *UserTokenUpdateOne {
	utuo.mutation.ClearDeviceInfo()
	return utuo
}

// SetIPAddress sets the "ip_address" field.
func (utuo *UserTokenUpdateOne) SetIPAddress(s string) *UserTokenUpdateOne {
	utuo.mutation.SetIPAddress(s)
	return utuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableIPAddress(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetIPAddress(*s)
	}
	return utuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (utuo *UserTokenUpdateOne) ClearIPAddress() *UserTokenUpdateOne {
	utuo.mutation.ClearIPAddress()
	return utuo
}

// SetUserAgent sets the "user_agent" field.
func (utuo *UserTokenUpdateOne) SetUserAgent(s string) *UserTokenUpdateOne {
	utuo.mutation.SetUserAgent(s)
	return utuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableUserAgent(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetUserAgent(*s)
	}
	return utuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (utuo *UserTokenUpdateOne) ClearUserAgent() *UserTokenUpdateOne {
	utuo.mutation.ClearUserAgent()
	return utuo
}

// SetParentTokenID sets the "parent_token_id" field.
func (utuo *UserTokenUpdateOne) SetParentTokenID(s string) *UserTokenUpdateOne {
	utuo.mutation.SetParentTokenID(s)
	return utuo
}

// SetNillableParentTokenID sets the "parent_token_id" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableParentTokenID(s *string) *UserTokenUpdateOne {
	if s != nil {
		utuo.SetParentTokenID(*s)
	}
	return utuo
}

// ClearParentTokenID clears the value of the "parent_token_id" field.
func (utuo *UserTokenUpdateOne) ClearParentTokenID() *UserTokenUpdateOne {
	utuo.mutation.ClearParentTokenID()
	return utuo
}

// SetCreatedAt sets the "created_at" field.
func (utuo *UserTokenUpdateOne) SetCreatedAt(t time.Time) *UserTokenUpdateOne {
	utuo.mutation.SetCreatedAt(t)
	return utuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *UserTokenUpdateOne {
	if t != nil {
		utuo.SetCreatedAt(*t)
	}
	return utuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (utuo *UserTokenUpdateOne) ClearCreatedAt() *UserTokenUpdateOne {
	utuo.mutation.ClearCreatedAt()
	return utuo
}

// SetRevokedAt sets the "revoked_at" field.
func (utuo *UserTokenUpdateOne) SetRevokedAt(t time.Time) *UserTokenUpdateOne {
	utuo.mutation.SetRevokedAt(t)
	return utuo
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableRevokedAt(t *time.Time) *UserTokenUpdateOne {
	if t != nil {
		utuo.SetRevokedAt(*t)
	}
	return utuo
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (utuo *UserTokenUpdateOne) ClearRevokedAt() *UserTokenUpdateOne {
	utuo.mutation.ClearRevokedAt()
	return utuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (utuo *UserTokenUpdateOne) SetLastUsedAt(t time.Time) *UserTokenUpdateOne {
	utuo.mutation.SetLastUsedAt(t)
	return utuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableLastUsedAt(t *time.Time) *UserTokenUpdateOne {
	if t != nil {
		utuo.SetLastUsedAt(*t)
	}
	return utuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (utuo *UserTokenUpdateOne) ClearLastUsedAt() *UserTokenUpdateOne {
	utuo.mutation.ClearLastUsedAt()
	return utuo
}

// SetUser sets the "user" edge to the User entity.
func (utuo *UserTokenUpdateOne) SetUser(u *User) *UserTokenUpdateOne {
	return utuo.SetUserID(u.ID)
}

// AddChildUserTokenIDs adds the "child_user_tokens" edge to the UserToken entity by IDs.
func (utuo *UserTokenUpdateOne) AddChildUserTokenIDs(ids ...string) *UserTokenUpdateOne {
	utuo.mutation.AddChildUserTokenIDs(ids...)
	return utuo
}

// AddChildUserTokens adds the "child_user_tokens" edges to the UserToken entity.
func (utuo *UserTokenUpdateOne) AddChildUserTokens(u ...*UserToken) *UserTokenUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utuo.AddChildUserTokenIDs(ids...)
}

// SetParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID.
func (utuo *UserTokenUpdateOne) SetParentUserTokenID(id string) *UserTokenUpdateOne {
	utuo.mutation.SetParentUserTokenID(id)
	return utuo
}

// SetNillableParentUserTokenID sets the "parent_user_token" edge to the UserToken entity by ID if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableParentUserTokenID(id *string) *UserTokenUpdateOne {
	if id != nil {
		utuo = utuo.SetParentUserTokenID(*id)
	}
	return utuo
}

// SetParentUserToken sets the "parent_user_token" edge to the UserToken entity.
func (utuo *UserTokenUpdateOne) SetParentUserToken(u *UserToken) *UserTokenUpdateOne {
	return utuo.SetParentUserTokenID(u.ID)
}

// Mutation returns the UserTokenMutation object of the builder.
func (utuo *UserTokenUpdateOne) Mutation() *UserTokenMutation {
	return utuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utuo *UserTokenUpdateOne) ClearUser() *UserTokenUpdateOne {
	utuo.mutation.ClearUser()
	return utuo
}

// ClearChildUserTokens clears all "child_user_tokens" edges to the UserToken entity.
func (utuo *UserTokenUpdateOne) ClearChildUserTokens() *UserTokenUpdateOne {
	utuo.mutation.ClearChildUserTokens()
	return utuo
}

// RemoveChildUserTokenIDs removes the "child_user_tokens" edge to UserToken entities by IDs.
func (utuo *UserTokenUpdateOne) RemoveChildUserTokenIDs(ids ...string) *UserTokenUpdateOne {
	utuo.mutation.RemoveChildUserTokenIDs(ids...)
	return utuo
}

// RemoveChildUserTokens removes "child_user_tokens" edges to UserToken entities.
func (utuo *UserTokenUpdateOne) RemoveChildUserTokens(u ...*UserToken) *UserTokenUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utuo.RemoveChildUserTokenIDs(ids...)
}

// ClearParentUserToken clears the "parent_user_token" edge to the UserToken entity.
func (utuo *UserTokenUpdateOne) ClearParentUserToken() *UserTokenUpdateOne {
	utuo.mutation.ClearParentUserToken()
	return utuo
}

// Where appends a list predicates to the UserTokenUpdate builder.
func (utuo *UserTokenUpdateOne) Where(ps ...predicate.UserToken) *UserTokenUpdateOne {
	utuo.mutation.Where(ps...)
	return utuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utuo *UserTokenUpdateOne) Select(field string, fields ...string) *UserTokenUpdateOne {
	utuo.fields = append([]string{field}, fields...)
	return utuo
}

// Save executes the query and returns the updated UserToken entity.
func (utuo *UserTokenUpdateOne) Save(ctx context.Context) (*UserToken, error) {
	return withHooks(ctx, utuo.sqlSave, utuo.mutation, utuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UserTokenUpdateOne) SaveX(ctx context.Context) *UserToken {
	node, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utuo *UserTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UserTokenUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utuo *UserTokenUpdateOne) check() error {
	if v, ok := utuo.mutation.TokenType(); ok {
		if err := usertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "UserToken.token_type": %w`, err)}
		}
	}
	return nil
}

func (utuo *UserTokenUpdateOne) sqlSave(ctx context.Context) (_node *UserToken, err error) {
	if err := utuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertoken.Table, usertoken.Columns, sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString))
	id, ok := utuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertoken.FieldID)
		for _, f := range fields {
			if !usertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utuo.mutation.TokenType(); ok {
		_spec.SetField(usertoken.FieldTokenType, field.TypeEnum, value)
	}
	if value, ok := utuo.mutation.TokenHash(); ok {
		_spec.SetField(usertoken.FieldTokenHash, field.TypeString, value)
	}
	if value, ok := utuo.mutation.Jti(); ok {
		_spec.SetField(usertoken.FieldJti, field.TypeString, value)
	}
	if value, ok := utuo.mutation.ExpiresAt(); ok {
		_spec.SetField(usertoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := utuo.mutation.IsRevoked(); ok {
		_spec.SetField(usertoken.FieldIsRevoked, field.TypeBool, value)
	}
	if utuo.mutation.IsRevokedCleared() {
		_spec.ClearField(usertoken.FieldIsRevoked, field.TypeBool)
	}
	if value, ok := utuo.mutation.DeviceInfo(); ok {
		_spec.SetField(usertoken.FieldDeviceInfo, field.TypeString, value)
	}
	if utuo.mutation.DeviceInfoCleared() {
		_spec.ClearField(usertoken.FieldDeviceInfo, field.TypeString)
	}
	if value, ok := utuo.mutation.IPAddress(); ok {
		_spec.SetField(usertoken.FieldIPAddress, field.TypeString, value)
	}
	if utuo.mutation.IPAddressCleared() {
		_spec.ClearField(usertoken.FieldIPAddress, field.TypeString)
	}
	if value, ok := utuo.mutation.UserAgent(); ok {
		_spec.SetField(usertoken.FieldUserAgent, field.TypeString, value)
	}
	if utuo.mutation.UserAgentCleared() {
		_spec.ClearField(usertoken.FieldUserAgent, field.TypeString)
	}
	if value, ok := utuo.mutation.CreatedAt(); ok {
		_spec.SetField(usertoken.FieldCreatedAt, field.TypeTime, value)
	}
	if utuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := utuo.mutation.RevokedAt(); ok {
		_spec.SetField(usertoken.FieldRevokedAt, field.TypeTime, value)
	}
	if utuo.mutation.RevokedAtCleared() {
		_spec.ClearField(usertoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := utuo.mutation.LastUsedAt(); ok {
		_spec.SetField(usertoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if utuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(usertoken.FieldLastUsedAt, field.TypeTime)
	}
	if utuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utuo.mutation.ChildUserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utuo.mutation.RemovedChildUserTokensIDs(); len(nodes) > 0 && !utuo.mutation.ChildUserTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utuo.mutation.ChildUserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertoken.ChildUserTokensTable,
			Columns: []string{usertoken.ChildUserTokensColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utuo.mutation.ParentUserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.ParentUserTokenTable,
			Columns: []string{usertoken.ParentUserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utuo.mutation.ParentUserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertoken.ParentUserTokenTable,
			Columns: []string{usertoken.ParentUserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserToken{config: utuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utuo.mutation.done = true
	return _node, nil
}
