// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/apikey"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// ApiKeyCreate is the builder for creating a ApiKey entity.
type ApiKeyCreate struct {
	config
	mutation *ApiKeyMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (akc *ApiKeyCreate) SetUserID(s string) *ApiKeyCreate {
	akc.mutation.SetUserID(s)
	return akc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableUserID(s *string) *ApiKeyCreate {
	if s != nil {
		akc.SetUserID(*s)
	}
	return akc
}

// SetKeyName sets the "key_name" field.
func (akc *ApiKeyCreate) SetKeyName(s string) *ApiKeyCreate {
	akc.mutation.SetKeyName(s)
	return akc
}

// SetAPIKeyHash sets the "api_key_hash" field.
func (akc *ApiKeyCreate) SetAPIKeyHash(s string) *ApiKeyCreate {
	akc.mutation.SetAPIKeyHash(s)
	return akc
}

// SetAPIKeyPrefix sets the "api_key_prefix" field.
func (akc *ApiKeyCreate) SetAPIKeyPrefix(s string) *ApiKeyCreate {
	akc.mutation.SetAPIKeyPrefix(s)
	return akc
}

// SetPermissions sets the "permissions" field.
func (akc *ApiKeyCreate) SetPermissions(jm json.RawMessage) *ApiKeyCreate {
	akc.mutation.SetPermissions(jm)
	return akc
}

// SetRateLimitPerMinute sets the "rate_limit_per_minute" field.
func (akc *ApiKeyCreate) SetRateLimitPerMinute(i int32) *ApiKeyCreate {
	akc.mutation.SetRateLimitPerMinute(i)
	return akc
}

// SetNillableRateLimitPerMinute sets the "rate_limit_per_minute" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableRateLimitPerMinute(i *int32) *ApiKeyCreate {
	if i != nil {
		akc.SetRateLimitPerMinute(*i)
	}
	return akc
}

// SetIsActive sets the "is_active" field.
func (akc *ApiKeyCreate) SetIsActive(b bool) *ApiKeyCreate {
	akc.mutation.SetIsActive(b)
	return akc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableIsActive(b *bool) *ApiKeyCreate {
	if b != nil {
		akc.SetIsActive(*b)
	}
	return akc
}

// SetLastUsedAt sets the "last_used_at" field.
func (akc *ApiKeyCreate) SetLastUsedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetLastUsedAt(t)
	return akc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableLastUsedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetLastUsedAt(*t)
	}
	return akc
}

// SetExpiresAt sets the "expires_at" field.
func (akc *ApiKeyCreate) SetExpiresAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetExpiresAt(t)
	return akc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableExpiresAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetExpiresAt(*t)
	}
	return akc
}

// SetCreatedAt sets the "created_at" field.
func (akc *ApiKeyCreate) SetCreatedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetCreatedAt(t)
	return akc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableCreatedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetCreatedAt(*t)
	}
	return akc
}

// SetUpdatedAt sets the "updated_at" field.
func (akc *ApiKeyCreate) SetUpdatedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetUpdatedAt(t)
	return akc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableUpdatedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetUpdatedAt(*t)
	}
	return akc
}

// SetDeletedAt sets the "deleted_at" field.
func (akc *ApiKeyCreate) SetDeletedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetDeletedAt(t)
	return akc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableDeletedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetDeletedAt(*t)
	}
	return akc
}

// SetID sets the "id" field.
func (akc *ApiKeyCreate) SetID(s string) *ApiKeyCreate {
	akc.mutation.SetID(s)
	return akc
}

// SetUser sets the "user" edge to the User entity.
func (akc *ApiKeyCreate) SetUser(u *User) *ApiKeyCreate {
	return akc.SetUserID(u.ID)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (akc *ApiKeyCreate) Mutation() *ApiKeyMutation {
	return akc.mutation
}

// Save creates the ApiKey in the database.
func (akc *ApiKeyCreate) Save(ctx context.Context) (*ApiKey, error) {
	return withHooks(ctx, akc.sqlSave, akc.mutation, akc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (akc *ApiKeyCreate) SaveX(ctx context.Context) *ApiKey {
	v, err := akc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akc *ApiKeyCreate) Exec(ctx context.Context) error {
	_, err := akc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akc *ApiKeyCreate) ExecX(ctx context.Context) {
	if err := akc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akc *ApiKeyCreate) check() error {
	if _, ok := akc.mutation.KeyName(); !ok {
		return &ValidationError{Name: "key_name", err: errors.New(`ent: missing required field "ApiKey.key_name"`)}
	}
	if _, ok := akc.mutation.APIKeyHash(); !ok {
		return &ValidationError{Name: "api_key_hash", err: errors.New(`ent: missing required field "ApiKey.api_key_hash"`)}
	}
	if _, ok := akc.mutation.APIKeyPrefix(); !ok {
		return &ValidationError{Name: "api_key_prefix", err: errors.New(`ent: missing required field "ApiKey.api_key_prefix"`)}
	}
	return nil
}

func (akc *ApiKeyCreate) sqlSave(ctx context.Context) (*ApiKey, error) {
	if err := akc.check(); err != nil {
		return nil, err
	}
	_node, _spec := akc.createSpec()
	if err := sqlgraph.CreateNode(ctx, akc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApiKey.ID type: %T", _spec.ID.Value)
		}
	}
	akc.mutation.id = &_node.ID
	akc.mutation.done = true
	return _node, nil
}

func (akc *ApiKeyCreate) createSpec() (*ApiKey, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiKey{config: akc.config}
		_spec = sqlgraph.NewCreateSpec(apikey.Table, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	)
	if id, ok := akc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := akc.mutation.KeyName(); ok {
		_spec.SetField(apikey.FieldKeyName, field.TypeString, value)
		_node.KeyName = value
	}
	if value, ok := akc.mutation.APIKeyHash(); ok {
		_spec.SetField(apikey.FieldAPIKeyHash, field.TypeString, value)
		_node.APIKeyHash = value
	}
	if value, ok := akc.mutation.APIKeyPrefix(); ok {
		_spec.SetField(apikey.FieldAPIKeyPrefix, field.TypeString, value)
		_node.APIKeyPrefix = value
	}
	if value, ok := akc.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := akc.mutation.RateLimitPerMinute(); ok {
		_spec.SetField(apikey.FieldRateLimitPerMinute, field.TypeInt32, value)
		_node.RateLimitPerMinute = value
	}
	if value, ok := akc.mutation.IsActive(); ok {
		_spec.SetField(apikey.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := akc.mutation.LastUsedAt(); ok {
		_spec.SetField(apikey.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := akc.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := akc.mutation.CreatedAt(); ok {
		_spec.SetField(apikey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := akc.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := akc.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := akc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApiKeyCreateBulk is the builder for creating many ApiKey entities in bulk.
type ApiKeyCreateBulk struct {
	config
	err      error
	builders []*ApiKeyCreate
}

// Save creates the ApiKey entities in the database.
func (akcb *ApiKeyCreateBulk) Save(ctx context.Context) ([]*ApiKey, error) {
	if akcb.err != nil {
		return nil, akcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(akcb.builders))
	nodes := make([]*ApiKey, len(akcb.builders))
	mutators := make([]Mutator, len(akcb.builders))
	for i := range akcb.builders {
		func(i int, root context.Context) {
			builder := akcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akcb *ApiKeyCreateBulk) SaveX(ctx context.Context) []*ApiKey {
	v, err := akcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akcb *ApiKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := akcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akcb *ApiKeyCreateBulk) ExecX(ctx context.Context) {
	if err := akcb.Exec(ctx); err != nil {
		panic(err)
	}
}
