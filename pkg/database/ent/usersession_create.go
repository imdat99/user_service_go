// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
	"github.com/imdat99/user_service_go/pkg/database/ent/usersession"
)

// UserSessionCreate is the builder for creating a UserSession entity.
type UserSessionCreate struct {
	config
	mutation *UserSessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (usc *UserSessionCreate) SetUserID(s string) *UserSessionCreate {
	usc.mutation.SetUserID(s)
	return usc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableUserID(s *string) *UserSessionCreate {
	if s != nil {
		usc.SetUserID(*s)
	}
	return usc
}

// SetSessionToken sets the "session_token" field.
func (usc *UserSessionCreate) SetSessionToken(s string) *UserSessionCreate {
	usc.mutation.SetSessionToken(s)
	return usc
}

// SetDeviceInfo sets the "device_info" field.
func (usc *UserSessionCreate) SetDeviceInfo(s string) *UserSessionCreate {
	usc.mutation.SetDeviceInfo(s)
	return usc
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableDeviceInfo(s *string) *UserSessionCreate {
	if s != nil {
		usc.SetDeviceInfo(*s)
	}
	return usc
}

// SetIPAddress sets the "ip_address" field.
func (usc *UserSessionCreate) SetIPAddress(s string) *UserSessionCreate {
	usc.mutation.SetIPAddress(s)
	return usc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableIPAddress(s *string) *UserSessionCreate {
	if s != nil {
		usc.SetIPAddress(*s)
	}
	return usc
}

// SetUserAgent sets the "user_agent" field.
func (usc *UserSessionCreate) SetUserAgent(s string) *UserSessionCreate {
	usc.mutation.SetUserAgent(s)
	return usc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableUserAgent(s *string) *UserSessionCreate {
	if s != nil {
		usc.SetUserAgent(*s)
	}
	return usc
}

// SetIsActive sets the "is_active" field.
func (usc *UserSessionCreate) SetIsActive(b bool) *UserSessionCreate {
	usc.mutation.SetIsActive(b)
	return usc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableIsActive(b *bool) *UserSessionCreate {
	if b != nil {
		usc.SetIsActive(*b)
	}
	return usc
}

// SetExpiresAt sets the "expires_at" field.
func (usc *UserSessionCreate) SetExpiresAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetExpiresAt(t)
	return usc
}

// SetCreatedAt sets the "created_at" field.
func (usc *UserSessionCreate) SetCreatedAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableCreatedAt(t *time.Time) *UserSessionCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *UserSessionCreate) SetUpdatedAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableUpdatedAt(t *time.Time) *UserSessionCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSessionCreate) SetID(s string) *UserSessionCreate {
	usc.mutation.SetID(s)
	return usc
}

// SetUser sets the "user" edge to the User entity.
func (usc *UserSessionCreate) SetUser(u *User) *UserSessionCreate {
	return usc.SetUserID(u.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usc *UserSessionCreate) Mutation() *UserSessionMutation {
	return usc.mutation
}

// Save creates the UserSession in the database.
func (usc *UserSessionCreate) Save(ctx context.Context) (*UserSession, error) {
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSessionCreate) SaveX(ctx context.Context) *UserSession {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSessionCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSessionCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSessionCreate) check() error {
	if _, ok := usc.mutation.SessionToken(); !ok {
		return &ValidationError{Name: "session_token", err: errors.New(`ent: missing required field "UserSession.session_token"`)}
	}
	if _, ok := usc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "UserSession.expires_at"`)}
	}
	return nil
}

func (usc *UserSessionCreate) sqlSave(ctx context.Context) (*UserSession, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserSession.ID type: %T", _spec.ID.Value)
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSessionCreate) createSpec() (*UserSession, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSession{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersession.Table, sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.SessionToken(); ok {
		_spec.SetField(usersession.FieldSessionToken, field.TypeString, value)
		_node.SessionToken = value
	}
	if value, ok := usc.mutation.DeviceInfo(); ok {
		_spec.SetField(usersession.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if value, ok := usc.mutation.IPAddress(); ok {
		_spec.SetField(usersession.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := usc.mutation.UserAgent(); ok {
		_spec.SetField(usersession.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := usc.mutation.IsActive(); ok {
		_spec.SetField(usersession.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := usc.mutation.ExpiresAt(); ok {
		_spec.SetField(usersession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(usersession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSessionCreateBulk is the builder for creating many UserSession entities in bulk.
type UserSessionCreateBulk struct {
	config
	err      error
	builders []*UserSessionCreate
}

// Save creates the UserSession entities in the database.
func (uscb *UserSessionCreateBulk) Save(ctx context.Context) ([]*UserSession, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSession, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSessionCreateBulk) SaveX(ctx context.Context) []*UserSession {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSessionCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
