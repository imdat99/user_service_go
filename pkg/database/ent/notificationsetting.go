// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/imdat99/user_service_go/pkg/database/ent/notificationsetting"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// NotificationSetting is the model entity for the NotificationSetting schema.
type NotificationSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// EmailNotifications holds the value of the "email_notifications" field.
	EmailNotifications bool `json:"email_notifications,omitempty"`
	// SmsNotifications holds the value of the "sms_notifications" field.
	SmsNotifications bool `json:"sms_notifications,omitempty"`
	// PushNotifications holds the value of the "push_notifications" field.
	PushNotifications bool `json:"push_notifications,omitempty"`
	// MarketingEmails holds the value of the "marketing_emails" field.
	MarketingEmails bool `json:"marketing_emails,omitempty"`
	// SecurityAlerts holds the value of the "security_alerts" field.
	SecurityAlerts bool `json:"security_alerts,omitempty"`
	// LoginAlerts holds the value of the "login_alerts" field.
	LoginAlerts bool `json:"login_alerts,omitempty"`
	// ProfileUpdates holds the value of the "profile_updates" field.
	ProfileUpdates bool `json:"profile_updates,omitempty"`
	// PaymentNotifications holds the value of the "payment_notifications" field.
	PaymentNotifications bool `json:"payment_notifications,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationSettingQuery when eager-loading is set.
	Edges        NotificationSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationSettingEdges holds the relations/edges for other nodes in the graph.
type NotificationSettingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationSettingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationsetting.FieldEmailNotifications, notificationsetting.FieldSmsNotifications, notificationsetting.FieldPushNotifications, notificationsetting.FieldMarketingEmails, notificationsetting.FieldSecurityAlerts, notificationsetting.FieldLoginAlerts, notificationsetting.FieldProfileUpdates, notificationsetting.FieldPaymentNotifications:
			values[i] = new(sql.NullBool)
		case notificationsetting.FieldID, notificationsetting.FieldUserID:
			values[i] = new(sql.NullString)
		case notificationsetting.FieldCreatedAt, notificationsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationSetting fields.
func (ns *NotificationSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationsetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ns.ID = value.String
			}
		case notificationsetting.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ns.UserID = value.String
			}
		case notificationsetting.FieldEmailNotifications:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_notifications", values[i])
			} else if value.Valid {
				ns.EmailNotifications = value.Bool
			}
		case notificationsetting.FieldSmsNotifications:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sms_notifications", values[i])
			} else if value.Valid {
				ns.SmsNotifications = value.Bool
			}
		case notificationsetting.FieldPushNotifications:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field push_notifications", values[i])
			} else if value.Valid {
				ns.PushNotifications = value.Bool
			}
		case notificationsetting.FieldMarketingEmails:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field marketing_emails", values[i])
			} else if value.Valid {
				ns.MarketingEmails = value.Bool
			}
		case notificationsetting.FieldSecurityAlerts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field security_alerts", values[i])
			} else if value.Valid {
				ns.SecurityAlerts = value.Bool
			}
		case notificationsetting.FieldLoginAlerts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field login_alerts", values[i])
			} else if value.Valid {
				ns.LoginAlerts = value.Bool
			}
		case notificationsetting.FieldProfileUpdates:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field profile_updates", values[i])
			} else if value.Valid {
				ns.ProfileUpdates = value.Bool
			}
		case notificationsetting.FieldPaymentNotifications:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field payment_notifications", values[i])
			} else if value.Valid {
				ns.PaymentNotifications = value.Bool
			}
		case notificationsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ns.CreatedAt = value.Time
			}
		case notificationsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ns.UpdatedAt = value.Time
			}
		default:
			ns.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationSetting.
// This includes values selected through modifiers, order, etc.
func (ns *NotificationSetting) Value(name string) (ent.Value, error) {
	return ns.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the NotificationSetting entity.
func (ns *NotificationSetting) QueryUser() *UserQuery {
	return NewNotificationSettingClient(ns.config).QueryUser(ns)
}

// Update returns a builder for updating this NotificationSetting.
// Note that you need to call NotificationSetting.Unwrap() before calling this method if this NotificationSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NotificationSetting) Update() *NotificationSettingUpdateOne {
	return NewNotificationSettingClient(ns.config).UpdateOne(ns)
}

// Unwrap unwraps the NotificationSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NotificationSetting) Unwrap() *NotificationSetting {
	_tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationSetting is not a transactional entity")
	}
	ns.config.driver = _tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NotificationSetting) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ns.ID))
	builder.WriteString("user_id=")
	builder.WriteString(ns.UserID)
	builder.WriteString(", ")
	builder.WriteString("email_notifications=")
	builder.WriteString(fmt.Sprintf("%v", ns.EmailNotifications))
	builder.WriteString(", ")
	builder.WriteString("sms_notifications=")
	builder.WriteString(fmt.Sprintf("%v", ns.SmsNotifications))
	builder.WriteString(", ")
	builder.WriteString("push_notifications=")
	builder.WriteString(fmt.Sprintf("%v", ns.PushNotifications))
	builder.WriteString(", ")
	builder.WriteString("marketing_emails=")
	builder.WriteString(fmt.Sprintf("%v", ns.MarketingEmails))
	builder.WriteString(", ")
	builder.WriteString("security_alerts=")
	builder.WriteString(fmt.Sprintf("%v", ns.SecurityAlerts))
	builder.WriteString(", ")
	builder.WriteString("login_alerts=")
	builder.WriteString(fmt.Sprintf("%v", ns.LoginAlerts))
	builder.WriteString(", ")
	builder.WriteString("profile_updates=")
	builder.WriteString(fmt.Sprintf("%v", ns.ProfileUpdates))
	builder.WriteString(", ")
	builder.WriteString("payment_notifications=")
	builder.WriteString(fmt.Sprintf("%v", ns.PaymentNotifications))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ns.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationSettings is a parsable slice of NotificationSetting.
type NotificationSettings []*NotificationSetting
