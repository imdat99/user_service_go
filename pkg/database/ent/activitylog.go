// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/imdat99/user_service_go/pkg/database/ent/activitylog"
	"github.com/imdat99/user_service_go/pkg/database/ent/user"
)

// ActivityLog is the model entity for the ActivityLog schema.
type ActivityLog struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType activitylog.ActivityType `json:"activity_type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata json.RawMessage `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityLogQuery when eager-loading is set.
	Edges        ActivityLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActivityLogEdges holds the relations/edges for other nodes in the graph.
type ActivityLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activitylog.FieldMetadata:
			values[i] = new([]byte)
		case activitylog.FieldID, activitylog.FieldUserID, activitylog.FieldActivityType, activitylog.FieldDescription, activitylog.FieldIPAddress, activitylog.FieldUserAgent:
			values[i] = new(sql.NullString)
		case activitylog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityLog fields.
func (al *ActivityLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activitylog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				al.ID = value.String
			}
		case activitylog.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				al.UserID = value.String
			}
		case activitylog.FieldActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				al.ActivityType = activitylog.ActivityType(value.String)
			}
		case activitylog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				al.Description = value.String
			}
		case activitylog.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				al.IPAddress = value.String
			}
		case activitylog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				al.UserAgent = value.String
			}
		case activitylog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case activitylog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityLog.
// This includes values selected through modifiers, order, etc.
func (al *ActivityLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ActivityLog entity.
func (al *ActivityLog) QueryUser() *UserQuery {
	return NewActivityLogClient(al.config).QueryUser(al)
}

// Update returns a builder for updating this ActivityLog.
// Note that you need to call ActivityLog.Unwrap() before calling this method if this ActivityLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *ActivityLog) Update() *ActivityLogUpdateOne {
	return NewActivityLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the ActivityLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *ActivityLog) Unwrap() *ActivityLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *ActivityLog) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("user_id=")
	builder.WriteString(al.UserID)
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(fmt.Sprintf("%v", al.ActivityType))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(al.Description)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(al.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(al.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", al.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityLogs is a parsable slice of ActivityLog.
type ActivityLogs []*ActivityLog
