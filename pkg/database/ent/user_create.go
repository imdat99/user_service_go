// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/pkg/database/ent/activitylog"
	"app/pkg/database/ent/apikey"
	"app/pkg/database/ent/notificationsetting"
	"app/pkg/database/ent/paymentmethod"
	"app/pkg/database/ent/privacysetting"
	"app/pkg/database/ent/transaction"
	"app/pkg/database/ent/user"
	"app/pkg/database/ent/user2fa"
	"app/pkg/database/ent/userprofile"
	"app/pkg/database/ent/usersession"
	"app/pkg/database/ent/usertoken"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetUsername(*s)
	}
	return uc
}

// SetPasswordHash sets the "password_hash" field.
func (uc *UserCreate) SetPasswordHash(s string) *UserCreate {
	uc.mutation.SetPasswordHash(s)
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uc *UserCreate) SetDateOfBirth(t time.Time) *UserCreate {
	uc.mutation.SetDateOfBirth(t)
	return uc
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (uc *UserCreate) SetNillableDateOfBirth(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDateOfBirth(*t)
	}
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *UserCreate) SetAvatarURL(s string) *UserCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarURL(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatarURL(*s)
	}
	return uc
}

// SetEmailVerified sets the "email_verified" field.
func (uc *UserCreate) SetEmailVerified(b bool) *UserCreate {
	uc.mutation.SetEmailVerified(b)
	return uc
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetEmailVerified(*b)
	}
	return uc
}

// SetPhoneVerified sets the "phone_verified" field.
func (uc *UserCreate) SetPhoneVerified(b bool) *UserCreate {
	uc.mutation.SetPhoneVerified(b)
	return uc
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetPhoneVerified(*b)
	}
	return uc
}

// SetAccountStatus sets the "account_status" field.
func (uc *UserCreate) SetAccountStatus(us user.AccountStatus) *UserCreate {
	uc.mutation.SetAccountStatus(us)
	return uc
}

// SetNillableAccountStatus sets the "account_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccountStatus(us *user.AccountStatus) *UserCreate {
	if us != nil {
		uc.SetAccountStatus(*us)
	}
	return uc
}

// SetLastLoginAt sets the "last_login_at" field.
func (uc *UserCreate) SetLastLoginAt(t time.Time) *UserCreate {
	uc.mutation.SetLastLoginAt(t)
	return uc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLoginAt(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (uc *UserCreate) AddActivityLogIDs(ids ...string) *UserCreate {
	uc.mutation.AddActivityLogIDs(ids...)
	return uc
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (uc *UserCreate) AddActivityLogs(a ...*ActivityLog) *UserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddActivityLogIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uc *UserCreate) AddAPIKeyIDs(ids ...string) *UserCreate {
	uc.mutation.AddAPIKeyIDs(ids...)
	return uc
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uc *UserCreate) AddAPIKeys(a ...*ApiKey) *UserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAPIKeyIDs(ids...)
}

// SetNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID.
func (uc *UserCreate) SetNotificationSettingID(id string) *UserCreate {
	uc.mutation.SetNotificationSettingID(id)
	return uc
}

// SetNillableNotificationSettingID sets the "notification_setting" edge to the NotificationSetting entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableNotificationSettingID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetNotificationSettingID(*id)
	}
	return uc
}

// SetNotificationSetting sets the "notification_setting" edge to the NotificationSetting entity.
func (uc *UserCreate) SetNotificationSetting(n *NotificationSetting) *UserCreate {
	return uc.SetNotificationSettingID(n.ID)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (uc *UserCreate) AddPaymentMethodIDs(ids ...string) *UserCreate {
	uc.mutation.AddPaymentMethodIDs(ids...)
	return uc
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (uc *UserCreate) AddPaymentMethods(p ...*PaymentMethod) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPaymentMethodIDs(ids...)
}

// SetPrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID.
func (uc *UserCreate) SetPrivacySettingID(id string) *UserCreate {
	uc.mutation.SetPrivacySettingID(id)
	return uc
}

// SetNillablePrivacySettingID sets the "privacy_setting" edge to the PrivacySetting entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillablePrivacySettingID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetPrivacySettingID(*id)
	}
	return uc
}

// SetPrivacySetting sets the "privacy_setting" edge to the PrivacySetting entity.
func (uc *UserCreate) SetPrivacySetting(p *PrivacySetting) *UserCreate {
	return uc.SetPrivacySettingID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (uc *UserCreate) AddTransactionIDs(ids ...string) *UserCreate {
	uc.mutation.AddTransactionIDs(ids...)
	return uc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (uc *UserCreate) AddTransactions(t ...*Transaction) *UserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTransactionIDs(ids...)
}

// SetUser2faID sets the "user_2fa" edge to the User2fa entity by ID.
func (uc *UserCreate) SetUser2faID(id string) *UserCreate {
	uc.mutation.SetUser2faID(id)
	return uc
}

// SetNillableUser2faID sets the "user_2fa" edge to the User2fa entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableUser2faID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetUser2faID(*id)
	}
	return uc
}

// SetUser2fa sets the "user_2fa" edge to the User2fa entity.
func (uc *UserCreate) SetUser2fa(u *User2fa) *UserCreate {
	return uc.SetUser2faID(u.ID)
}

// SetUserProfileID sets the "user_profile" edge to the UserProfile entity by ID.
func (uc *UserCreate) SetUserProfileID(id string) *UserCreate {
	uc.mutation.SetUserProfileID(id)
	return uc
}

// SetNillableUserProfileID sets the "user_profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableUserProfileID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetUserProfileID(*id)
	}
	return uc
}

// SetUserProfile sets the "user_profile" edge to the UserProfile entity.
func (uc *UserCreate) SetUserProfile(u *UserProfile) *UserCreate {
	return uc.SetUserProfileID(u.ID)
}

// AddUserSessionIDs adds the "user_sessions" edge to the UserSession entity by IDs.
func (uc *UserCreate) AddUserSessionIDs(ids ...string) *UserCreate {
	uc.mutation.AddUserSessionIDs(ids...)
	return uc
}

// AddUserSessions adds the "user_sessions" edges to the UserSession entity.
func (uc *UserCreate) AddUserSessions(u ...*UserSession) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserSessionIDs(ids...)
}

// AddUserTokenIDs adds the "user_tokens" edge to the UserToken entity by IDs.
func (uc *UserCreate) AddUserTokenIDs(ids ...string) *UserCreate {
	uc.mutation.AddUserTokenIDs(ids...)
	return uc
}

// AddUserTokens adds the "user_tokens" edges to the UserToken entity.
func (uc *UserCreate) AddUserTokens(u ...*UserToken) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserTokenIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if _, ok := uc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "User.first_name"`)}
	}
	if _, ok := uc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "User.last_name"`)}
	}
	if v, ok := uc.mutation.AccountStatus(); ok {
		if err := user.AccountStatusValidator(v); err != nil {
			return &ValidationError{Name: "account_status", err: fmt.Errorf(`ent: validator failed for field "User.account_status": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := uc.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := uc.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
		_node.PhoneVerified = value
	}
	if value, ok := uc.mutation.AccountStatus(); ok {
		_spec.SetField(user.FieldAccountStatus, field.TypeEnum, value)
		_node.AccountStatus = value
	}
	if value, ok := uc.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := uc.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NotificationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.NotificationSettingTable,
			Columns: []string{user.NotificationSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PaymentMethodsTable,
			Columns: []string{user.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PrivacySettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivacySettingTable,
			Columns: []string{user.PrivacySettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privacysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.User2faIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2faTable,
			Columns: []string{user.User2faColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user2fa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSessionsTable,
			Columns: []string{user.UserSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokensTable,
			Columns: []string{user.UserTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
